Id,Score,Body
"506004","15523","<h2>One does not simply redirect using jQuery</h2>

<p>jQuery is not necessary, and <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Location/replace"" rel=""noreferrer""><strong><code>window.location.replace(...)</code></strong></a> will best simulate an HTTP redirect.  </p>

<p><code>window.location.replace(...)</code> is better than using <code>window.location.href</code>, because <code>replace()</code> does not keep the originating page in the session history, meaning the user won't get stuck in a never-ending back-button fiasco.</p>

<p>If you want to simulate someone clicking on a link, use
 <strong><code>location.href</code></strong></p>

<p>If you want to simulate an HTTP redirect, use <strong><code>location.replace</code></strong></p>

<p><strong>For example:</strong></p>

<pre><code>// similar behavior as an HTTP redirect
window.location.replace(""http://stackoverflow.com"");

// similar behavior as clicking on a link
window.location.href = ""http://stackoverflow.com"";
</code></pre>
"
"1789952","14644","<p>ECMAScript 6  introduced <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes"" rel=""noreferrer""><code>String.prototype.includes</code></a>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const string = ""foo"";
const substring = ""oo"";

console.log(string.includes(substring));</code></pre>
</div>
</div>
</p>
<p><code>includes</code> <a href=""https://caniuse.com/#feat=es6-string-includes"" rel=""noreferrer"">doesn’t have Internet Explorer support</a>, though. In ECMAScript 5 or older environments, use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf"" rel=""noreferrer""><code>String.prototype.indexOf</code></a>, which returns -1 when a substring cannot be found:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var string = ""foo"";
var substring = ""oo"";

console.log(string.indexOf(substring) !== -1);</code></pre>
</div>
</div>
</p>
"
"5767357","13869","<p>Find the <code>index</code> of the array element you want to remove using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf"" rel=""noreferrer""><code>indexOf</code></a>, and then remove that index with <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"" rel=""noreferrer""><code>splice</code></a>.</p>
<blockquote>
<p>The splice() method changes the contents of an array by removing
existing elements and/or adding new elements.</p>
</blockquote>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const array = [2, 5, 9];

console.log(array);

const index = array.indexOf(5);
if (index &gt; -1) {
  array.splice(index, 1);
}

// array = [2, 9]
console.log(array); </code></pre>
</div>
</div>
</p>
<p>The second parameter of <code>splice</code> is the number of elements to remove. Note that <code>splice</code> modifies the array in place and returns a new array containing the elements that have been removed.</p>
<hr />
<p>For the reason of completeness, here are functions. The first function removes only a single occurrence (i.e. removing the first match of <code>5</code> from <code>[2,5,9,1,5,8,5]</code>), while the second function removes all occurrences:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function removeItemOnce(arr, value) {
  var index = arr.indexOf(value);
  if (index &gt; -1) {
    arr.splice(index, 1);
  }
  return arr;
}

function removeItemAll(arr, value) {
  var i = 0;
  while (i &lt; arr.length) {
    if (arr[i] === value) {
      arr.splice(i, 1);
    } else {
      ++i;
    }
  }
  return arr;
}
// Usage
console.log(removeItemOnce([2,5,9,1,5,8,5], 5))
console.log(removeItemAll([2,5,9,1,5,8,5], 5))</code></pre>
</div>
</div>
</p>
<p>In TypeScript, these functions can stay type-safe with a type parameter:</p>
<pre class=""lang-js prettyprint-override""><code>function removeItem&lt;T&gt;(arr: Array&lt;T&gt;, value: T): Array&lt;T&gt; { 
  const index = arr.indexOf(value);
  if (index &gt; -1) {
    arr.splice(index, 1);
  }
  return arr;
}
</code></pre>
"