Id,Score,Body
"950098","109","<p>It is possible to dynamically generate a JavaScript tag and append it to HTML document from inside other JavaScript code. This will load targeted JavaScript file.</p>

<pre><code>function includeJs(jsFilePath) {
    var js = document.createElement(""script"");

    js.type = ""text/javascript"";
    js.src = jsFilePath;

    document.body.appendChild(js);
}

includeJs(""/path/to/some/file.js"");
</code></pre>
"
"950109","64","<p>Maybe you can use this function that I found on this page <em><a href=""http://forums.digitalpoint.com/showthread.php?t=146094"" rel=""noreferrer"">How do I include a JavaScript file in a JavaScript file?</a></em>:</p>

<pre><code>function include(filename)
{
    var head = document.getElementsByTagName('head')[0];

    var script = document.createElement('script');
    script.src = filename;
    script.type = 'text/javascript';

    head.appendChild(script)
}
</code></pre>
"
"950146","4901","<p>The old versions of JavaScript had no import, include, or require, so many different approaches to this problem have been developed.</p>

<p>But since 2015 (ES6), JavaScript has had the <a href=""http://exploringjs.com/es6/ch_modules.html"" rel=""noreferrer"">ES6 modules</a> standard to import modules in Node.js, which is also supported by <a href=""https://caniuse.com/#feat=es6-module"" rel=""noreferrer"">most modern browsers</a>.</p>

<p>For compatibility with older browsers, build tools like <a href=""https://webpack.github.io/"" rel=""noreferrer"">Webpack</a> and <a href=""https://rollupjs.org/"" rel=""noreferrer"">Rollup</a> and/or transpilation tools like <a href=""https://babeljs.io/"" rel=""noreferrer"">Babel</a> can be used.</p>

<h1>ES6 Modules</h1>

<p>ECMAScript (ES6) modules have been <a href=""https://nodejs.org/api/esm.html"" rel=""noreferrer"">supported in Node.js</a> since v8.5, with the <code>--experimental-modules</code> flag, and since at least Node.js v13.8.0 without the flag. To enable ""ESM"" (vs. Node.js's previous CommonJS-style module system [""CJS""]) you either use <code>""type"": ""module""</code> in <code>package.json</code> or give the files the extension <code>.mjs</code>. (Similarly, modules written with Node.js's previous CJS module can be named <code>.cjs</code> if your default is ESM.)</p>

<p>Using <code>package.json</code>:</p>

<pre class=""lang-json prettyprint-override""><code>{
    ""type"": ""module""
}
</code></pre>

<p>Then <code>module.js</code>:</p>

<pre class=""lang-javascript prettyprint-override""><code>export function hello() {
  return ""Hello"";
}
</code></pre>

<p>Then <code>main.js</code>:</p>

<pre><code>import { hello } from './module.js';
let val = hello();  // val is ""Hello"";
</code></pre>

<p>Using <code>.mjs</code>, you'd have <code>module.mjs</code>:</p>

<pre><code>export function hello() {
  return ""Hello"";
}
</code></pre>

<p>Then <code>main.mjs</code>:</p>

<pre><code>import { hello } from './module.mjs';
let val = hello();  // val is ""Hello"";
</code></pre>

<h2>ECMAScript modules in browsers</h2>

<p>Browsers have had support for loading ECMAScript modules directly (no tools like Webpack required) <a href=""https://jakearchibald.com/2017/es-modules-in-browsers/"" rel=""noreferrer"">since</a> Safari 10.1, Chrome 61, Firefox 60, and Edge 16. Check the current support at <a href=""https://caniuse.com/#feat=es6-module"" rel=""noreferrer"">caniuse</a>. There is no need to use Node.js' <code>.mjs</code> extension; browsers completely ignore file extensions on modules/scripts.</p>

<pre class=""lang-javascript prettyprint-override""><code>&lt;script type=""module""&gt;
  import { hello } from './hello.mjs'; // Or it could be simply `hello.js`
  hello('world');
&lt;/script&gt;
</code></pre>

<pre class=""lang-javascript prettyprint-override""><code>// hello.mjs -- or it could be simply `hello.js`
export function hello(text) {
  const div = document.createElement('div');
  div.textContent = `Hello ${text}`;
  document.body.appendChild(div);
}
</code></pre>

<p>Read more at <a href=""https://jakearchibald.com/2017/es-modules-in-browsers/"" rel=""noreferrer"">https://jakearchibald.com/2017/es-modules-in-browsers/</a></p>

<h3>Dynamic imports in browsers</h3>

<p>Dynamic imports let the script load other scripts as needed:</p>

<pre class=""lang-javascript prettyprint-override""><code>&lt;script type=""module""&gt;
  import('hello.mjs').then(module =&gt; {
      module.hello('world');
    });
&lt;/script&gt;
</code></pre>

<p>Read more at <a href=""https://developers.google.com/web/updates/2017/11/dynamic-import"" rel=""noreferrer"">https://developers.google.com/web/updates/2017/11/dynamic-import</a></p>

<h1>Node.js require</h1>

<p>The older CJS module style, still widely used in Node.js, is the <a href=""https://nodejs.org/api/modules.html"" rel=""noreferrer""><code>module.exports</code>/<code>require</code></a> system.</p>

<pre class=""lang-javascript prettyprint-override""><code>// mymodule.js
module.exports = {
   hello: function() {
      return ""Hello"";
   }
}
</code></pre>

<pre class=""lang-javascript prettyprint-override""><code>// server.js
const myModule = require('./mymodule');
let val = myModule.hello(); // val is ""Hello""   
</code></pre>

<p>There are other ways for JavaScript to include external JavaScript contents in browsers that do not require preprocessing.</p>

<h1>AJAX Loading</h1>

<p>You could load an additional script with an AJAX call and then use <code>eval</code> to run it. This is the most straightforward way, but it is limited to your domain because of the JavaScript sandbox security model. Using <code>eval</code> also opens the door to bugs, hacks and security issues.</p>

<h1>Fetch Loading</h1>

<p>Like Dynamic Imports you can load one or many scripts with a <code>fetch</code> call using promises to control order of execution for script dependencies using the <a href=""https://git.habd.as/jhabdas/fetch-inject"" rel=""noreferrer"">Fetch Inject</a> library:</p>

<pre><code>fetchInject([
  'https://cdn.jsdelivr.net/momentjs/2.17.1/moment.min.js'
]).then(() =&gt; {
  console.log(`Finish in less than ${moment().endOf('year').fromNow(true)}`)
})
</code></pre>

<h1>jQuery Loading</h1>

<p>The <a href=""http://jquery.com/"" rel=""noreferrer"">jQuery</a> library provides loading functionality <a href=""http://api.jquery.com/jQuery.getScript/"" rel=""noreferrer"">in one line</a>:</p>

<pre class=""lang-javascript prettyprint-override""><code>$.getScript(""my_lovely_script.js"", function() {
   alert(""Script loaded but not necessarily executed."");
});
</code></pre>

<h1>Dynamic Script Loading</h1>

<p>You could add a script tag with the script URL into the HTML. To avoid the overhead of jQuery, this is an ideal solution.</p>

<p>The script can even reside on a different server. Furthermore, the browser evaluates the code. The <code>&lt;script&gt;</code> tag can be injected into either the web page <code>&lt;head&gt;</code>, or inserted just before the closing <code>&lt;/body&gt;</code> tag.</p>

<p>Here is an example of how this could work:</p>

<pre class=""lang-javascript prettyprint-override""><code>function dynamicallyLoadScript(url) {
    var script = document.createElement(""script"");  // create a script DOM node
    script.src = url;  // set its src to the provided URL

    document.head.appendChild(script);  // add it to the end of the head section of the page (could change 'head' to 'body' to add it to the end of the body section instead)
}
</code></pre>

<p>This function will add a new <code>&lt;script&gt;</code> tag to the end of the head section of the page, where the <code>src</code> attribute is set to the URL which is given to the function as the first parameter.</p>

<p>Both of these solutions are discussed and illustrated in <a href=""http://unixpapa.com/js/dyna.html"" rel=""noreferrer"">JavaScript Madness: Dynamic Script Loading</a>.</p>

<h1>Detecting when the script has been executed</h1>

<p>Now, there is a big issue you must know about. Doing that implies that <em>you remotely load the code</em>. Modern web browsers will load the file and keep executing your current script because they load everything asynchronously to improve performance. (This applies to both the jQuery method and the manual dynamic script loading method.)</p>

<p>It means that if you use these tricks directly, <em>you won't be able to use your newly loaded code the next line after you asked it to be loaded</em>, because it will be still loading.</p>

<p>For example: <code>my_lovely_script.js</code> contains <code>MySuperObject</code>:</p>

<pre class=""lang-javascript prettyprint-override""><code>var js = document.createElement(""script"");

js.type = ""text/javascript"";
js.src = jsFilePath;

document.body.appendChild(js);

var s = new MySuperObject();

Error : MySuperObject is undefined
</code></pre>

<p>Then you reload the page hitting <kbd>F5</kbd>. And it works! Confusing...</p>

<p><strong>So what to do about it ?</strong></p>

<p>Well, you can use the hack the author suggests in the link I gave you. In summary, for people in a hurry, he uses an event to run a callback function when the script is loaded. So you can put all the code using the remote library in the callback function. For example:</p>

<pre class=""lang-javascript prettyprint-override""><code>function loadScript(url, callback)
{
    // Adding the script tag to the head as suggested before
    var head = document.head;
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = url;

    // Then bind the event to the callback function.
    // There are several events for cross browser compatibility.
    script.onreadystatechange = callback;
    script.onload = callback;

    // Fire the loading
    head.appendChild(script);
}
</code></pre>

<p>Then you write the code you want to use AFTER the script is loaded in a <a href=""http://en.wikipedia.org/wiki/Anonymous_function"" rel=""noreferrer"">lambda function</a>:</p>

<pre class=""lang-javascript prettyprint-override""><code>var myPrettyCode = function() {
   // Here, do whatever you want
};
</code></pre>

<p>Then you run all that:</p>

<pre class=""lang-javascript prettyprint-override""><code>loadScript(""my_lovely_script.js"", myPrettyCode);
</code></pre>

<p>Note that the script may execute after the DOM has loaded, or before, depending on the browser and whether you included the line <code>script.async = false;</code>. There's a <a href=""http://www.html5rocks.com/en/tutorials/speed/script-loading/"" rel=""noreferrer"">great article on Javascript loading in general</a> which discusses this.</p>

<h1>Source Code Merge/Preprocessing</h1>

<p>As mentioned at the top of this answer, many developers use build/transpilation tool(s) like Parcel, Webpack, or Babel in their projects, allowing them to use upcoming JavaScript syntax, provide backward compatibility for older browsers, combine files, minify, perform code splitting etc.</p>
"
"1144788","4704","<p><strong>As of August 2020:</strong> <a href=""https://www.caniuse.com/mdn-javascript_builtins_string_replaceall"" rel=""noreferrer"">Modern browsers have support</a> for the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll"" rel=""noreferrer""><code>String.replaceAll()</code> method</a> defined by the ECMAScript 2021 language specification.</p>
<hr />
<p><strong>For older/legacy browsers:</strong></p>
<pre class=""lang-js prettyprint-override""><code>str = str.replace(/abc/g, '');
</code></pre>
<p>In response to comment:</p>
<pre class=""lang-js prettyprint-override""><code>var find = 'abc';
var re = new RegExp(find, 'g');

str = str.replace(re, '');
</code></pre>
<p>In response to <a href=""https://stackoverflow.com/users/49153/click-upvote"">Click Upvote</a>'s comment, you could simplify it even more:</p>
<pre class=""lang-js prettyprint-override""><code>function replaceAll(str, find, replace) {
  return str.replace(new RegExp(find, 'g'), replace);
}
</code></pre>
<p><strong>Note:</strong> Regular expressions contain special (meta) characters, and as such it is dangerous to blindly pass an argument in the <code>find</code> function above without pre-processing it to escape those characters.  This is covered in the <a href=""https://developer.mozilla.org/en-US/"" rel=""noreferrer"">Mozilla Developer Network</a>'s <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping"" rel=""noreferrer"">JavaScript Guide on Regular Expressions</a>, where they present the following utility function (which has changed at least twice since this answer was originally written, so make sure to check the MDN site for potential updates):</p>
<pre class=""lang-js prettyprint-override""><code>function escapeRegExp(string) {
  return string.replace(/[.*+\-?^${}()|[\]\\]/g, '\\$&amp;'); // $&amp; means the whole matched string
}
</code></pre>
<p>So in order to make the <code>replaceAll()</code> function above safer, it could be modified to the following if you also include <code>escapeRegExp</code>:</p>
<pre class=""lang-js prettyprint-override""><code>function replaceAll(str, find, replace) {
  return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);
}
</code></pre>
"
"41121827","82","<p>Because <br/>
<strong>$.ajax({type: &quot;POST&quot;</strong> - calls <strong>OPTIONS</strong> <br/>
<strong>$.post(</strong> - Calls <strong>POST</strong> <br/></p>
<p>Both are different. Postman calls &quot;POST&quot; properly, but when we call it, it will be &quot;OPTIONS&quot;.</p>
<p><strong>For C# web services - <a href=""https://en.wikipedia.org/wiki/ASP.NET_MVC_Framework#Apache_License_2.0_release"" rel=""noreferrer"">Web API</a></strong></p>
<p>Please add the following code in your <em>web.config</em> file under &lt;system.webServer&gt; tag. This will work:</p>
<pre><code>&lt;httpProtocol&gt;
    &lt;customHeaders&gt;
        &lt;add name=&quot;Access-Control-Allow-Origin&quot; value=&quot;*&quot; /&gt;
    &lt;/customHeaders&gt;
&lt;/httpProtocol&gt;
</code></pre>
<p>Please make sure you are not doing any mistake in the Ajax call</p>
<h3>jQuery</h3>
<pre><code>$.ajax({
    url: 'http://mysite.microsoft.sample.xyz.com/api/mycall',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
    },
    type: &quot;POST&quot;, /* or type:&quot;GET&quot; or type:&quot;PUT&quot; */
    dataType: &quot;json&quot;,
    data: {
    },
    success: function (result) {
        console.log(result);
    },
    error: function () {
        console.log(&quot;error&quot;);
    }
});
</code></pre>
<p><strong>Note:</strong> If you are looking for downloading content <strong>from a third-party website</strong> then <strong>this will not help you</strong>.  You can try the following code, but not JavaScript.</p>
<pre><code>System.Net.WebClient wc = new System.Net.WebClient();
string str = wc.DownloadString(&quot;http://mysite.microsoft.sample.xyz.com/api/mycall&quot;);
</code></pre>
"
"351421","4785","<p>Use the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push"" rel=""noreferrer""><code>Array.prototype.push</code></a> method to append values to the end of an array:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// initialize array
var arr = [
  ""Hi"",
  ""Hello"",
  ""Bonjour""
];

// append new value to the array
arr.push(""Hola"");

console.log(arr);</code></pre>
</div>
</div>
</p>
<hr />
<p>You can use the <code>push()</code> function to append more than one value to an array in a single call:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// initialize array
var arr = [""Hi"", ""Hello"", ""Bonjour"", ""Hola""];

// append multiple values to the array
arr.push(""Salut"", ""Hey"");

// display all values
for (var i = 0; i &lt; arr.length; i++) {
  console.log(arr[i]);
}</code></pre>
</div>
</div>
</p>
<hr />
<p><strong>Update</strong></p>
<p>If you want to add the items of one array to another array, you can use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat"" rel=""noreferrer""><code>firstArray.concat(secondArray)</code></a>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var arr = [
  ""apple"",
  ""banana"",
  ""cherry""
];

arr = arr.concat([
  ""dragonfruit"",
  ""elderberry"",
  ""fig""
]);

console.log(arr);</code></pre>
</div>
</div>
</p>
<p><strong>Update</strong></p>
<p>Just an addition to this answer if you want to prepend any value to the start of an array (i.e. first index) then you can use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift"" rel=""noreferrer""><code>Array.prototype.unshift</code></a> for this purpose.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var arr = [1, 2, 3];
arr.unshift(0);
console.log(arr);</code></pre>
</div>
</div>
</p>
<p>It also supports appending multiple values at once just like <code>push</code>.</p>
<hr />
<p><strong>Update</strong></p>
<p>Another way with <em><strong>ES6</strong></em> syntax is to return a new array with the <em><strong><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"" rel=""noreferrer"">spread syntax</a></strong></em>. This leaves the original array unchanged, but returns a new array with new items appended, compliant with the spirit of functional programming.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const arr = [
  ""Hi"",
  ""Hello"",
  ""Bonjour"",
];

const newArr = [
  ...arr,
  ""Salut"",
];

console.log(newArr);</code></pre>
</div>
</div>
</p>
"
"901119","168","<p>If you're using jQuery, you can use a library, such as <a href=""http://benalman.com/projects/jquery-bbq-plugin/"" rel=""noreferrer"">jQuery BBQ: Back Button &amp; Query Library</a>.</p>

<blockquote>
  <p>...jQuery BBQ provides a full <code>.deparam()</code> method, along with both hash state management, and fragment / query string parse and merge utility methods.</p>
</blockquote>

<p>Edit: Adding Deparam Example:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code> var DeparamExample = function() {
            var params = $.deparam.querystring();

            //nameofparam is the name of a param from url
            //code below will get param if ajax refresh with hash
            if (typeof params.nameofparam == 'undefined') {
                params = jQuery.deparam.fragment(window.location.href);
            }
            
            if (typeof params.nameofparam != 'undefined') {
                var paramValue = params.nameofparam.toString();
                  
            }
        };</code></pre>
</div>
</div>
</p>

<p>If you want to just use plain JavaScript, you could use...</p>

<pre class=""lang-js prettyprint-override""><code>var getParamValue = (function() {
    var params;
    var resetParams = function() {
            var query = window.location.search;
            var regex = /[?&amp;;](.+?)=([^&amp;;]+)/g;
            var match;

            params = {};

            if (query) {
                while (match = regex.exec(query)) {
                    params[match[1]] = decodeURIComponent(match[2]);
                }
            }    
        };

    window.addEventListener
    &amp;&amp; window.addEventListener('popstate', resetParams);

    resetParams();

    return function(param) {
        return params.hasOwnProperty(param) ? params[param] : null;
    }

})();​
</code></pre>

<p>Because of the new HTML History API and specifically <code>history.pushState()</code> and <code>history.replaceState()</code>, the URL can change which will invalidate the cache of parameters and their values.</p>

<p>This version will update its internal cache of parameters each time the history changes.</p>
"
"426273","152","<p>You can do</p>

<pre><code>$('.myCheckbox').attr('checked',true) //Standards compliant
</code></pre>

<p>or</p>

<pre><code>$(""form #mycheckbox"").attr('checked', true)
</code></pre>

<p>If you have custom code in the onclick event for the checkbox that you want to fire, use this one instead:</p>

<pre><code>$(""#mycheckbox"").click();
</code></pre>

<p>You can uncheck by removing the attribute entirely:</p>

<pre><code>$('.myCheckbox').removeAttr('checked')
</code></pre>

<p>You can check all checkboxes like this:</p>

<pre><code>$("".myCheckbox"").each(function(){
    $(""#mycheckbox"").click()
});
</code></pre>
"
"951033","140","<p>For the love of $DEITY please do not make a busy-wait sleep function.  <code>setTimeout</code> and <code>setInterval</code> do everything you need.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var showHide = document.getElementById('showHide');
setInterval(() =&gt; {
    showHide.style.visibility = ""initial"";
    setTimeout(() =&gt; {
        showHide.style.visibility = ""hidden""
    }, 1000);
    ;
}, 2000);   </code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""showHide""&gt;Hello! Goodbye!&lt;/div&gt;</code></pre>
</div>
</div>
</p>

<p>Every two second interval hide text for one second. This shows how to use setInterval and setTimeout to show and hide text each second. </p>
"
"1232046","4898","<p>Ways to clear an existing array <code>A</code>:</p>

<p><strong>Method 1</strong></p>

<p>(this was my original answer to the question)</p>

<pre><code>A = [];
</code></pre>

<p>This code will set the variable <code>A</code> to a new empty array. This is perfect if you don't have <strong>references to the original array <code>A</code></strong> anywhere else because this actually creates a brand new (empty) array. You should be careful with this method because if you have referenced this array from another variable or property, the original array will remain unchanged. Only use this if you only reference the array by its original variable <code>A</code>.</p>

<p>This is also the fastest solution.</p>

<p>This code sample shows the issue you can encounter when using this method:</p>

<pre><code>var arr1 = ['a','b','c','d','e','f'];
var arr2 = arr1;  // Reference arr1 by another variable 
arr1 = [];
console.log(arr2); // Output ['a','b','c','d','e','f']
</code></pre>

<p><strong>Method 2</strong> (as <a href=""https://stackoverflow.com/a/1234337/113570"">suggested</a> by <a href=""https://stackoverflow.com/users/2214/matthew-crumley"">Matthew Crumley</a>)</p>

<pre><code>A.length = 0
</code></pre>

<p>This will clear the existing array by setting its length to 0. Some have argued that this may not work in all implementations of JavaScript, but it turns out that this is not the case. It also works when using ""strict mode"" in ECMAScript 5 because the length property of an array is a read/write property.</p>

<p><strong>Method 3</strong> (as <a href=""https://stackoverflow.com/a/8134354/113570"">suggested</a> by <a href=""https://stackoverflow.com/users/1047275/anthony"">Anthony</a>)</p>

<pre><code>A.splice(0,A.length)
</code></pre>

<p>Using <code>.splice()</code> will work perfectly, but since the <code>.splice()</code> function will return an array with all the removed items, it will actually return a copy of the original array. Benchmarks suggest that this has no effect on performance whatsoever.</p>

<p><strong>Method 4</strong> (as <a href=""https://stackoverflow.com/a/17306971/113570"">suggested</a> by <a href=""https://stackoverflow.com/users/990356/tanguy-k"">tanguy_k</a>)</p>

<pre><code>while(A.length &gt; 0) {
    A.pop();
}
</code></pre>

<p>This solution is not very succinct, and it is also the slowest solution, contrary to earlier benchmarks referenced in the original answer.</p>

<p><strong>Performance</strong></p>

<p>Of all the methods of clearing an <strong><em>existing array</em></strong>, methods 2 and 3 are very similar in performance and are a lot faster than method 4. See this <a href=""http://jsben.ch/#/hyj65"" rel=""noreferrer"">benchmark</a>.</p>

<p>As pointed out by <a href=""https://stackoverflow.com/users/47401/diadistis"">Diadistis</a> in their <a href=""https://stackoverflow.com/a/28548360/113570"">answer</a> below, the original benchmarks that were used to determine the performance of the four methods described above were flawed. The original benchmark reused the cleared array so the second iteration was clearing an array that was already empty.</p>

<p>The following benchmark fixes this flaw: <a href=""http://jsben.ch/#/hyj65"" rel=""noreferrer"">http://jsben.ch/#/hyj65</a>. It clearly shows that methods #2 (length property) and #3 (splice) are the fastest (not counting method #1 which doesn't change the original array).</p>

<hr/>

<p>This has been a hot topic and the cause of a lot of controversy. There are actually many correct answers and because this answer has been marked as the accepted answer for a very long time, I will include all of the methods here. If you vote for this answer, please upvote the other answers that I have referenced as well.</p>
"
"901144","9014","<p><strong>Update: June-2021</strong></p>
<p>For a specific case when you need all query params:</p>
<pre><code>const urlSearchParams = new URLSearchParams(window.location.search);
const params = Object.fromEntries(urlSearchParams.entries());
</code></pre>
<p><strong>Update: Sep-2018</strong></p>
<p>You can use <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams#Browser_compatibility"" rel=""noreferrer"">URLSearchParams</a> which is simple and has <a href=""https://caniuse.com/#feat=urlsearchparams"" rel=""noreferrer"">decent (but not complete) browser support</a>.</p>
<pre><code>const urlParams = new URLSearchParams(window.location.search);
const myParam = urlParams.get('myParam');
</code></pre>
<p><strong>Original</strong></p>
<p>You don't need jQuery for that purpose. You can use just some pure JavaScript:</p>
<pre><code>function getParameterByName(name, url = window.location.href) {
    name = name.replace(/[\[\]]/g, '\\$&amp;');
    var regex = new RegExp('[?&amp;]' + name + '(=([^&amp;#]*)|&amp;|#|$)'),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}
</code></pre>
<p><strong>Usage:</strong></p>
<pre><code>// query string: ?foo=lorem&amp;bar=&amp;baz
var foo = getParameterByName('foo'); // &quot;lorem&quot;
var bar = getParameterByName('bar'); // &quot;&quot; (present with empty value)
var baz = getParameterByName('baz'); // &quot;&quot; (present with no value)
var qux = getParameterByName('qux'); // null (absent)
</code></pre>
<p>NOTE: If a parameter is present several times (<code>?foo=lorem&amp;foo=ipsum</code>), you will get the first value (<code>lorem</code>). There is no standard about this and usages vary, see for example this question: <a href=""https://stackoverflow.com/questions/1746507/authoritative-position-of-duplicate-http-get-query-keys"">Authoritative position of duplicate HTTP GET query keys</a>.</p>
<p>NOTE: The function is case-sensitive. If you prefer case-insensitive parameter name, <a href=""https://stackoverflow.com/questions/3939715/case-insensitive-regex-in-javascript"">add 'i' modifier to RegExp</a></p>
<hr />
<p>This is an update based on the new <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams"" rel=""noreferrer"">URLSearchParams specs</a> to achieve the same result more succinctly. See answer titled &quot;<a href=""https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript/901144#12151322"">URLSearchParams</a>&quot; below.</p>
"
"951057","706","<p>In JavaScript, I rewrite every function so that it can end as soon as possible. You want the browser back in control so it can make your DOM changes.</p>

<p>Every time I've wanted a sleep in the middle of my function, I refactored to use a <code>setTimeout()</code>.</p>

<h2>Edit</h2>

<p>The infamous sleep, or delay, function within any language is much debated.  Some will say that there should always be a signal or callback to fire a given functionality, others will argue that sometimes an arbitrary moment of delay is useful.  I say that to each their own and one rule can never dictate anything in this industry.</p>

<p>Writing a sleep function is simple and made even more usable with JavaScript Promises:</p>

<pre><code>// sleep time expects milliseconds
function sleep (time) {
  return new Promise((resolve) =&gt; setTimeout(resolve, time));
}

// Usage!
sleep(500).then(() =&gt; {
    // Do something after the sleep!
});
</code></pre>
"
"2122234","52","<p>I just wrote this JavaScript code (using <a href=""http://en.wikipedia.org/wiki/Prototype_JavaScript_Framework"" rel=""noreferrer"">Prototype</a> for <a href=""http://en.wikipedia.org/wiki/Document_Object_Model"" rel=""noreferrer"">DOM</a> manipulation):</p>

<pre><code>var require = (function() {
    var _required = {};
    return (function(url, callback) {
        if (typeof url == 'object') {
            // We've (hopefully) got an array: time to chain!
            if (url.length &gt; 1) {
                // Load the nth file as soon as everything up to the
                // n-1th one is done.
                require(url.slice(0, url.length - 1), function() {
                    require(url[url.length - 1], callback);
                });
            } else if (url.length == 1) {
                require(url[0], callback);
            }
            return;
        }
        if (typeof _required[url] == 'undefined') {
            // Haven't loaded this URL yet; gogogo!
            _required[url] = [];

            var script = new Element('script', {
                src: url,
                type: 'text/javascript'
            });
            script.observe('load', function() {
                console.log(""script "" + url + "" loaded."");
                _required[url].each(function(cb) {
                    cb.call(); // TODO: does this execute in the right context?
                });
                _required[url] = true;
            });

            $$('head')[0].insert(script);
        } else if (typeof _required[url] == 'boolean') {
            // We already loaded the thing, so go ahead.
            if (callback) {
                callback.call();
            }
            return;
        }

        if (callback) {
            _required[url].push(callback);
        }
    });
})();
</code></pre>

<p>Usage:</p>

<pre><code>&lt;script src=""prototype.js""&gt;&lt;/script&gt;
&lt;script src=""require.js""&gt;&lt;/script&gt;
&lt;script&gt;
    require(['foo.js','bar.js'], function () {
        /* Use foo.js and bar.js here */
    });
&lt;/script&gt;
</code></pre>

<p>Gist: <a href=""http://gist.github.com/284442"" rel=""noreferrer"">http://gist.github.com/284442</a>.</p>
"
"951064","23","<p>First:</p>

<p>Define a function you want to execute like this:</p>

<pre><code>function alertWorld(){
  alert(""Hello World"");
}
</code></pre>

<p>Then schedule its execution with the setTimeout method:</p>

<pre><code>setTimeout(alertWorld,1000)
</code></pre>

<p>Note two things</p>

<ul>
<li>the second argument is time in miliseconds</li>
<li>as a first argument you have to pass just the name (reference) of the function, without the parenthesis</li>
</ul>
"
"951072","2","<p>This is really not a good idea, doing something like this would cause the entire page to freeze up while the system waited for your function to return.</p>
"
"503178","309","<p>It would help if you were a little more descriptive in what you are trying to do.  If you are trying to generate paged data, there are some options in how you do this.  You can generate separate links for each page that you want to be able to get directly to.</p>

<pre><code>&lt;a href='/path-to-page?page=1' class='pager-link'&gt;1&lt;/a&gt;
&lt;a href='/path-to-page?page=2' class='pager-link'&gt;2&lt;/a&gt;
&lt;span class='pager-link current-page'&gt;3&lt;/a&gt;
...
</code></pre>

<p>Note that the current page in the example is handled differently in the code and with CSS.</p>

<p>If you want the paged data to be changed via AJAX, this is where jQuery would come in.  What you would do is add a click handler to each of the anchor tags corresponding to a different page.  This click handler would invoke some jQuery code that goes and fetches the next page via AJAX and updates the table with the new data.  The example below assumes that you have a web service that returns the new page data.</p>

<pre><code>$(document).ready( function() {
    $('a.pager-link').click( function() {
        var page = $(this).attr('href').split(/\?/)[1];
        $.ajax({
            type: 'POST',
            url: '/path-to-service',
            data: page,
            success: function(content) {
               $('#myTable').html(content);  // replace
            }
        });
        return false; // to stop link
    });
});
</code></pre>
"
"951111","184","<p>I agree with the other posters, a busy sleep is just a bad idea.</p>

<p>However, setTimeout does not hold up execution, it executes the next line of the function immediately after the timeout is SET, not after the timeout expires, so that does not accomplish the same task that a sleep would accomplish.</p>

<p>The way to do it is to breakdown your function in to before and after parts. </p>

<pre><code>function doStuff()
{
  //do some things
  setTimeout(continueExecution, 10000) //wait ten seconds before continuing
}

function continueExecution()
{
   //finish doing things after the pause
}
</code></pre>

<p>Make sure your function names still accurately describe what each piece is doing (I.E. GatherInputThenWait and CheckInput, rather than funcPart1 and funcPart2)</p>

<p><strong>Edit</strong> </p>

<p>This method achieves the purpose of not executing the lines of code you decide until AFTER your timeout, while still returning control back to the client PC to execute whatever else it has queued up.</p>

<p><strong>Further Edit</strong></p>

<p>As pointed out in the comments this will absolutely NOT WORK in a loop. You could do some fancy (ugly) hacking to make it work in a loop, but in general that will just make for disastrous spaghetti code.</p>
"
"977487","72","<p>If you're using jQuery, someone actually created a ""delay"" plugin that's nothing more than a wrapper for setTimeout:</p>

<pre><code>// Delay Plugin for jQuery
// - http://www.evanbot.com
// - © 2008 Evan Byrne

jQuery.fn.delay = function(time,func){
    this.each(function(){
        setTimeout(func,time);
    });

    return this;
};
</code></pre>

<p>You can then just use it in a row of function calls as expected:</p>

<pre><code>$('#warning')
.addClass('highlight')
.delay(1000)
.removeClass('highlight');
</code></pre>
"
"5767332","189","<pre class=""lang-js prettyprint-override""><code>Array.prototype.remove_by_value = function(val) {
 for (var i = 0; i &lt; this.length; i++) {
  if (this[i] === val) {
   this.splice(i, 1);
   i--;
  }
 }
 return this;
}[
 // call like
 (1, 2, 3, 4)
].remove_by_value(3);
</code></pre>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>Array.prototype.remove_by_value = function(val) {
  for (var i = 0; i &lt; this.length; i++) {
    if (this[i] === val) {
      this.splice(i, 1);
      i--;
    }
  }
  return this;
}

var rooms = ['hello', 'something']

rooms = rooms.remove_by_value('hello')

console.log(rooms)</code></pre>
</div>
</div>
</p>
"
"13812954","38","<p>You can add this to your JavaScript file to allow your arrays to be ""cleared"":</p>

<pre><code>Array.prototype.clear = function() {
    this.splice(0, this.length);
};
</code></pre>

<p>Then you can use it like this:</p>

<pre><code>var list = [1, 2, 3];
list.clear();
</code></pre>

<p>Or if you want to be sure you don't destroy something:</p>

<pre><code>if (!Array.prototype.clear) {
    Array.prototype.clear = function() {
       this.splice(0, this.length);
    };
}
</code></pre>

<p>Lots of people think you shouldn't modify native objects (like Array), and I'm inclined to agree. Please use caution in deciding how to handle this.</p>
"
"15033498","17","<pre><code>Array.prototype.clear = function() {
    this.length = 0;
};
</code></pre>

<p>And call it: <code>array.clear();</code></p>
"
"1705601","9","<p>I have searched/googled quite a few webpages on javascript sleep/wait... and there is NO answer if you want javascript to ""RUN, DELAY, RUN""... what most people got was either, ""RUN, RUN(useless stuff), RUN"" or ""RUN, RUN + delayed RUN""....</p>

<p>So I ate some burgers and got thinking:::
here is a solution that works... but you have to chop up your running codes...:::
yes, I know, this is just an easier to read refactoring... still...</p>

<p>//.........................................
//example1:</p>

<pre><code>&lt;html&gt;
&lt;body&gt;
&lt;div id=""id1""&gt;DISPLAY&lt;/div&gt;

&lt;script&gt;
//javascript sleep by ""therealdealsince1982""; copyrighted 2009
//setInterval
var i = 0;

function run() {
    //pieces of codes to run
    if (i==0){document.getElementById(""id1"").innerHTML= ""&lt;p&gt;code segment ""+ i +"" is ran&lt;/p&gt;""; }
    if (i==1){document.getElementById(""id1"").innerHTML= ""&lt;p&gt;code segment ""+ i +"" is ran&lt;/p&gt;""; }
    if (i==2){document.getElementById(""id1"").innerHTML= ""&lt;p&gt;code segment ""+ i +"" is ran&lt;/p&gt;""; }
    if (i &gt;2){document.getElementById(""id1"").innerHTML= ""&lt;p&gt;code segment ""+ i +"" is ran&lt;/p&gt;""; }
    if (i==5){document.getElementById(""id1"").innerHTML= ""&lt;p&gt;all code segment finished running&lt;/p&gt;""; clearInterval(t); } //end interval, stops run
    i++; //segment of code finished running, next...
}

run();
t=setInterval(""run()"",1000);

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>//....................................
//example2:</p>

<pre><code>&lt;html&gt;
&lt;body&gt;
&lt;div id=""id1""&gt;DISPLAY&lt;/div&gt;

&lt;script&gt;
//javascript sleep by ""therealdealsince1982""; copyrighted 2009
//setTimeout
var i = 0;

function run() {
    //pieces of codes to run, can use switch statement
    if (i==0){document.getElementById(""id1"").innerHTML= ""&lt;p&gt;code segment ""+ i +"" ran&lt;/p&gt;""; sleep(1000);}
    if (i==1){document.getElementById(""id1"").innerHTML= ""&lt;p&gt;code segment ""+ i +"" ran&lt;/p&gt;""; sleep(2000);}
    if (i==2){document.getElementById(""id1"").innerHTML= ""&lt;p&gt;code segment ""+ i +"" ran&lt;/p&gt;""; sleep(3000);}
    if (i==3){document.getElementById(""id1"").innerHTML= ""&lt;p&gt;code segment ""+ i +"" ran&lt;/p&gt;"";} //stops automatically
    i++;
}

function sleep(dur) {t=setTimeout(""run()"",dur);} //starts flow control again after dur

run(); //starts
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>//.................
example3:</p>

<pre><code>&lt;html&gt;
&lt;body&gt;
&lt;div id=""id1""&gt;DISPLAY&lt;/div&gt;

&lt;script&gt;
//javascript sleep by ""therealdealsince1982""; copyrighted 2009
//setTimeout
var i = 0;

function flow() {
    run(i);
    i++; //code segment finished running, increment i; can put elsewhere
    sleep(1000);
    if (i==5) {clearTimeout(t);} //stops flow, must be after sleep()
}

function run(segment) {
    //pieces of codes to run, can use switch statement
    if (segment==0){document.getElementById(""id1"").innerHTML= ""&lt;p&gt;code segment ""+ segment +"" is ran&lt;/p&gt;""; }
    if (segment==1){document.getElementById(""id1"").innerHTML= ""&lt;p&gt;code segment ""+ segment +"" is ran&lt;/p&gt;""; }
    if (segment==2){document.getElementById(""id1"").innerHTML= ""&lt;p&gt;code segment ""+ segment +"" is ran&lt;/p&gt;""; }
    if (segment &gt;2){document.getElementById(""id1"").innerHTML= ""&lt;p&gt;code segment ""+ segment +"" is ran&lt;/p&gt;""; }
}

function sleep(dur) {t=setTimeout(""flow()"",dur);} //starts flow control again after dur

flow(); //starts flow
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>//..............
example4:</p>

<pre><code>&lt;html&gt;
&lt;body&gt;
&lt;div id=""id1""&gt;DISPLAY&lt;/div&gt;

&lt;script&gt;
//javascript sleep by ""therealdealsince1982""; copyrighted 2009
//setTimeout, switch
var i = 0;

function flow() {
    switch(i)
    {
        case 0:
            run(i);
            sleep(1000);
            break;
        case 1:
            run(i);
            sleep(2000);
            break;
        case 5:
            run(i);
            clearTimeout(t); //stops flow
            break;
        default:
            run(i);
            sleep(3000);
            break;
    }
}

function run(segment) {
    //pieces of codes to run, can use switch statement
    if (segment==0){document.getElementById(""id1"").innerHTML= ""&lt;p&gt;code segment ""+ segment +"" is ran&lt;/p&gt;""; }
    if (segment==1){document.getElementById(""id1"").innerHTML= ""&lt;p&gt;code segment ""+ segment +"" is ran&lt;/p&gt;""; }
    if (segment==2){document.getElementById(""id1"").innerHTML= ""&lt;p&gt;code segment ""+ segment +"" is ran&lt;/p&gt;""; }
    if (segment &gt;2){document.getElementById(""id1"").innerHTML= ""&lt;p&gt;code segment ""+ segment +"" is ran&lt;/p&gt;""; }
    i++; //current segment of code finished running, next...
}

function sleep(dur) {t=setTimeout(""flow()"",dur);} //starts flow control again after dur

flow(); //starts flow control for first time...
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
"
"2924340","6","<p>For the specific case of wanting to space out a set of calls being executed by a loop, you can use something like the code below with prototype. Without prototype, you can substitute the delay function with setTimeout.</p>

<pre><code>function itemHandler(item)
{
    alert(item);
}

var itemSet = ['a','b','c'];

// Each call to itemHandler will execute
// 1 second apart
for(var i=0; i&lt;itemSet.length; i++)
{
    var secondsUntilExecution = i;
    itemHandler.delay(secondsUntilExecution, item)
}
</code></pre>
"
"5767357","13869","<p>Find the <code>index</code> of the array element you want to remove using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf"" rel=""noreferrer""><code>indexOf</code></a>, and then remove that index with <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"" rel=""noreferrer""><code>splice</code></a>.</p>
<blockquote>
<p>The splice() method changes the contents of an array by removing
existing elements and/or adding new elements.</p>
</blockquote>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const array = [2, 5, 9];

console.log(array);

const index = array.indexOf(5);
if (index &gt; -1) {
  array.splice(index, 1);
}

// array = [2, 9]
console.log(array); </code></pre>
</div>
</div>
</p>
<p>The second parameter of <code>splice</code> is the number of elements to remove. Note that <code>splice</code> modifies the array in place and returns a new array containing the elements that have been removed.</p>
<hr />
<p>For the reason of completeness, here are functions. The first function removes only a single occurrence (i.e. removing the first match of <code>5</code> from <code>[2,5,9,1,5,8,5]</code>), while the second function removes all occurrences:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function removeItemOnce(arr, value) {
  var index = arr.indexOf(value);
  if (index &gt; -1) {
    arr.splice(index, 1);
  }
  return arr;
}

function removeItemAll(arr, value) {
  var i = 0;
  while (i &lt; arr.length) {
    if (arr[i] === value) {
      arr.splice(i, 1);
    } else {
      ++i;
    }
  }
  return arr;
}
// Usage
console.log(removeItemOnce([2,5,9,1,5,8,5], 5))
console.log(removeItemAll([2,5,9,1,5,8,5], 5))</code></pre>
</div>
</div>
</p>
<p>In TypeScript, these functions can stay type-safe with a type parameter:</p>
<pre class=""lang-js prettyprint-override""><code>function removeItem&lt;T&gt;(arr: Array&lt;T&gt;, value: T): Array&lt;T&gt; { 
  const index = arr.indexOf(value);
  if (index &gt; -1) {
    arr.splice(index, 1);
  }
  return arr;
}
</code></pre>
"
"3215653","69","<p>I use:</p>

<pre class=""lang-js prettyprint-override""><code>function empty(e) {
  switch (e) {
    case """":
    case 0:
    case ""0"":
    case null:
    case false:
    case typeof(e) == ""undefined"":
      return true;
    default:
      return false;
  }
}

empty(null) // true
empty(0) // true
empty(7) // false
empty("""") // true
empty((function() {
    return """"
})) // false
</code></pre>
"
"3261380","1266","<p>For checking if a string is empty, null or undefined I use:</p>
<pre><code>function isEmpty(str) {
    return (!str || str.length === 0 );
}
</code></pre>
<p>For checking if a string is blank, null or undefined I use:</p>
<pre><code>function isBlank(str) {
    return (!str || /^\s*$/.test(str));
}
</code></pre>
<p>For checking if a string is blank or contains only white-space:</p>
<pre><code>String.prototype.isEmpty = function() {
    return (this.length === 0 || !this.trim());
};
</code></pre>
"
"3425761","4","<pre><code>function tell()
{
    var pass = document.getElementById('pasword').value;
    var plen = pass.length;

    // Now you can check if your string is empty as like
    if(plen==0)
    {
        alert('empty');
    }
    else
    {
        alert('you entered something');
    }
}

&lt;input type='text' id='pasword' /&gt;
</code></pre>

<p>This is also a generic way to check if field is empty.</p>
"
"3962768","7","<p>One scenario where you might want a sleep() function rather than using setTimeout() is if you have a function responding to a user click that will ultimately end up opening a new i.e. popup window and you have initiated some processing that requires a short period to complete before the popup is displayed. Moving the open window into a closure means that it typically gets blocked by the browser.</p>
"
"5487027","410","<p>All the previous answers are good, but this will be even better. Use dual NOT operators (<code>!!</code>):</p>
<pre class=""lang-js prettyprint-override""><code>if (!!str) {
    // Some code here
}
</code></pre>
<p>Or use type casting:</p>
<pre class=""lang-js prettyprint-override""><code>if (Boolean(str)) {
    // Code here
}
</code></pre>
<p>Both do the same function. Typecast the variable to Boolean, where <code>str</code> is a variable.<br />
It returns <code>false</code> for <code>null</code>, <code>undefined</code>, <code>0</code>, <code>000</code>, <code>&quot;&quot;</code>, <code>false</code>.<br />
It returns <code>true</code> for string <code>&quot;0&quot;</code> and whitespace <code>&quot; &quot;</code>.</p>
"
"5992511","854","<p>(See the <a href=""https://stackoverflow.com/a/39914235/11236"">updated answer for 2016</a>)</p>

<p>I think it's perfectly reasonable to want to perform an action, wait, then perform another action. If you are used to writing in multi-threaded languages, you probably have the idea of yielding execution for a set amount of time until your thread wakes up.</p>

<p>The issue here is that JavaScript is a single-thread event-based model. While in a specific case, it might be nice to have the whole engine wait for a few seconds, in general it is bad practice. Suppose I wanted to make use of your functions while writing my own? When I called your method, my methods would all freeze up. If JavaScript could somehow preserve your function's execution context, store it somewhere, then bring it back and continue later, then sleep could happen, but that would basically be threading.</p>

<p>So you are pretty much stuck with what others have suggested -- you'll need to break your code up into multiple functions.</p>

<p>Your question is a bit of a false choice, then. There is no way to sleep in the way you want, nor should you pursue the solution you suggest.</p>
"
"6203869","7","<p>I use a combination, and the fastest checks are first.</p>

<pre><code>function isBlank(pString) {
    if (!pString || pString.length == 0) {
        return true;
    }
    // Checks for a non-white space character
    // which I think [citation needed] is faster
    // than removing all the whitespace and checking
    // against an empty string
    return !/[^\s]+/.test(pString);
}
</code></pre>
"
"901727","3560","<blockquote>
  <p>How do I successfully query the checked property?</p>
</blockquote>

<p>The <code>checked</code> property of a checkbox DOM element will give you the <code>checked</code> state of the element.</p>

<p>Given your existing code, you could therefore do this:</p>

<pre><code>if(document.getElementById('isAgeSelected').checked) {
    $(""#txtAge"").show();
} else {
    $(""#txtAge"").hide();
}
</code></pre>

<p>However, there's a much prettier way to do this, using <a href=""http://api.jquery.com/toggle/"" rel=""noreferrer""><code>toggle</code></a>:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$('#isAgeSelected').click(function() {
    $(""#txtAge"").toggle(this.checked);
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;input type=""checkbox"" id=""isAgeSelected""/&gt;
&lt;div id=""txtAge"" style=""display:none""&gt;Age is something&lt;/div&gt;</code></pre>
</div>
</div>
</p>
"
"17306971","309","<p><s>Here the fastest working implementation</s> while <strong>keeping the same array</strong> (&quot;mutable&quot;):</p>
<pre><code>function clearArray(array) {
  while (array.length) {
    array.pop();
  }
}
</code></pre>
<p>FYI it cannot be simplified to <code>while (array.pop())</code>: the tests will fail.</p>
<p>FYI <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear"" rel=""nofollow noreferrer"">Map</a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear"" rel=""nofollow noreferrer"">Set</a> define <code>clear()</code>, it would have seem logical to have <code>clear()</code> for <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"" rel=""nofollow noreferrer"">Array</a> too.</p>
<p>TypeScript version:</p>
<pre><code>function clearArray&lt;T&gt;(array: T[]) {
  while (array.length) {
    array.pop();
  }
}
</code></pre>
<p>The corresponding tests:</p>
<pre><code>describe('clearArray()', () =&gt; {
  test('clear regular array', () =&gt; {
    const array = [1, 2, 3, 4, 5];
    clearArray(array);
    expect(array.length).toEqual(0);
    expect(array[0]).toEqual(undefined);
    expect(array[4]).toEqual(undefined);
  });

  test('clear array that contains undefined and null', () =&gt; {
    const array = [1, undefined, 3, null, 5];
    clearArray(array);
    expect(array.length).toEqual(0);
    expect(array[0]).toEqual(undefined);
    expect(array[4]).toEqual(undefined);
  });
});
</code></pre>
<p>Here the updated jsPerf: <s>http://jsperf.com/array-destroy/32</s> <s>http://jsperf.com/array-destroy/152</s></p>
<p>jsPerf offline. Similar benchmark: <a href=""https://jsben.ch/hyj65"" rel=""nofollow noreferrer"">https://jsben.ch/hyj65</a></p>
"
"6429593","8","<p>I can understand the purpose of a sleep function if you have to deal with synchronous execution. The setInterval and setTimeout functions create a parallel execution thread which returns the execution sequence back to the main program, which is ineffective if you have to wait for a given result. Of course one may use events and handlers, but in some cases is not what is intended.</p>
"
"6982592","19","<p>Better solution to make things look like what most people want is to use an anonymous function:</p>

<pre><code>alert('start');
var a = 'foo';
//lots of code
setTimeout(function(){  //Beginning of code that should run AFTER the timeout
    alert(a);
    //lots more code
},5000);  // put the timeout here
</code></pre>

<p>This is probably the closest you'll get to something that simply does what you want.</p>

<p>Note, if you need multiple sleeps this can get ugly in a hurry and you might actually need to rethink your design.</p>
"
"5821038","218","<p>There actually <em>is</em> a way to load a JavaScript file <em>not</em> asynchronously, so you could use the functions included in your newly loaded file right after loading it, and I think it works in all browsers.</p>
<p>You need to use <code>jQuery.append()</code> on the <code>&lt;head&gt;</code> element of your page, that is:</p>
<pre><code>$(&quot;head&quot;).append($(&quot;&lt;script&gt;&lt;/script&gt;&quot;).attr(&quot;src&quot;, url));

/* Note that following line of code is incorrect because it doesn't escape the
 * HTML attribute src correctly and will fail if `url` contains special characters:
 * $(&quot;head&quot;).append('&lt;script src=&quot;' + url + '&quot;&gt;&lt;/script&gt;');
 */
</code></pre>
<p>However, this method also has a problem: if an error happens in the imported JavaScript file, <a href=""http://en.wikipedia.org/wiki/Firebug_%28software%29"" rel=""nofollow noreferrer"">Firebug</a> (and also Firefox Error Console and <a href=""https://developers.google.com/chrome-developer-tools/"" rel=""nofollow noreferrer"">Chrome Developer Tools</a> as well) will report its place incorrectly, which is a big problem if you use Firebug to track JavaScript errors down a lot (I do). Firebug simply doesn't know about the newly loaded file for some reason, so if an error occurs in that file, it reports that it occurred in your main <a href=""http://en.wikipedia.org/wiki/HTML"" rel=""nofollow noreferrer"">HTML</a> file, and you will have trouble finding out the real reason for the error.</p>
<p>But if that is not a problem for you, then this method should work.</p>
<p>I have actually written a jQuery plugin called <em>$.import_js()</em> which uses this method:</p>
<pre><code>(function($)
{
    /*
     * $.import_js() helper (for JavaScript importing within JavaScript code).
     */
    var import_js_imported = [];
    
    $.extend(true,
    {
        import_js : function(script)
        {
            var found = false;
            for (var i = 0; i &lt; import_js_imported.length; i++)
                if (import_js_imported[i] == script) {
                    found = true;
                    break;
                }
            
            if (found == false) {
                $(&quot;head&quot;).append($('&lt;script&gt;&lt;/script').attr('src', script));
                import_js_imported.push(script);
            }
        }
    });
    
})(jQuery);
</code></pre>
<p>So all you would need to do to import JavaScript is:</p>
<pre><code>$.import_js('/path_to_project/scripts/somefunctions.js');
</code></pre>
<p>I also made a simple test for this at <a href=""http://www.kipras.com/dev/import_js_test/"" rel=""nofollow noreferrer"">Example</a>.</p>
<p>It includes a <code>main.js</code> file in the main HTML and then the script in <code>main.js</code> uses <code>$.import_js()</code> to import an additional file called <code>included.js</code>, which defines this function:</p>
<pre><code>function hello()
{
    alert(&quot;Hello world!&quot;);
}
</code></pre>
<p>And right after including <code>included.js</code>, the <code>hello()</code> function is called, and you get the alert.</p>
<p>(This answer is in response to e-satis' comment).</p>
"
"6993636","4","<p>First of all - setTimeout and setInterval is what <strong>should</strong> be used, because of javascript's callback-ish nature. If you want to use <code>sleep()</code> it's the control flow or the architecture of your code that is incorrect.</p>

<p>Having said that I suppose I still can help with two implementation of a sleep.</p>

<ol>
<li><p>faking synchronous run off the top of my head:</p>

<pre><code>//a module to do taht //dual-license: MIT or WTF [you can use it anyhow and leave my nickname in a comment if you want to]
var _=(function(){
 var queue=[];
 var play=function(){
   var go=queue.shift();
     if(go){if(go.a){go.f();play();}else{setTimeout(play,go.t);}}
   }
 return {
   go:function(f){
    queue.push({a:1,f:f});
    },
   sleep:function(t){
    queue.push({a:0,t:t});
    },
   playback:play 
 }
})();
</code></pre>

<p>[making playback automatic should also be possible]</p>

<pre><code>//usage

_.go(function(){

//your code
console.log('first');

});


_.sleep(5000);

_.go(function(){

//your code
console.log('next');

});

//this triggers the simulation
_.playback();
</code></pre></li>
<li><p>real synchronous run</p></li>
</ol>

<p>I gave it a lot of thought one day and the only idea I had for a true sleep in javascript is technical.</p>

<p>a sleep function would have to be a <strong>synchronous</strong> AJAX call with a timeout set to the sleep value. That's all and an only way to have a real <code>sleep()</code></p>
"
"7560525","1","<p>If you want to sleep an anonymous function like one you've created as a handler, I recommend the following:</p>

<pre><code>function()
{
if (!wait_condition)
    {
    setTimeout(arguments.callee, 100, /*comma-separated arguments here*/);
    }
//rest of function
}
</code></pre>

<p>This code says ""If the wait condition has not yet been satisfied, call this function again with these arguments."" I've used this method to pass in the same arguments to my handlers, effectively making this code a non-polling sleep() (which only works at the start of your function).</p>
"
"7352694","168","<p>Another way, that in my opinion is much cleaner, is to make a synchronous Ajax request instead of using a <code>&lt;script&gt;</code> tag. Which is also how <a href=""http://en.wikipedia.org/wiki/Node.js"">Node.js</a> handles includes.</p>

<p>Here's an example using jQuery:</p>

<pre><code>function require(script) {
    $.ajax({
        url: script,
        dataType: ""script"",
        async: false,           // &lt;-- This is the key
        success: function () {
            // all good...
        },
        error: function () {
            throw new Error(""Could not load script "" + script);
        }
    });
}
</code></pre>

<p>You can then use it in your code as you'd usually use an include:</p>

<pre><code>require(""/scripts/subscript.js"");
</code></pre>

<p>And be able to call a function from the required script in the next line:</p>

<pre><code>subscript.doSomethingCool(); 
</code></pre>
"
"7924558","6","<p>My implementation, very self explanatory</p>

<pre><code>function replaceAll(string, token, newtoken) {
    if(token!=newtoken)
    while(string.indexOf(token) &gt; -1) {
        string = string.replace(token, newtoken);
    }
    return string;
}
</code></pre>
"
"8367104","4","<p>Code taken from this <a href=""http://www.daniweb.com/web-development/javascript-dhtml-ajax/threads/47199"" rel=""nofollow noreferrer"">link</a> will not freeze comp. But it works only on ff.</p>

<pre><code>/**
 * Netscape compatible WaitForDelay function.
 * You can use it as an alternative to Thread.Sleep() in any major programming language
 * that support it while JavaScript it self doesn't have any built-in function to do such a thing.
 * parameters:
 * (Number) delay in millisecond
 */
function nsWaitForDelay(delay) {
    /**
     * Just uncomment this code if you're building an extention for Firefox.
     * Since FF3, we'll have to ask for user permission to execute XPCOM objects.
     */
    netscape.security.PrivilegeManager.enablePrivilege(""UniversalXPConnect"");

    // Get the current thread.
    var thread = Components.classes[""@mozilla.org/thread-manager;1""].getService(Components.interfaces.nsIThreadManager).currentThread;

    // Create an inner property to be used later as a notifier.
    this.delayed = true;

    /* Call JavaScript setTimeout function
      * to execute this.delayed = false
      * after it finish.
      */
    setTimeout(""this.delayed = false;"", delay);

    /**
     * Keep looping until this.delayed = false
     */
    while (this.delayed) {
        /**
         * This code will not freeze your browser as it's documented in here:
         * https://developer.mozilla.org/en/Code_snippets/Threads#Waiting_for_a_background_task_to_complete
         */
        thread.processNextEvent(true);
    }
}
</code></pre>
"
"9269243","1","<p>A method of an object that needs to use a ""sleep"" method such as the following:</p>

<pre><code>function SomeObject() {
    this.SomeProperty = ""xxx"";
    return this;
}
SomeObject.prototype.SomeMethod = function () {
    this.DoSomething1(arg1);
    sleep(500);
    this.DoSomething2(arg1);
}
</code></pre>

<p>Can almost be translated to:</p>

<pre><code>function SomeObject() {
    this.SomeProperty = ""xxx"";
    return this;
}
SomeObject.prototype.SomeMethod = function (arg1) {
    var self = this;
    self.DoSomething1(arg1);
    setTimeout(function () {
        self.DoSomething2(arg1);
    }, 500);
}
</code></pre>

<p>The difference is that the operation of ""SomeMethod"" returns before the operation ""DoSomething2"" is executed. The caller of ""SomeMethod"" cannot depend on this. Since the ""Sleep"" method does not exists, I use the later method and design my code accordingly.</p>

<p>I hope this helps.</p>
"
"8337001","11","<p>I came to this question because I was looking for a simple way to maintain a collection of useful JavaScript plugins. After seeing some of the solutions here, I came up with this:</p>

<ol>
<li><p>Set up a file called ""plugins.js"" (or extensions.js or whatever you want). Keep your plugin files together with that one master file.</p></li>
<li><p>plugins.js will have an array called <code>pluginNames[]</code> that we will iterate over <code>each()</code>,
then append a <code>&lt;script&gt;</code> tag to the head for each plugin</p></li>
</ol>

<pre class=""lang-js prettyprint-override""><code>//set array to be updated when we add or remove plugin files
var pluginNames = [""lettering"", ""fittext"", ""butterjam"", etc.];

//one script tag for each plugin
$.each(pluginNames, function(){
    $('head').append('&lt;script src=""js/plugins/' + this + '.js""&gt;&lt;/script&gt;');
});
</code></pre>

<ol start=""3"">
<li>Manually call just the one file in your head:<br>
<code>&lt;script src=""js/plugins/plugins.js""&gt;&lt;/script&gt;</code></li>
</ol>

<p>BUT:</p>

<p>Even though all of the plugins get dropped into the head tag the way they ought to, they don't always get run by the browser when you click into the page or refresh.</p>

<p>I've found it's more reliable to just write the script tags in a PHP include. You only have to write it once and that's just as much work as calling the plugin using JavaScript.</p>
"
"8933531","10","<p>I have created a function that will allow you to use similar verbiage to C#/Java to include a JavaScript file. I've tested it a little bit even from inside of <em>another</em> JavaScript file and it seems to work. It does require jQuery though for a bit of ""magic"" at the end.</p>

<p>I put this code in a file at the root of my script directory (I named it <code>global.js</code>, but you can use whatever you want. Unless I'm mistaken this and jQuery should be the only required scripts on a given page. Keep in mind this is largely untested beyond some basic usage, so there may or may not be any issues with the way I've done it; use at your own risk yadda yadda I am not responsible if you screw anything up yadda yadda:</p>

<pre><code>/**
* @fileoverview This file stores global functions that are required by other libraries.
*/

if (typeof(jQuery) === 'undefined') {
    throw 'jQuery is required.';
}

/** Defines the base script directory that all .js files are assumed to be organized under. */
var BASE_DIR = 'js/';

/**
* Loads the specified file, outputting it to the &lt;head&gt; HTMLElement.
*
* This method mimics the use of using in C# or import in Java, allowing
* JavaScript files to ""load"" other JavaScript files that they depend on
* using a familiar syntax.
*
* This method assumes all scripts are under a directory at the root and will
* append the .js file extension automatically.
*
* @param {string} file A file path to load using C#/Java ""dot"" syntax.
*
* Example Usage:
* imports('core.utils.extensions');
* This will output: &lt;script type=""text/javascript"" src=""/js/core/utils/extensions.js""&gt;&lt;/script&gt;
*/
function imports(file) {
    var fileName = file.substr(file.lastIndexOf('.') + 1, file.length);

    // Convert PascalCase name to underscore_separated_name
    var regex = new RegExp(/([A-Z])/g);
    if (regex.test(fileName)) {
        var separated = fileName.replace(regex, "",$1"").replace(',', '');
        fileName = separated.replace(/[,]/g, '_');
    }

    // Remove the original JavaScript file name to replace with underscore version
    file = file.substr(0, file.lastIndexOf('.'));

    // Convert the dot syntax to directory syntax to actually load the file
    if (file.indexOf('.') &gt; 0) {
        file = file.replace(/[.]/g, '/');
    }

    var src = BASE_DIR + file + '/' + fileName.toLowerCase() + '.js';
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = src;

    $('head').find('script:last').append(script);
}
</code></pre>
"
"20532013","15","<p>In case you are interested in the memory allocation, you may compare each approach using something like <a href=""http://jsfiddle.net/k9KGU/"">this jsfiddle</a> in conjunction with chrome dev tools' timeline tab. You will want to use the trash bin icon at the bottom to force a garbage collection after 'clearing' the array. This should give you a more definite answer for the browser of your choice. A lot of answers here are old and I wouldn't rely on them but rather test as in @tanguy_k's answer above.</p>

<p><em>(for an intro to the aforementioned tab you can check out <a href=""http://addyosmani.com/blog/taming-the-unicorn-easing-javascript-memory-profiling-in-devtools/"">here</a>)</em></p>

<p>Stackoverflow forces me to copy the jsfiddle so here it is:</p>

<pre><code>&lt;html&gt;
&lt;script&gt;
var size = 1000*100
window.onload = function() {
  document.getElementById(""quantifier"").value = size
}

function scaffold()
{
  console.log(""processing Scaffold..."");
  a = new Array
}
function start()
{
  size = document.getElementById(""quantifier"").value
  console.log(""Starting... quantifier is "" + size);
  console.log(""starting test"")
  for (i=0; i&lt;size; i++){
    a[i]=""something""
  }
  console.log(""done..."")
}

function tearDown()
{
  console.log(""processing teardown"");
  a.length=0
}

&lt;/script&gt;
&lt;body&gt;
    &lt;span style=""color:green;""&gt;Quantifier:&lt;/span&gt;
    &lt;input id=""quantifier"" style=""color:green;"" type=""text""&gt;&lt;/input&gt;
    &lt;button onclick=""scaffold()""&gt;Scaffold&lt;/button&gt;
    &lt;button onclick=""start()""&gt;Start&lt;/button&gt;
    &lt;button onclick=""tearDown()""&gt;Clean&lt;/button&gt;
    &lt;br/&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>And you should take note that it may depend on the type of the array elements, as javascript manages strings differently than other primitive types, not to mention arrays of objects. The type may affect what happens.</p>
"
"11741988","11","<p>I have not noticed an answer that takes into account the possibility of null characters in a string. For example, if we have a null character string:</p>

<pre><code>var y = ""\0""; // an empty string, but has a null character
(y === """") // false, testing against an empty string does not work
(y.length === 0) // false
(y) // true, this is also not expected
(y.match(/^[\s]*$/)) // false, again not wanted
</code></pre>

<p>To test its nullness one could do something like this:</p>

<pre><code>String.prototype.isNull = function(){ 
  return Boolean(this.match(/^[\0]*$/)); 
}
...
""\0"".isNull() // true
</code></pre>

<p>It works on a null string, and on an empty string and it is accessible for all strings. In addition, it could be expanded to contain other JavaScript empty or whitespace characters (i.e. nonbreaking space, byte order mark, line/paragraph separator, etc.).</p>
"
"3826423","417","<p>Some quick benchmarking (each test = 500k appended elements and the results are averages of multiple runs) showed the following:</p>

<p>Firefox 3.6 (Mac):</p>

<ul>
<li>Small arrays: <strong><code>arr[arr.length] = b</code> is faster</strong> (300ms vs. 800ms)</li>
<li>Large arrays: <strong><code>arr.push(b)</code> is faster</strong> (500ms vs. 900ms)</li>
</ul>

<p>Safari 5.0 (Mac):</p>

<ul>
<li>Small arrays: <strong><code>arr[arr.length] = b</code> is faster</strong> (90ms vs. 115ms)</li>
<li>Large arrays: <strong><code>arr[arr.length] = b</code> is faster</strong> (160ms vs. 185ms)</li>
</ul>

<p>Google Chrome 6.0 (Mac):</p>

<ul>
<li>Small arrays: <strong>No significant difference</strong> (and Chrome is FAST! Only ~38ms !!)</li>
<li>Large arrays: <strong>No significant difference</strong> (160ms)</li>
</ul>

<p>I like the <code>arr.push()</code> syntax better, but I think I'd be better off with the <code>arr[arr.length]</code> Version, at least in raw speed. I'd love to see the results of an IE run though.</p>

<hr>

<p>My benchmarking loops:</p>

<pre><code>function arrpush_small() {
    var arr1 = [];
    for (a = 0; a &lt; 100; a++)
    {
        arr1 = [];
        for (i = 0; i &lt; 5000; i++)
        {
            arr1.push('elem' + i);
        }
    }
}

function arrlen_small() {
    var arr2 = [];
    for (b = 0; b &lt; 100; b++)
    {
        arr2 = [];
        for (j = 0; j &lt; 5000; j++)
        {
            arr2[arr2.length] = 'elem' + j;
        }
    }
}


function arrpush_large() {
    var arr1 = [];
    for (i = 0; i &lt; 500000; i++)
    {
        arr1.push('elem' + i);
    }
}

function arrlen_large() {
    var arr2 = [];
    for (j = 0; j &lt; 500000; j++)
    {
        arr2[arr2.length] = 'elem' + j;
    }
}
</code></pre>
"
"2480180","221","<p>Roshambo on snipplr.com has a simple script to achieve this described in <em><a href=""http://snipplr.com/view/26662/get-url-parameters-with-jquery--improved/"" rel=""noreferrer"">Get URL Parameters with jQuery | Improved</a></em>. With his script you also easily get to pull out just the parameters you want.</p>

<p>Here's the gist:</p>

<pre><code>$.urlParam = function(name, url) {
    if (!url) {
     url = window.location.href;
    }
    var results = new RegExp('[\\?&amp;]' + name + '=([^&amp;#]*)').exec(url);
    if (!results) { 
        return undefined;
    }
    return results[1] || undefined;
}
</code></pre>

<p>Then just get your parameters from the query string.</p>

<p>So if the URL/query string was <code>xyz.com/index.html?lang=de</code>.</p>

<p>Just call <code>var langval = $.urlParam('lang');</code>, and you've got it.</p>

<p>UZBEKJON has a great blog post on this as well, <em><a href=""http://jquery-howto.blogspot.com/2009/09/get-url-parameters-values-with-jquery.html"" rel=""noreferrer"">Get URL parameters &amp; values with jQuery</a></em>.</p>
"
"13205283","31","<p>Here you go.  As the code says, don't be a bad dev and use this on websites.  It's a development utility function.</p>

<pre><code>// Basic sleep function based on ms.
// DO NOT USE ON PUBLIC FACING WEBSITES.
function sleep(ms) {
    var unixtime_ms = new Date().getTime();
    while(new Date().getTime() &lt; unixtime_ms + ms) {}
}
</code></pre>
"
"13942574","3","<p>It's a good idea too to check that you are not trying to pass an undefined term.</p>

<pre><code>function TestMe() {
  if((typeof str != 'undefined') &amp;&amp; str) {
    alert(str);
  }
 };

TestMe();

var str = 'hello';

TestMe();
</code></pre>

<p>I usually run into the case where I want to do something when a string attribute for an object instance is not empty.  Which is fine, except that attribute is not always present.</p>
"
"3010848","4401","<p>Three main options:</p>
<ol>
<li><code>for (var i = 0; i &lt; xs.length; i++) { console.log(xs[i]); }</code></li>
<li><code>xs.forEach((x, i) =&gt; console.log(x));</code></li>
<li><code>for (const x of xs) { console.log(x); }</code></li>
</ol>
<p>Detailed examples are below.</p>
<hr />
<h1>1. Sequential <code>for</code> loop:</h1>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var myStringArray = [""Hello"",""World""];
var arrayLength = myStringArray.length;
for (var i = 0; i &lt; arrayLength; i++) {
    console.log(myStringArray[i]);
    //Do something
}</code></pre>
</div>
</div>
</p>
<p><strong>Pros</strong></p>
<ul>
<li>Works on every environment</li>
<li>You can use <code>break</code> and <code>continue</code> flow control statements</li>
</ul>
<p><strong>Cons</strong></p>
<ul>
<li>Too verbose</li>
<li>Imperative</li>
<li>Easy to have <a href=""https://en.wikipedia.org/wiki/Off-by-one_error#Looping_over_arrays"" rel=""noreferrer"">off-by-one errors</a> (sometimes also called a <em>fence post error</em>)</li>
</ul>
<h1>2. <code>Array.prototype.forEach</code>:</h1>
<p>The <a href=""https://en.wikipedia.org/wiki/ECMAScript#5th_Edition"" rel=""noreferrer"">ES5</a> specification introduced a lot of beneficial array methods. One of them, the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"" rel=""noreferrer""><code>Array.prototype.forEach</code></a>, gave us a concise way to iterate over an array:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const array = [""one"", ""two"", ""three""]
array.forEach(function (item, index) {
  console.log(item, index);
});</code></pre>
</div>
</div>
</p>
<p>Being almost ten years as the time of writing that the ES5 specification was released (Dec. 2009), it has been implemented by nearly all modern engines in the desktop, server, and mobile environments, so it's safe to use them.</p>
<p>And with the ES6 arrow function syntax, it's even more succinct:</p>
<pre><code>array.forEach(item =&gt; console.log(item));
</code></pre>
<p>Arrow functions are also widely implemented unless you plan to support ancient platforms (e.g., <a href=""https://en.wikipedia.org/wiki/Internet_Explorer_11#Internet_Explorer_11"" rel=""noreferrer"">Internet Explorer 11</a>); you are also safe to go.</p>
<p><strong>Pros</strong></p>
<ul>
<li>Very short and succinct.</li>
<li>Declarative</li>
</ul>
<p><strong>Cons</strong></p>
<ul>
<li>Cannot use <code>break</code> / <code>continue</code></li>
</ul>
<p>Normally, you can replace the need to <code>break</code> out of imperative loops by filtering the array elements before iterating them, for example:</p>
<pre><code>array.filter(item =&gt; item.condition &lt; 10)
     .forEach(item =&gt; console.log(item))
</code></pre>
<p>Keep in mind if you are iterating an array <em>to build another array from it</em>, you should use <code>map</code>. I've seen this anti-pattern so many times.</p>
<p><strong>Anti-pattern:</strong></p>
<pre><code>const numbers = [1,2,3,4,5], doubled = [];

numbers.forEach((n, i) =&gt; { doubled[i] = n * 2 });
</code></pre>
<p><strong>Proper use case of <em>map</em>:</strong></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const numbers = [1,2,3,4,5];
const doubled = numbers.map(n =&gt; n * 2);

console.log(doubled);</code></pre>
</div>
</div>
</p>
<p>Also, if you are trying to <em>reduce</em> the array to a value, for example, you want to sum an array of numbers, you should use the <em>reduce</em> method.</p>
<p><strong>Anti-pattern:</strong></p>
<pre><code>const numbers = [1,2,3,4,5];
const sum = 0;
numbers.forEach(num =&gt; { sum += num });
</code></pre>
<p><strong>Proper use of <em>reduce</em>:</strong></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const numbers = [1,2,3,4,5];
const sum = numbers.reduce((total, n) =&gt; total + n, 0);

console.log(sum);</code></pre>
</div>
</div>
</p>
<h1>3. ES6 <code>for-of</code> statement:</h1>
<p>The <a href=""https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015"" rel=""noreferrer"">ES6</a> standard introduces the concept of iterable objects and defines a new construct for traversing data, the <code>for...of</code> statement.</p>
<p>This statement works for any kind of iterable object and also for generators (any object that has a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator"" rel=""noreferrer""><code>\[Symbol.iterator\]</code></a> property).</p>
<p>Array objects are by definition built-in iterables in ES6, so you can use this statement on them:</p>
<pre><code>let colors = ['red', 'green', 'blue'];
for (const color of colors){
    console.log(color);
}
</code></pre>
<p><strong>Pros</strong></p>
<ul>
<li>It can iterate over a large variety of objects.</li>
<li>Can use normal flow control statements (<code>break</code> / <code>continue</code>).</li>
<li>Useful to iterate serially asynchronous values.</li>
</ul>
<p><strong>Cons</strong></p>
<ul>
<li>If you are targeting older browsers, the transpiled output <a href=""https://babeljs.io/repl#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=GYewTgBAFAxiB2BnALhOAbcETDSTYiAlAN4BQEeS-ApgHSYDms-4RA3GQL5A&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=true&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=false&amp;presets=es2015&amp;prettier=false&amp;targets=&amp;version=7.4.4&amp;externalPlugins="" rel=""noreferrer"">might surprise you</a>.</li>
</ul>
<h1>Do not use <code>for...in</code></h1>
<p>@zipcodeman suggests the use of the <code>for...in</code> statement, but for iterating arrays <code>for-in</code> should be avoided, that statement is meant to <strong>enumerate</strong> object properties.</p>
<p>It shouldn't be used for array-like objects because:</p>
<ul>
<li>The order of iteration is not guaranteed; the array indexes may not be visited in numeric order.</li>
<li>Inherited properties are also enumerated.</li>
</ul>
<p>The second point is that it can give you a lot of problems, for example, if you extend the <code>Array.prototype</code> object to include a method there, that property will also be enumerated.</p>
<p>For example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>Array.prototype.foo = ""foo!"";
var array = ['a', 'b', 'c'];

for (var i in array) {
    console.log(array[i]);
}</code></pre>
</div>
</div>
</p>
<p>The above code will console log &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, and &quot;foo!&quot;.</p>
<p>That can be particularly a problem if you use some library that relies heavily on native prototypes augmentation (such as <a href=""https://en.wikipedia.org/wiki/MooTools"" rel=""noreferrer"">MooTools</a>).</p>
<p>The <code>for-in</code> statement, as I said before, is there to <em>enumerate</em> object properties, for example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var obj = {
    ""a"": 1,
    ""b"": 2,
    ""c"": 3
};

for (var prop in obj) {
    if (obj.hasOwnProperty(prop)) {
        // or if (Object.prototype.hasOwnProperty.call(obj,prop)) for safety...
        console.log(""prop: "" + prop + "" value: "" + obj[prop])
    }
}</code></pre>
</div>
</div>
</p>
<p>In the above example, the <code>hasOwnProperty</code> method allows you to enumerate only <em>own properties</em>. That's it, only the properties that the object physically has, no inherited properties.</p>
<p>I would recommend you to read the following article:</p>
<ul>
<li><a href=""http://web.archive.org/web/20101213150231/http://dhtmlkitchen.com/?category=/JavaScript/&amp;date=2007/10/21/&amp;entry=Iteration-Enumeration-Primitives-and-Objects"" rel=""noreferrer"">Enumeration VS Iteration</a></li>
</ul>
"
"14902238","-7","<p>Or just create this:</p>

<pre><code>function yourFunction(){

   //do something
   setInterval(myFunc(),1000);
   //do something else

}

function myFunc(){
   return;
}
</code></pre>

<p>this will just wait the interval specified and call the function which will just do nothing.</p>
"
"3010854","446","<p>You can use <code>map</code>, which is a functional programming technique that's also available in other languages like <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29"" rel=""noreferrer"">Python</a> and <a href=""http://en.wikipedia.org/wiki/Haskell_%28programming_language%29"" rel=""noreferrer"">Haskell</a>.</p>

<pre><code>[1,2,3,4].map( function(item) {
     alert(item);
})
</code></pre>

<p>The general syntax is:</p>

<pre><code>array.map(func)
</code></pre>

<p>In general <code>func</code> would take one parameter, which is an item of the array. But in the case of JavaScript, it can take a second parameter which is the item's index, and a third parameter which is the array itself.</p>

<p>The return value of <code>array.map</code> is another array, so you can use it like this:</p>

<pre><code>var x = [1,2,3,4].map( function(item) {return item * 10;});
</code></pre>

<p>And now x is <code>[10,20,30,40]</code>.</p>

<p>You don't have to write the function inline. It could be a separate function.</p>

<pre><code>var item_processor = function(item) {
      // Do something complicated to an item
}

new_list = my_list.map(item_processor);
</code></pre>

<p>which would be sort-of equivalent to:</p>

<pre><code> for (item in my_list) {item_processor(item);}
</code></pre>

<p>Except you don't get the <code>new_list</code>.</p>
"
"16446530","10","<p>All these answers are nice.</p>

<p>But I cannot be sure that variable is a string, doesn't contain only spaces (this is important for me), and can contain '0' (string).</p>

<p>My version:</p>

<pre><code>function empty(str){
    return !str || !/[^\s]+/.test(str);
}

empty(null); // true
empty(0); // true
empty(7); // false
empty(""""); // true
empty(""0""); // false
empty(""  ""); // true
</code></pre>

<p>Sample on <a href=""http://jsfiddle.net/YZfGs/"" rel=""nofollow noreferrer"">jsfiddle</a>.</p>
"
"2880929","1752","<p>Some of the solutions posted here are inefficient. Repeating the regular expression search every time the script needs to access a parameter is completely unnecessary, one single function to split up the parameters into an associative-array style object is enough. If you're not working with the HTML 5 History API, this is only necessary once per page load.  The other suggestions here also fail to decode the URL correctly.</p>

<pre><code>var urlParams;
(window.<a href=""https://developer.mozilla.org/en-US/docs/DOM/window.onpopstate"" rel=""noreferrer"">onpopstate</a> = function () {
    var match,
        pl     = /\+/g,  // Regex for replacing addition symbol with a space
        search = /([^&=]+)=?([^&]*)/g,
        decode = function (s) { return <a href=""https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/decodeURIComponent"" rel=""noreferrer"">decodeURIComponent</a>(s.replace(pl, "" "")); },
        query  = window.<a href=""https://developer.mozilla.org/en-US/docs/DOM/window.location"" rel=""noreferrer"">location</a>.search.<a href=""https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/substring"" rel=""noreferrer"">substring</a>(1);

    urlParams = {};
    while (match = search.<a href=""https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/exec"" rel=""noreferrer"">exec</a>(query))
       urlParams[decode(match[1])] = decode(match[2]);
})();</code></pre>

<p>Example querystring: </p>

<blockquote>
  <p><code>?i=main&amp;mode=front&amp;sid=de8d49b78a85a322c4155015fdce22c4&amp;enc=+Hello%20&amp;empty</code></p>
</blockquote>

<p>Result:</p>

<pre class=""lang-js prettyprint-override""><code> urlParams = {
    enc: "" Hello "",
    i: ""main"",
    mode: ""front"",
    sid: ""de8d49b78a85a322c4155015fdce22c4"",
    empty: """"
}

alert(urlParams[""mode""]);
// -&gt; ""front""

alert(""empty"" in urlParams);
// -&gt; true
</code></pre>

<p>This could easily be improved upon to handle array-style query strings too.  An example of this is <a href=""http://jsbin.com/adali3/2"" rel=""noreferrer"">here</a>, but since array-style parameters aren't defined in <a href=""http://tools.ietf.org/html/rfc3986"" rel=""noreferrer"">RFC 3986</a> I won't pollute this answer with the source code. <a href=""https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript/23401756#23401756"">For those interested in a ""polluted"" version, look at campbeln's answer below</a>.</p>

<p>Also, as pointed out in the comments, <code>;</code> is a legal delimiter for <code>key=value</code> pairs.  It would require a more complicated regex to handle <code>;</code> or <code>&amp;</code>, which I think is unnecessary because it's rare that <code>;</code> is used and I would say even more unlikely that both would be used.  If you need to support <code>;</code> instead of <code>&amp;</code>, just swap them in the regex.</p>

<p><hr /> 
If you're using a server-side preprocessing language, you might want to use its native JSON functions to do the heavy lifting for you.  For example, in PHP you can write:</p>

<pre><code>&lt;script>var urlParams = &lt;?php echo <a href=""http://php.net/manual/en/function.json-encode.php"" rel=""noreferrer"">json_encode</a>($_GET, JSON_HEX_TAG);?>;&lt;/script></code></pre>

<p>Much simpler!</p>

<h1>UPDATED</h1>

<blockquote>
  <p>A new capability would be to retrieve repeated params as following <code>myparam=1&amp;myparam=2</code>. There is not a <em>specification</em>, however, most of the current approaches follow the generation of an array.</p>
</blockquote>

<pre><code>myparam = [""1"", ""2""]
</code></pre>

<p>So, this is the approach to manage it:</p>

<pre><code>let urlParams = {};
(window.onpopstate = function () {
    let match,
        pl = /\+/g,  // Regex for replacing addition symbol with a space
        search = /([^&amp;=]+)=?([^&amp;]*)/g,
        decode = function (s) {
            return decodeURIComponent(s.replace(pl, "" ""));
        },
        query = window.location.search.substring(1);

    while (match = search.exec(query)) {
        if (decode(match[1]) in urlParams) {
            if (!Array.isArray(urlParams[decode(match[1])])) {
                urlParams[decode(match[1])] = [urlParams[decode(match[1])]];
            }
            urlParams[decode(match[1])].push(decode(match[2]));
        } else {
            urlParams[decode(match[1])] = decode(match[2]);
        }
    }
})();
</code></pre>
"
"16540602","9","<p>I did some research on what happens if you pass a non-string and non-empty/null value to a tester function. As many know, (0 == """") is true in JavaScript, but since 0 is a value and not empty or null, you may want to test for it.</p>

<p>The following two functions return true only for undefined, null, empty/whitespace values and false for everything else, such as numbers, Boolean, objects, expressions, etc.</p>

<pre><code>function IsNullOrEmpty(value)
{
    return (value == null || value === """");
}
function IsNullOrWhiteSpace(value)
{
    return (value == null || !/\S/.test(value));
}
</code></pre>

<p>More complicated examples exists, but these are simple and give consistent results. There is no need to test for undefined, since it's included in (value == null) check. You may also mimic <a href=""https://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29"" rel=""nofollow noreferrer"">C#</a> behaviour by adding them to String like this:</p>

<pre><code>String.IsNullOrEmpty = function (value) { ... }
</code></pre>

<p>You do not want to put it in Strings prototype, because if the instance of the String-class is null, it will error:</p>

<pre><code>String.prototype.IsNullOrEmpty = function (value) { ... }
var myvar = null;
if (1 == 2) { myvar = ""OK""; } // Could be set
myvar.IsNullOrEmpty(); // Throws error
</code></pre>

<p>I tested with the following value array. You can loop it through to test your functions if in doubt.</p>

<pre><code>// Helper items
var MyClass = function (b) { this.a = ""Hello World!""; this.b = b; };
MyClass.prototype.hello = function () { if (this.b == null) { alert(this.a); } else { alert(this.b); } };
var z;
var arr = [
// 0: Explanation for printing, 1: actual value
    ['undefined', undefined],
    ['(var) z', z],
    ['null', null],
    ['empty', ''],
    ['space', ' '],
    ['tab', '\t'],
    ['newline', '\n'],
    ['carriage return', '\r'],
    ['""\\r\\n""', '\r\n'],
    ['""\\n\\r""', '\n\r'],
    ['"" \\t \\n ""', ' \t \n '],
    ['"" txt \\t test \\n""', ' txt \t test \n'],
    ['""txt""', ""txt""],
    ['""undefined""', 'undefined'],
    ['""null""', 'null'],
    ['""0""', '0'],
    ['""1""', '1'],
    ['""1.5""', '1.5'],
    ['""1,5""', '1,5'], // Valid number in some locales, not in JavaScript
    ['comma', ','],
    ['dot', '.'],
    ['"".5""', '.5'],
    ['0', 0],
    ['0.0', 0.0],
    ['1', 1],
    ['1.5', 1.5],
    ['NaN', NaN],
    ['/\S/', /\S/],
    ['true', true],
    ['false', false],
    ['function, returns true', function () { return true; } ],
    ['function, returns false', function () { return false; } ],
    ['function, returns null', function () { return null; } ],
    ['function, returns string', function () { return ""test""; } ],
    ['function, returns undefined', function () { } ],
    ['MyClass', MyClass],
    ['new MyClass', new MyClass()],
    ['empty object', {}],
    ['non-empty object', { a: ""a"", match: ""bogus"", test: ""bogus""}],
    ['object with toString: string', { a: ""a"", match: ""bogus"", test: ""bogus"", toString: function () { return ""test""; } }],
    ['object with toString: null', { a: ""a"", match: ""bogus"", test: ""bogus"", toString: function () { return null; } }]
];
</code></pre>
"
"3220791","39","<pre><code>function GET() {
        var data = [];
        for(x = 0; x &lt; arguments.length; ++x)
            data.push(location.href.match(new RegExp(""/\?"".concat(arguments[x],""="",""([^\n&amp;]*)"")))[1])
                return data;
    }


example:
data = GET(""id"",""name"",""foo"");
query string : ?id=3&amp;name=jet&amp;foo=b
returns:
    data[0] // 3
    data[1] // jet
    data[2] // b
or
    alert(GET(""id"")[0]) // return 3
</code></pre>
"
"16618986","11","<p>For browsers, I agree that setTimeout and setInterval are the way to go.</p>

<p>But for server-side code, it may require a blocking function (for example, so you can effectively have thread synchronization).</p>

<p>If you're using node.js and meteor, you may have run into the limitations of using setTimeout in a fiber. Here is the code for server-side sleep.</p>

<pre><code>var Fiber = require('fibers');

function sleep(ms) {
    var fiber = Fiber.current;
    setTimeout(function() {
        fiber.run();
    }, ms);
    Fiber.yield();
}

Fiber(function() {
    console.log('wait... ' + new Date);
    sleep(1000);
    console.log('ok... ' + new Date);
}).run();
console.log('back in main');
</code></pre>

<p>See: <a href=""https://github.com/laverdet/node-fibers#sleep"" rel=""noreferrer"">https://github.com/laverdet/node-fibers#sleep</a></p>
"
"17439572","4","<p>I prefer to use not blank test instead of blank </p>

<pre><code>function isNotBlank(str) {
   return (str &amp;&amp; /^\s*$/.test(str));
}
</code></pre>
"
"17934398","4","<p>If you right a sleep function like this</p>

<pre><code>var sleep = function(period, decision, callback){
    var interval = setInterval(function(){
        if (decision()) {
            interval = clearInterval(interval);
            callback();
        }
    }, period);
}
</code></pre>

<p>and you have a asynchronous function to call multiple times</p>

<pre><code>var xhr = function(url, callback){
    // make ajax request
    // call callback when request fulfills
}
</code></pre>

<p>And you setup your project like this:</p>

<pre><code>var ready = false;

function xhr1(){
    xhr(url1, function(){ ready = true;});  
}
function xhr2(){
    xhr(url2, function(){ ready = true; }); 
}
function xhr3(){
    xhr(url3, function(){ ready = true; }); 
}
</code></pre>

<p>Then you can do this:</p>

<pre><code>xhr1();
sleep(100, function(){ return done; }, xhr2);
sleep(100, function(){ return done; }, xhr3);
sleep(100, function(){ return done; }, function(){
    // do more
});
</code></pre>

<p>Instead of endless callback indentation like this:</p>

<pre><code>xhr(url1, function(){
    xhr2(url2, function(){
        xhr3(url3, function(){
            // do more
        });
    });
});
</code></pre>
"
"17936490","331","<p><strong>Only for debug/dev</strong> , I post this if it's useful to someone</p>
<p>Interesting stuff, in Firebug ( &amp; probably other js consoles ), nothing happen after hitting enter, only after the sleep duration specified (...)</p>
<pre><code>function sleepFor( sleepDuration ){
    var now = new Date().getTime();
    while(new Date().getTime() &lt; now + sleepDuration){ /* do nothing */ } 
}
</code></pre>
<p>Example of use:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function sleepFor( sleepDuration ){
  var now = new Date().getTime();
  while(new Date().getTime() &lt; now + sleepDuration){ /* do nothing */ } 
}

function sleepThenAct(){
  sleepFor(2000);
  console.log(""hello js sleep !"");
}

sleepThenAct()</code></pre>
</div>
</div>
</p>
"
"18017363","-5","<pre><code>var waitTillSomethingHappens = function(){  
    if(somethingHappened == 1)  
    {  
        alert('Something Happened get out of sleep');  
    }
    else
    {  
    setTimeout(waitTillSomethingHappens,1000);  
    }  
};
</code></pre>
"
"3855394","1303","<h1>ES2015 (ES6)</h1>
<pre><code>getQueryStringParams = query =&gt; {
    return query
        ? (/^[?#]/.test(query) ? query.slice(1) : query)
            .split('&amp;')
            .reduce((params, param) =&gt; {
                    let [key, value] = param.split('=');
                    params[key] = value ? decodeURIComponent(value.replace(/\+/g, ' ')) : '';
                    return params;
                }, {}
            )
        : {}
};
</code></pre>
<hr />
<h2>Without jQuery</h2>
<pre><code>var qs = (function(a) {
    if (a == &quot;&quot;) return {};
    var b = {};
    for (var i = 0; i &lt; a.length; ++i)
    {
        var p=a[i].split('=', 2);
        if (p.length == 1)
            b[p[0]] = &quot;&quot;;
        else
            b[p[0]] = decodeURIComponent(p[1].replace(/\+/g, &quot; &quot;));
    }
    return b;
})(window.location.search.substr(1).split('&amp;'));
</code></pre>
<p>With an URL like <code>?topic=123&amp;name=query+string</code>, the following will return:</p>
<pre><code>qs[&quot;topic&quot;];    // 123
qs[&quot;name&quot;];     // query string
qs[&quot;nothere&quot;];  // undefined (object)
</code></pre>
<hr />
<h2>Google method</h2>
<p>Tearing Google's code I found the method they use: <code>getUrlParameters</code></p>
<pre><code>function (b) {
    var c = typeof b === &quot;undefined&quot;;
    if (a !== h &amp;&amp; c) return a;
    for (var d = {}, b = b || k[B][vb], e = b[p](&quot;?&quot;), f = b[p](&quot;#&quot;), b = (f === -1 ? b[Ya](e + 1) : [b[Ya](e + 1, f - e - 1), &quot;&amp;&quot;, b[Ya](f + 1)][K](&quot;&quot;))[z](&quot;&amp;&quot;), e = i.dd ? ia : unescape, f = 0, g = b[w]; f &lt; g; ++f) {
        var l = b[f][p](&quot;=&quot;);
        if (l !== -1) {
            var q = b[f][I](0, l),
                l = b[f][I](l + 1),
                l = l[Ca](/\+/g, &quot; &quot;);
            try {
                d[q] = e(l)
            } catch (A) {}
        }
    }
    c &amp;&amp; (a = d);
    return d
}
</code></pre>
<p>It is obfuscated, but it is understandable. It does not work because some variables are undefined.</p>
<p>They start to look for parameters on the url from <code>?</code> and also from the hash <code>#</code>. Then for each parameter they split in the equal sign <code>b[f][p](&quot;=&quot;)</code> (which looks like <code>indexOf</code>, they use the position of the char to get the key/value). Having it split they check whether the parameter has a value or not, if it has then they store the value of <code>d</code>, otherwise they just continue.</p>
<p>In the end the object <code>d</code> is returned, handling escaping and the <code>+</code> sign. This object is just like mine, it has the same behavior.</p>
<hr />
<p>My method as a <strong>jQuery plugin</strong></p>
<pre><code>(function($) {
    $.QueryString = (function(paramsArray) {
        let params = {};

        for (let i = 0; i &lt; paramsArray.length; ++i)
        {
            let param = paramsArray[i]
                .split('=', 2);
            
            if (param.length !== 2)
                continue;
            
            params[param[0]] = decodeURIComponent(param[1].replace(/\+/g, &quot; &quot;));
        }
            
        return params;
    })(window.location.search.substr(1).split('&amp;'))
})(jQuery);
</code></pre>
<p>Usage</p>
<pre><code>//Get a param
$.QueryString.param
//-or-
$.QueryString[&quot;param&quot;]
//This outputs something like...
//&quot;val&quot;

//Get all params as object
$.QueryString
//This outputs something like...
//Object { param: &quot;val&quot;, param2: &quot;val&quot; }

//Set a param (only in the $.QueryString object, doesn't affect the browser's querystring)
$.QueryString.param = &quot;newvalue&quot;
//This doesn't output anything, it just updates the $.QueryString object

//Convert object into string suitable for url a querystring (Requires jQuery)
$.param($.QueryString)
//This outputs something like...
//&quot;param=newvalue&amp;param2=val&quot;

//Update the url/querystring in the browser's location bar with the $.QueryString object
history.replaceState({}, '', &quot;?&quot; + $.param($.QueryString));
//-or-
history.pushState({}, '', &quot;?&quot; + $.param($.QueryString));
</code></pre>
<hr />
<h2><a href=""http://jsperf.com/querystring-with-javascript"" rel=""noreferrer"">Performance test (split method against regex method)</a> (<a href=""http://jsperf.com/"" rel=""noreferrer"">jsPerf</a>)</h2>
<p>Preparation code: methods declaration</p>
<h3>Split test code</h3>
<pre><code>var qs = window.GetQueryString(query);

var search = qs[&quot;q&quot;];
var value = qs[&quot;value&quot;];
var undef = qs[&quot;undefinedstring&quot;];
</code></pre>
<h3>Regex test code</h3>
<pre><code>var search = window.getParameterByName(&quot;q&quot;);
var value = window.getParameterByName(&quot;value&quot;);
var undef = window.getParameterByName(&quot;undefinedstring&quot;);
</code></pre>
<p><strong>Testing in Firefox 4.0 x86 on Windows Server 2008 R2 / 7 x64</strong></p>
<ul>
<li><strong>Split method</strong>: 144,780 ±2.17% fastest</li>
<li><strong>Regex method</strong>: 13,891 ±0.85% | 90% slower</li>
</ul>
"
"3011305","91","<p>Opera, Safari, Firefox and Chrome now all share a set of enhanced Array methods for optimizing many common loops.</p>

<p>You may not need all of them, but they can be very useful, or would be if every browser supported them.</p>

<p>Mozilla Labs published the algorithms they and <a href=""http://en.wikipedia.org/wiki/WebKit"" rel=""noreferrer"">WebKit</a> both use, so that you can add them yourself.</p>

<p><strong>filter</strong> returns an array of items that satisfy some condition or test.</p>

<p><strong>every</strong> returns true if every array member passes the test.</p>

<p><strong>some</strong> returns true if any pass the test.</p>

<p><strong>forEach</strong> runs a function on each array member and doesn't return anything.</p>

<p><strong>map</strong> is like forEach, but it returns an array of the results of the operation for each element.</p>

<p>These methods all take a function for their first argument and have an optional second argument, which is an object whose scope you want to impose on the array members as they loop through the function.</p>

<p>Ignore it until you need it.</p>

<p><strong>indexOf</strong> and <strong>lastIndexOf</strong> find the appropriate position of the first or last element that matches its argument exactly.</p>

<pre><code>(function(){
    var p, ap= Array.prototype, p2={
        filter: function(fun, scope){
            var L= this.length, A= [], i= 0, val;
            if(typeof fun== 'function'){
                while(i&lt; L){
                    if(i in this){
                        val= this[i];
                        if(fun.call(scope, val, i, this)){
                            A[A.length]= val;
                        }
                    }
                    ++i;
                }
            }
            return A;
        },
        every: function(fun, scope){
            var L= this.length, i= 0;
            if(typeof fun== 'function'){
                while(i&lt;L){
                    if(i in this &amp;&amp; !fun.call(scope, this[i], i, this))
                        return false;
                    ++i;
                }
                return true;
            }
            return null;
        },
        forEach: function(fun, scope){
            var L= this.length, i= 0;
            if(typeof fun== 'function'){
                while(i&lt; L){
                    if(i in this){
                        fun.call(scope, this[i], i, this);
                    }
                    ++i;
                }
            }
            return this;
        },
        indexOf: function(what, i){
            i= i || 0;
            var L= this.length;
            while(i&lt; L){
                if(this[i]=== what)
                    return i;
                ++i;
            }
            return -1;
        },
        lastIndexOf: function(what, i){
            var L= this.length;
            i= i || L-1;
            if(isNaN(i) || i&gt;= L)
                i= L-1;
            else
                if(i&lt; 0) i += L;
            while(i&gt; -1){
                if(this[i]=== what)
                    return i;
                --i;
            }
            return -1;
        },
        map: function(fun, scope){
            var L= this.length, A= Array(this.length), i= 0, val;
            if(typeof fun== 'function'){
                while(i&lt; L){
                    if(i in this){
                        A[i]= fun.call(scope, this[i], i, this);
                    }
                    ++i;
                }
                return A;
            }
        },
        some: function(fun, scope){
            var i= 0, L= this.length;
            if(typeof fun== 'function'){
                while(i&lt;L){
                    if(i in this &amp;&amp; fun.call(scope, this[i], i, this))
                        return true;
                    ++i;
                }
                return false;
            }
        }
    }
    for(p in p2){
        if(!ap[p])
            ap[p]= p2[p];
    }
    return true;
})();
</code></pre>
"
"3867610","97","<p>Here's my stab at making Andy E's excellent solution into a full fledged jQuery plugin:</p>

<pre><code>;(function ($) {
    $.extend({      
        getQueryString: function (name) {           
            function parseParams() {
                var params = {},
                    e,
                    a = /\+/g,  // Regex for replacing addition symbol with a space
                    r = /([^&amp;=]+)=?([^&amp;]*)/g,
                    d = function (s) { return decodeURIComponent(s.replace(a, "" "")); },
                    q = window.location.search.substring(1);

                while (e = r.exec(q))
                    params[d(e[1])] = d(e[2]);

                return params;
            }

            if (!this.queryStringParams)
                this.queryStringParams = parseParams(); 

            return this.queryStringParams[name];
        }
    });
})(jQuery);
</code></pre>

<p>The syntax is:</p>

<pre><code>var someVar = $.getQueryString('myParam');
</code></pre>

<p>Best of both worlds!</p>
"
"4192880","18","<p>Here is <a href=""https://github.com/voituk/Misc/blob/master/js/jquery.hash.js#L10"" rel=""noreferrer"">my version of query string parsing code on GitHub</a>.</p>

<p>It's ""prefixed"" with jquery.*, but the parsing function itself don't use jQuery. It's pretty fast, but still open for few simple performance optimizations.</p>

<p>Also it supports list &amp; hash-tables encoding in the URL, like:</p>

<pre><code>arr[]=10&amp;arr[]=20&amp;arr[]=100
</code></pre>

<p>or</p>

<pre><code>hash[key1]=hello&amp;hash[key2]=moto&amp;a=How%20are%20you
</code></pre>

<hr>

<pre><code>jQuery.toQueryParams = function(str, separator) {
    separator = separator || '&amp;'
    var obj = {}
    if (str.length == 0)
        return obj
    var c = str.substr(0,1)
    var s = c=='?' || c=='#'  ? str.substr(1) : str; 

    var a = s.split(separator)
    for (var i=0; i&lt;a.length; i++) {
        var p = a[i].indexOf('=')
        if (p &lt; 0) {
            obj[a[i]] = ''
            continue
        }
        var k = decodeURIComponent(a[i].substr(0,p)),
            v = decodeURIComponent(a[i].substr(p+1))

        var bps = k.indexOf('[')
        if (bps &lt; 0) {
            obj[k] = v
            continue;
        } 

        var bpe = k.substr(bps+1).indexOf(']')
        if (bpe &lt; 0) {
            obj[k] = v
            continue;
        }

        var bpv = k.substr(bps+1, bps+bpe-1)
        var k = k.substr(0,bps)
        if (bpv.length &lt;= 0) {
            if (typeof(obj[k]) != 'object') obj[k] = []
            obj[k].push(v)
        } else {
            if (typeof(obj[k]) != 'object') obj[k] = {}
            obj[k][bpv] = v
        }
    }
    return obj;

}
</code></pre>
"
"19881582","8","<pre><code>function sleep(milliseconds) {
  var start = new Date().getTime();
  for (var i = 0; i &lt; 1e7; i++) {
    if ((new Date().getTime() - start) &gt; milliseconds){
      break;
    }
  }
}
</code></pre>
"
"9514142","90","<p><em><strong>Update:</strong></em></p>

<p>It's somewhat late for an update, but since I just stumbled on this question, and noticed that my previous answer is not one I'm happy with. Since the question involved replaceing a single word, it's incredible nobody thought of using word boundaries (<code>\b</code>)</p>

<pre><code>'a cat is not a caterpillar'.replace(/\bcat\b/gi,'dog');
//""a dog is not a caterpillar""
</code></pre>

<p>This is a simple regex that avoids replacing parts of words in most cases. However, a dash <code>-</code> is still considered a word boundary. So conditionals can be used in this case to avoid replacing strings like <code>cool-cat</code>:</p>

<pre><code>'a cat is not a cool-cat'.replace(/\bcat\b/gi,'dog');//wrong
//""a dog is not a cool-dog"" -- nips
'a cat is not a cool-cat'.replace(/(?:\b([^-]))cat(?:\b([^-]))/gi,'$1dog$2');
//""a dog is not a cool-cat""
</code></pre>

<hr>

<p>basically, this question is the same as the question here:
<a href=""https://stackoverflow.com/questions/9499075/javascript-replace-with/9499926"">Javascript replace &quot; &#39; &quot; with &quot; &#39;&#39; &quot;</a></p>

<p>@Mike, check the answer I gave there... regexp isn't the only way to replace multiple occurrences of a subsrting, far from it. Think flexible, think split!</p>

<pre><code>var newText = ""the cat looks like a cat"".split('cat').join('dog');
</code></pre>

<p>Alternatively, to prevent replacing word parts -which the approved answer will do, too! You can get around this issue using regular expressions that are, I admit, somewhat more complex and as an upshot of that, a tad slower, too:</p>

<pre><code>var regText = ""the cat looks like a cat"".replace(/(?:(^|[^a-z]))(([^a-z]*)(?=cat)cat)(?![a-z])/gi,""$1dog"");
</code></pre>

<p>The output is the same as the accepted answer, however, using the /cat/g expression on this string:</p>

<pre><code>var oops = 'the cat looks like a cat, not a caterpillar or coolcat'.replace(/cat/g,'dog');
//returns ""the dog looks like a dog, not a dogerpillar or cooldog"" ?? 
</code></pre>

<p>Oops indeed, this probably isn't what you want. What is, then? IMHO, a regex that only replaces 'cat' conditionally. (ie not part of a word), like so:</p>

<pre><code>var caterpillar = 'the cat looks like a cat, not a caterpillar or coolcat'.replace(/(?:(^|[^a-z]))(([^a-z]*)(?=cat)cat)(?![a-z])/gi,""$1dog"");
//return ""the dog looks like a dog, not a caterpillar or coolcat""
</code></pre>

<p>My guess is, this meets your needs. It's not fullproof, of course, but it should be enough to get you started. I'd recommend reading some more on these pages. This'll prove useful in perfecting this expression to meet your specific needs.</p>

<p><a href=""http://www.javascriptkit.com/jsref/regexp.shtml"" rel=""noreferrer"">http://www.javascriptkit.com/jsref/regexp.shtml</a></p>

<p><a href=""http://www.regular-expressions.info"" rel=""noreferrer"">http://www.regular-expressions.info</a></p>

<hr>

<p><strong>Final addition:</strong></p>

<p>Given that this question still gets a lot of views, I thought I might add an example of <code>.replace</code> used with a callback function. In this case, it dramatically simplifies the expression <em>and</em> provides even more flexibility, like replacing with correct capitalisation or replacing both <code>cat</code> and <code>cats</code> in one go:</p>

<pre><code>'Two cats are not 1 Cat! They\'re just cool-cats, you caterpillar'
   .replace(/(^|.\b)(cat)(s?\b.|$)/gi,function(all,char1,cat,char2)
    {
       //check 1st, capitalize if required
       var replacement = (cat.charAt(0) === 'C' ? 'D' : 'd') + 'og';
       if (char1 === ' ' &amp;&amp; char2 === 's')
       {//replace plurals, too
           cat = replacement + 's';
       }
       else
       {//do not replace if dashes are matched
           cat = char1 === '-' || char2 === '-' ? cat : replacement;
       }
       return char1 + cat + char2;//return replacement string
    });
//returns:
//Two dogs are not 1 Dog! They're just cool-cats, you caterpillar
</code></pre>
"
"22079686","42","<p>Very generic &quot;All-In-One&quot; Function (<em>not recommended though</em>):</p>
<pre><code>function is_empty(x)
{
    return (                                                           //don't put newline after return
        (typeof x == 'undefined')
              ||
        (x == null)
              ||
        (x == false)        //same as: !x
              ||
        (x.length == 0)
              ||
        (x == 0)            // note this line, you might not need this. 
              ||
        (x == &quot;&quot;)
              ||
        (x.replace(/\s/g,&quot;&quot;) == &quot;&quot;)
              ||
        (!/[^\s]/.test(x))
              ||
        (/^\s*$/.test(x))
    );
}
</code></pre>
<p>However, I don't recommend to use that, because your target variable should be of specific type (i.e. string, or numeric, or object?), so apply the checks that are relative to that variable.</p>
"
"3533701","82","<p>You can also extend the $.fn object with new methods:</p>

<pre><code>(function($)  {
   $.fn.extend({
      check : function()  {
         return this.filter("":radio, :checkbox"").attr(""checked"", true);
      },
      uncheck : function()  {
         return this.filter("":radio, :checkbox"").removeAttr(""checked"");
      }
   });
}(jQuery));
</code></pre>

<p>Then you can just do:</p>

<pre><code>$("":checkbox"").check();
$("":checkbox"").uncheck();
</code></pre>

<p>Or you may want to give them more unique names like mycheck() and myuncheck()  in case you use some other library that uses those names.</p>
"
"4830088","32","<p>This is a function I created a while back and I'm quite happy with. It is not case sensitive - which is handy. Also, if the requested QS doesn't exist, it just returns an empty string.</p>

<p>I use a compressed version of this. I'm posting uncompressed for the novice types to better explain what's going on.</p>

<p>I'm sure this could be optimized or done differently to work faster, but it's always worked great for what I need.</p>

<p>Enjoy.</p>

<pre><code>function getQSP(sName, sURL) {
    var theItmToRtn = """";
    var theSrchStrg = location.search;
    if (sURL) theSrchStrg = sURL;
    var sOrig = theSrchStrg;
    theSrchStrg = theSrchStrg.toUpperCase();
    sName = sName.toUpperCase();
    theSrchStrg = theSrchStrg.replace(""?"", ""&amp;"") theSrchStrg = theSrchStrg + ""&amp;"";
    var theSrchToken = ""&amp;"" + sName + ""="";
    if (theSrchStrg.indexOf(theSrchToken) != -1) {
        var theSrchTokenLth = theSrchToken.length;
        var theSrchTokenLocStart = theSrchStrg.indexOf(theSrchToken) + theSrchTokenLth;
        var theLocOfNextAndSign = theSrchStrg.indexOf(""&amp;"", theSrchTokenLocStart);
        theItmToRtn = unescape(sOrig.substring(theSrchTokenLocStart, theLocOfNextAndSign));
    }
    return unescape(theItmToRtn);
}
</code></pre>
"
"5158301","671","<p>Improved version of <a href=""https://stackoverflow.com/questions/901115/get-querystring-values-with-jquery/901144#901144"">Artem Barger's answer</a>:</p>

<pre><code>function getParameterByName(name) {
    var match = RegExp('[?&amp;]' + name + '=([^&amp;]*)').exec(window.location.search);
    return match &amp;&amp; decodeURIComponent(match[1].replace(/\+/g, ' '));
}
</code></pre>

<p>For more information on improvement see: <a href=""http://james.padolsey.com/javascript/bujs-1-getparameterbyname/"" rel=""noreferrer"">http://james.padolsey.com/javascript/bujs-1-getparameterbyname/</a></p>
"
"10939737","599","<p>If anyone is looking for something more advanced, try out <a href=""http://requirejs.org/"" rel=""noreferrer"">RequireJS</a>. You'll get added benefits such as dependency management, better concurrency, and avoid duplication (that is, retrieving a script more than once).</p>

<p>You can write your JavaScript files in ""modules"" and then reference them as dependencies in other scripts. Or you can use RequireJS as a simple ""go get this script"" solution.</p>

<p>Example:</p>

<p>Define dependencies as modules:</p>

<p><strong>some-dependency.js</strong></p>

<pre><code>define(['lib/dependency1', 'lib/dependency2'], function (d1, d2) {

     //Your actual script goes here.   
     //The dependent scripts will be fetched if necessary.

     return libraryObject;  //For example, jQuery object
});
</code></pre>

<p><strong>implementation.js</strong> is your ""main"" JavaScript file that depends on <strong>some-dependency.js</strong></p>

<pre><code>require(['some-dependency'], function(dependency) {

    //Your script goes here
    //some-dependency.js is fetched.   
    //Then your script is executed
});
</code></pre>

<p>Excerpt from the <a href=""https://github.com/jrburke/requirejs"" rel=""noreferrer"">GitHub</a> README:</p>

<blockquote>
  <p>RequireJS loads plain JavaScript files as well as more defined
  modules. It is optimized for in-browser use, including in a Web
  Worker, but it can be used in other JavaScript environments, like
  Rhino and Node. It implements the Asynchronous Module API.</p>
  
  <p>RequireJS uses plain script tags to load modules/files, so it should
  allow for easy debugging. It can be used simply to load existing
  JavaScript files, so <strong>you can add it to your existing project without
  having to re-write your JavaScript files.</strong></p>
  
  <p>... </p>
</blockquote>
"
"22340035","-2","<p>I'm sure there is a million ways to do this one better, but I thought I would give it a try by creating an object:</p>

<pre><code>// execute code consecutively with delays (blocking/non-blocking internally)
function timed_functions() 
{
this.myfuncs = [];
this.myfuncs_delays = []; // mirrors keys of myfuncs -- values stored are custom delays, or -1 for use default
this.myfuncs_count = 0; // increment by 1 whenever we add a function
this.myfuncs_prev   = -1; // previous index in array
this.myfuncs_cur    = 0; // current index in array
this.myfuncs_next  = 0; // next index in array
this.delay_cur     = 0; // current delay in ms
this.delay_default = 0; // default delay in ms
this.loop = false;      // will this object continue to execute when at end of myfuncs array?
this.finished = false;  // are we there yet?
this.blocking = true;   // wait till code completes before firing timer?
this.destroy = false;   // &lt;advanced&gt; destroy self when finished


this.next_cycle = function() {
var that  = this;
var mytimer = this.delay_default;

if(this.myfuncs_cur &gt; -1)
if(this.myfuncs_delays[this.myfuncs_cur] &gt; -1)
mytimer = this.myfuncs_delays[this.myfuncs_cur];

console.log(""fnc:"" + this.myfuncs_cur);
console.log(""timer:"" + mytimer);
console.log(""custom delay:"" + this.myfuncs_delays[this.myfuncs_cur]);
setTimeout(function() {
// times up! next cycle...
that.cycle(); 

}, mytimer);
}

this.cycle = function() {

// now check how far we are along our queue.. is this the last function?
if(this.myfuncs_next + 1 &gt; this.myfuncs_count)
{
if(this.loop)
{
console.log('looping..');
this.myfuncs_next = 0;
}
else
this.finished = true;
}


// first check if object isn't finished
if(this.finished)
return false;

// HANDLE NON BLOCKING //
if(this.blocking != true) // blocking disabled
{
console.log(""NOT BLOCKING"");
this.next_cycle();
}


// set prev = current, and current to next, and next to new next
this.myfuncs_prev = this.myfuncs_cur;
this.myfuncs_cur  = this.myfuncs_next;
this.myfuncs_next++; 

// execute current slot
this.myfuncs[this.myfuncs_cur]();




// HANDLE BLOCKING
if(this.blocking == true)  // blocking enabled
{
console.log(""BLOCKING"");
this.next_cycle();
}




return true;
};

// adders 
this.add = {
that:this,

fnc: function(aFunction) { 
// add to the function array
var cur_key = this.that.myfuncs_count++;
this.that.myfuncs[cur_key] = aFunction;
// add to the delay reference array
this.that.myfuncs_delays[cur_key] = -1;
}
}; // end::this.add

// setters
this.set = {
that:this, 

delay:          function(ms)    {  
var cur_key = this.that.myfuncs_count - 1;
// this will handle the custom delay array this.that.myfunc_delays
// add a custom delay to your function container

console.log(""setting custom delay. key: ""+ cur_key + "" msecs: "" + ms);
if(cur_key &gt; -1)
{ 
this.that.myfuncs_delays[cur_key] = ms; 
}

// so now we create an entry on the delay variable
},  

delay_cur:      function(ms)    { this.that.delay_cur = ms;         },
delay_default:  function(ms)    { this.that.delay_default = ms;         },
loop_on:          function()        { this.that.loop = true; }, 
loop_off:         function()        { this.that.loop = false; },
blocking_on:      function()        { this.that.blocking = true; }, 
blocking_off:     function()        { this.that.blocking = false; },

finished:           function(aBool) { this.that.finished = true; }
}; // end::this.set    


// setters
this.get = {
that:this, 

delay_default: function() { return this.that.delay_default; },
delay_cur:     function() { return this.that.delay_cur; }
}; // end::this.get     

} // end:::function timed_functions()
</code></pre>

<p>and use like:
    // // // BEGIN :: TEST // // //</p>

<pre><code>// initialize
var fncTimer = new timed_functions;

// set some defaults
fncTimer.set.delay_default(1000);
fncTimer.set.blocking_on();
// fncTimer.set.loop_on();
// fncTimer.set.loop_off();


// BEGIN :: ADD FUNCTIONS (they will fire off in order)
fncTimer.add.fnc(function() {
    console.log('plan a (2 secs)');
});
fncTimer.set.delay(2000); // set custom delay for previously added function

fncTimer.add.fnc(function() {
    console.log('hello world (delay 3 seconds)');
});
fncTimer.set.delay(3000);

fncTimer.add.fnc(function() {
    console.log('wait 4 seconds...');
});
fncTimer.set.delay(4000);

fncTimer.add.fnc(function() {
    console.log('wait 2 seconds');
});
fncTimer.set.delay(2000);

fncTimer.add.fnc(function() {
    console.log('finished.');
});
// END :: ADD FUNCTIONS


// NOW RUN
fncTimer.cycle(); // begin execution 


// // // END :: TEST // // //
</code></pre>
"
"4614440","52","<p>This works for me:</p>

<pre><code>/* isAgeSelected being id for checkbox */

$(""#isAgeSelected"").click(function(){
  $(this).is(':checked') ? $(""#txtAge"").show() : $(""#txtAge"").hide();
});
</code></pre>
"
"5297222","41","<p>I use regular expressions a lot, but not for that.</p>

<p>It seems easier and more efficient to me to read the query string once in my application, and build an object from all the key/value pairs like:</p>

<pre><code>var search = function() {
  var s = window.location.search.substr(1),
    p = s.split(/\&amp;/), l = p.length, kv, r = {};
  if (l === 0) {return false;}
  while (l--) {
    kv = p[l].split(/\=/);
    r[kv[0]] = decodeURIComponent(kv[1] || '') || true;
  }
  return r;
}();
</code></pre>

<p>For a URL like <code>http://domain.com?param1=val1&amp;param2=val2</code> you can get their value later in your code as <code>search.param1</code> and <code>search.param2</code>.</p>
"
"23347527","1","<p>You can use a closure call setTimeout() with incrementally larger values.</p>

<pre><code>var items = ['item1', 'item2', 'item3'];

function functionToExecute(item) {
  console.log('function executed for item: ' + item);
}

$.each(items, function (index, item) {
  var timeoutValue = index * 2000;
  setTimeout(function() {
    console.log('waited ' + timeoutValue + ' milliseconds');
    functionToExecute(item);
  }, timeoutValue);
});
</code></pre>

<p>Result:</p>

<pre><code>waited 0 milliseconds
function executed for item: item1
waited 2000 milliseconds
function executed for item: item2
waited 4000 milliseconds
function executed for item: item3 
</code></pre>
"
"5407529","63","<p>To check a checkbox you should use</p>

<pre><code> $('.myCheckbox').attr('checked',true);
</code></pre>

<p>or</p>

<pre><code> $('.myCheckbox').attr('checked','checked');
</code></pre>

<p>and to uncheck a check box you should always set it to false:</p>

<pre><code> $('.myCheckbox').attr('checked',false);
</code></pre>

<p>If you do</p>

<pre><code>  $('.myCheckbox').removeAttr('checked')
</code></pre>

<p>it removes the attribute all together and therefore you will not be able to reset the form.</p>

<p><a href=""http://jsfiddle.net/mcgrailm/34vhs/"" rel=""noreferrer"">BAD DEMO jQuery 1.6</a>. I think this is broken. For 1.6 I am going to make a new post on that.</p>

<p><a href=""http://jsfiddle.net/mcgrailm/24FLg/"" rel=""noreferrer"">NEW WORKING DEMO jQuery 1.5.2</a> works in Chrome.</p>

<p>Both demos use</p>

<pre><code>$('#tc').click(function() {
    if ( $('#myCheckbox').attr('checked')) {
        $('#myCheckbox').attr('checked', false);
    } else {
        $('#myCheckbox').attr('checked', 'checked');
    }
});
</code></pre>
"
"5916151","325","<p>This is the correct way of checking and unchecking checkboxes with jQuery, as it is cross-platform standard, and <em>will</em> allow form reposts.</p>

<pre><code>$('.myCheckBox').each(function(){ this.checked = true; });

$('.myCheckBox').each(function(){ this.checked = false; });
</code></pre>

<p>By doing this, you are using JavaScript standards for checking and unchecking checkboxes, so any browser that properly implements the ""checked"" property of the checkbox element will run this code flawlessly. This <em>should</em> be all major browsers, but I am unable to test previous to Internet&nbsp;Explorer&nbsp;9.</p>

<p><strong>The Problem</strong> (jQuery 1.6):</p>

<p>Once a user clicks on a checkbox, that checkbox stops responding to the ""checked"" attribute changes.</p>

<p>Here is an example of the checkbox attribute failing to do the job after someone has <em>clicked</em> the checkbox (this happens in Chrome).</p>

<p><strong><a href=""http://jsfiddle.net/xixonia/zgcrB/"">Fiddle</a></strong></p>

<p><strong>The Solution:</strong></p>

<p>By using JavaScript's ""checked"" property on the <a href=""http://en.wikipedia.org/wiki/Document_Object_Model"">DOM</a> elements, we are able to solve the problem directly, instead of trying to manipulate the DOM into doing what we <em>want</em> it to do.</p>

<p><a href=""http://jsfiddle.net/xixonia/WnbNC/""><strong>Fiddle</strong></a></p>

<p>This plugin will alter the checked property of any elements selected by jQuery, and successfully check and uncheck checkboxes under all circumstances. So, while this may seem like an over-bearing solution, it will make your site's user experience better, and help prevent user frustration.</p>

<pre><code>(function( $ ) {
    $.fn.checked = function(value) {
        if(value === true || value === false) {
            // Set the value of the checkbox
            $(this).each(function(){ this.checked = value; });
        } 
        else if(value === undefined || value === 'toggle') {
            // Toggle the checkbox
            $(this).each(function(){ this.checked = !this.checked; });
        }

        return this;
    };
})( jQuery );
</code></pre>

<p>Alternatively, if you do not want to use a plugin, you can use the following code snippets:</p>

<pre><code>// Check
$(':checkbox').prop('checked', true);

// Un-check
$(':checkbox').prop('checked', false);

// Toggle
$(':checkbox').prop('checked', function (i, value) {
    return !value;
});
</code></pre>
"
"5956771","12","<p>Here's an example that includes <strong>initialising</strong> the show/hide to match the state of the checkbox when the <strong>page loads</strong>; taking account of the fact that firefox <em>remembers the state of checkboxes</em> when you refresh the page, but <em>won't</em> remember the state of the shown/hidden elements.</p>

<pre><code>$(function() {
    // initialise visibility when page is loaded
    $('tr.invoiceItemRow').toggle($('#showInvoiceItems').attr('checked'));
    // attach click handler to checkbox
    $('#showInvoiceItems').click(function(){ $('tr.invoiceItemRow').toggle(this.checked);})
});
</code></pre>

<p>(with help from other answers on this question)</p>
"
"24047170","2","<p>If you like an advise to not loss performance . <code>setTimeout</code> is your expected <code>sleep</code> . 
However , if you wanna a syntax where code  is ""divided in middle"" by <code>sleep</code>, we can do :  </p>

<pre><code>sleep=function(tm,fn){
   window.setTimeout(fn,tm);
}
</code></pre>

<p>then , perpare functions as following : </p>

<pre><code>var fnBeforeSleep=function(){

 //All codes before sleep

}  

var fnAfterSleep=function(){

 //All codes after sleep

}  
</code></pre>

<p>Then :</p>

<pre><code>fnBeforeSleep();
sleep(2000,
fnAfterSleep);
</code></pre>

<h1>YEP! ٍsyntactically,It is very close to :</h1>

<pre><code>fnBeforeSleep();
sleep(2000); 
fnAfterSleep();
</code></pre>
"
"12125326","8","<p>Better use the <a href=""http://en.wikipedia.org/wiki/JQuery"" rel=""noreferrer"">jQuery</a> way. To delay the ready event, first call <code>$.holdReady(true)</code>.
Example (<a href=""http://jqapi.com/#p=jQuery.holdReady"" rel=""noreferrer"">source</a>):</p>

<pre><code>$.holdReady(true);
$.getScript(""myplugin.js"", function() {
    $.holdReady(false);
});
</code></pre>
"
"5877077","17","<p>I would rather use <code>split()</code> instead of Regex for this operation:</p>

<pre><code>function getUrlParams() {
    var result = {};
    var params = (window.location.search.split('?')[1] || '').split('&amp;');
    for(var param in params) {
        if (params.hasOwnProperty(param)) {
            var paramParts = params[param].split('=');
            result[paramParts[0]] = decodeURIComponent(paramParts[1] || """");
        }
    }
    return result;
}
</code></pre>
"
"24401317","12","<p>Most of the answers here are misguided or at the very least outdated. There is no reason javascript has to be single threaded, and indeed it isnt't. Today all the mainstream browsers support workers, before this was the case other javascript runtimes like Rhino and Node.js supported multithreading.</p>

<p>'Javascript is single threaded' is not a valid answer. For example running a sleep function within a worker would not block any of the code running in the ui thread.</p>

<p>In newer runtimes supporting generators and yield, one could bring similar functionality to the sleep function in a single threaded environment:</p>

<pre><code>// This is based on the latest ES6 drafts.
// js 1.7+ (SpiderMonkey/Firefox 2+) syntax is slightly different

// run code you want to sleep here (ommit star if using js 1.7)
function* main(){
    for (var i = 0; i &lt; 10; i++) {
        // to sleep for 10 milliseconds 10 times in a row
        yield 10;
    }

    yield 5;
    console.log('I just slept 5 milliseconds!');
}

// resume the given generator after ms milliseconds
function resume(ms, generator){
    setTimeout(function(){
        // ommit .value if using js 1.7
        var nextSleep = generator.next().value;
        resume(nextSleep, generator);
    }, ms);
}

// initialize generator and get first sleep for recursive function
var
    generator = main(),
    firstSleep = generator.next().value;

// initialize recursive resume function
resume(firstSleep, generator);
</code></pre>

<p>This imitation of sleep is different from a true sleep function as it does not block the thread. It is simply sugar on top of javascript's current setTimeout function. This functionality type has been implemented in <a href=""http://taskjs.org/"" rel=""noreferrer"">Task.js</a> and should work today in Firefox.</p>
"
"12952256","84","<p>If you want a new array with the deleted positions removed, you can always delete the specific element and filter out the array. It might need an extension of the <a href=""http://www.tutorialspoint.com/javascript/array_filter.htm"" rel=""noreferrer"">array object</a> for browsers that don't implement the filter method, but in the long term it's easier since all you do is this:</p>

<pre><code>var my_array = [1, 2, 3, 4, 5, 6];
delete my_array[4];
console.log(my_array.filter(function(a){return typeof a !== 'undefined';}));
</code></pre>

<p>It should display <code>[1, 2, 3, 4, 6]</code>.</p>
"
"6106579","5","<p>I took <a href=""https://stackoverflow.com/questions/901115/get-querystring-values-in-javascript/3855394#3855394"">this answer</a> and added support for optionally passing the URL in as a parameter; falls back to window.location.search. Obviously this is useful for getting the query string parameters from URLs that are not the current page:</p>

<pre><code>(function($, undef) {
  $.QueryString = function(url) {
    var pairs, qs = null, index, map = {};
    if(url == undef){
      qs = window.location.search.substr(1);
    }else{
      index = url.indexOf('?');
      if(index == -1) return {};
      qs = url.substring(index+1);
    }
    pairs = qs.split('&amp;');
    if (pairs == """") return {};
    for (var i = 0; i &lt; pairs.length; ++i)
    {
      var p = pairs[i].split('=');
      if(p.length != 2) continue;
      map[p[0]] = decodeURIComponent(p[1].replace(/\+/g, "" ""));
    }
    return map;
  };
})(jQuery);
</code></pre>
"
"7106148","37","<p>Here's my edit to <a href=""https://stackoverflow.com/questions/901115/get-query-string-values-in-javascript/3855394#3855394"">this excellent answer</a> - with added ability to parse query strings with keys without values.</p>

<pre><code>var url = 'http://sb.com/reg/step1?param';
var qs = (function(a) {
    if (a == """") return {};
    var b = {};
    for (var i = 0; i &lt; a.length; ++i) {
        var p=a[i].split('=', 2);
        if (p[1]) p[1] = decodeURIComponent(p[1].replace(/\+/g, "" ""));
        b[p[0]] = p[1];
    }
    return b;
})((url.split('?'))[1].split('&amp;'));
</code></pre>

<p><b>IMPORTANT!</b> The parameter for that function in the last line is different. It's just an example of how one can pass an arbitrary URL to it. You can use last line from Bruno's answer to parse the current URL.</p>

<p>So what exactly changed? With url <code>http://sb.com/reg/step1?param=</code> results will be same. But with url <code>http://sb.com/reg/step1?param</code> Bruno's solution returns an object without keys, while mine returns an object with key <code>param</code> and <code>undefined</code> value.</p>
"
"6438222","2019","<p>Use jQuery's <a href=""http://api.jquery.com/is/"" rel=""noreferrer"">is()</a> function:</p>

<pre><code>if($(""#isAgeSelected"").is(':checked'))
    $(""#txtAge"").show();  // checked
else
    $(""#txtAge"").hide();  // unchecked
</code></pre>
"
"9229385","254","<blockquote>
  <p><strong><em>UPDATED!</em></strong>, Scroll Down</p>
</blockquote>

<p>If you want something simple pretty to the end-user ... <em><code>Also, fixed a small suffix issue in the first version below. Now properly returns suffix.</code></em></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var objToday = new Date(),
	weekday = new Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'),
	dayOfWeek = weekday[objToday.getDay()],
	domEnder = function() { var a = objToday; if (/1/.test(parseInt((a + """").charAt(0)))) return ""th""; a = parseInt((a + """").charAt(1)); return 1 == a ? ""st"" : 2 == a ? ""nd"" : 3 == a ? ""rd"" : ""th"" }(),
	dayOfMonth = today + ( objToday.getDate() &lt; 10) ? '0' + objToday.getDate() + domEnder : objToday.getDate() + domEnder,
	months = new Array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'),
	curMonth = months[objToday.getMonth()],
	curYear = objToday.getFullYear(),
	curHour = objToday.getHours() &gt; 12 ? objToday.getHours() - 12 : (objToday.getHours() &lt; 10 ? ""0"" + objToday.getHours() : objToday.getHours()),
	curMinute = objToday.getMinutes() &lt; 10 ? ""0"" + objToday.getMinutes() : objToday.getMinutes(),
	curSeconds = objToday.getSeconds() &lt; 10 ? ""0"" + objToday.getSeconds() : objToday.getSeconds(),
	curMeridiem = objToday.getHours() &gt; 12 ? ""PM"" : ""AM"";
var today = curHour + "":"" + curMinute + ""."" + curSeconds + curMeridiem + "" "" + dayOfWeek + "" "" + dayOfMonth + "" of "" + curMonth + "", "" + curYear;

document.getElementsByTagName('h1')[0].textContent = today;</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;h1&gt;&lt;/h1&gt;</code></pre>
</div>
</div>
</p>

<blockquote>
  <p><strong>UBBER UPDATE</strong> After much procrastination, I've finally <a href=""https://github.com/JDMcKinstry/JavaScriptDateFormat"" rel=""noreferrer""><strong>GitHubbed</strong></a> and updated this with the final solution I've been using for myself. It's even had some last-minute edits to make it sweeter! If you're looking for the old <a href=""http://jsfiddle.net/SpYk3/rYzAY/"" rel=""noreferrer"">jsFiddle, please see this</a>.</p>
</blockquote>

<p>This update comes in <s>2</s> flavors, still relatively small, though not as small as my above, original answer. If you want extremely small, go with that. <br /> Also Note: This is still less bloated than moment.js. While moment.js is nice, imo, it has too many secular methods, which require learning moment as if it were a language. Mine here uses the same common format as <a href=""http://php.net/manual/en/function.date.php"" rel=""noreferrer"">PHP: date</a>.</p>

<h3>Quick Links</h3>

<ul>
<li><a href=""https://cdn.rawgit.com/JDMcKinstry/JavaScriptDateFormat/master/Date.format.min.js"" rel=""noreferrer"">Date.format.min.js</a> 5.08 KB</li>
<li><a href=""https://cdn.rawgit.com/JDMcKinstry/JavaScriptDateFormat/master/dateFormat.min.js"" rel=""noreferrer"">dateFormat.min.js</a> 4.16 KB</li>
</ul>

<blockquote>
  <p><strong>Flavor 1 <a href=""http://jsfiddle.net/SpYk3/smdz6d43/"" rel=""noreferrer""><code>new Date().format(String)</code></a></strong>
  My Personal Fav. I know the taboo but works great on the Date Object. Just be aware of any other mods you may have to the Date Object.</p>
</blockquote>

<pre><code>//  use as simple as
new Date().format('m-d-Y h:i:s');   //  07-06-2016 06:38:34
</code></pre>

<blockquote>
  <p><strong>Flavor 2 <a href=""http://jsfiddle.net/SpYk3/tcqpw5d7/"" rel=""noreferrer""><code>dateFormat(Date, String)</code></a></strong>
  More traditional all-in-one method. Has all the ability of the previous, but is called via the method with Date param.</p>
</blockquote>

<pre><code>//  use as simple as
dateFormat(new Date(), 'm-d-Y h:i:s');  //  07-06-2016 06:38:34
</code></pre>

<blockquote>
  <p><strong>BONUS Flavor (requires jQuery) <a href=""https://github.com/JDMcKinstry/jQuery-Date"" rel=""noreferrer""><code>$.date(Date, String)</code></a></strong>
  This contains much more than just a simple <code>format</code> option. It extends the base Date object and includes methods such as <code>addDays</code>. For more information, please see the <a href=""https://github.com/JDMcKinstry/jQuery-Date"" rel=""noreferrer""><em>Git</em></a>.</p>
</blockquote>

<p>In this mod, the format characters are inspired by <a href=""http://php.net/manual/en/function.date.php"" rel=""noreferrer"">PHP: date</a>. For a complete list, please see my <a href=""https://github.com/JDMcKinstry/JavaScriptDateFormat/blob/master/README.md"" rel=""noreferrer"">README</a></p>

<p>This mod also has a much longer list of pre-made formats. To use a premade format, simply enter its key name. <code>dateFormat(new Date(), 'pretty-a');</code></p>

<ul>
<li>'compound'

<ul>
<li>'commonLogFormat' == 'd/M/Y:G:i:s'</li>
<li>'exif' == 'Y:m:d G:i:s'</li>
<li>'isoYearWeek' == 'Y\\WW'</li>
<li>'isoYearWeek2' == 'Y-\\WW'</li>
<li>'isoYearWeekDay' == 'Y\\WWj'</li>
<li>'isoYearWeekDay2' == 'Y-\\WW-j'</li>
<li>'mySQL' == 'Y-m-d h:i:s'</li>
<li>'postgreSQL' == 'Y.z'</li>
<li>'postgreSQL2' == 'Yz'</li>
<li>'soap' == 'Y-m-d\\TH:i:s.u'</li>
<li>'soap2' == 'Y-m-d\\TH:i:s.uP'</li>
<li>'unixTimestamp' == '@U'</li>
<li>'xmlrpc' == 'Ymd\\TG:i:s'</li>
<li>'xmlrpcCompact' == 'Ymd\\tGis'</li>
<li>'wddx' == 'Y-n-j\\TG:i:s'</li>
</ul></li>
<li>'constants'

<ul>
<li>'AMERICAN' == 'F j Y'</li>
<li>'AMERICANSHORT' == 'm/d/Y'</li>
<li>'AMERICANSHORTWTIME' == 'm/d/Y h:i:sA'</li>
<li>'ATOM' == 'Y-m-d\\TH:i:sP'</li>
<li>'COOKIE' == 'l d-M-Y H:i:s T'</li>
<li>'EUROPEAN' == 'j F Y'</li>
<li>'EUROPEANSHORT' == 'd.m.Y'</li>
<li>'EUROPEANSHORTWTIME' == 'd.m.Y H:i:s'</li>
<li>'ISO8601' == 'Y-m-d\\TH:i:sO'</li>
<li>'LEGAL' == 'j F Y'</li>
<li>'RFC822' == 'D d M y H:i:s O'</li>
<li>'RFC850' == 'l d-M-y H:i:s T'</li>
<li>'RFC1036' == 'D d M y H:i:s O'</li>
<li>'RFC1123' == 'D d M Y H:i:s O'</li>
<li>'RFC2822' == 'D d M Y H:i:s O'</li>
<li>'RFC3339' == 'Y-m-d\\TH:i:sP'</li>
<li>'RSS' == 'D d M Y H:i:s O'</li>
<li>'W3C' == 'Y-m-d\\TH:i:sP'</li>
</ul></li>
<li>'pretty'

<ul>
<li>'pretty-a' == 'g:i.sA l jS \\o\\f F Y'</li>
<li>'pretty-b' == 'g:iA l jS \\o\\f F Y'</li>
<li>'pretty-c' == 'n/d/Y g:iA'</li>
<li>'pretty-d' == 'n/d/Y'</li>
<li>'pretty-e' == 'F jS - g:ia'</li>
<li>'pretty-f' == 'g:iA'</li>
</ul></li>
</ul>

<p><em>As you may notice, you can use double <code>\</code> to escape a character.</em></p>

<hr>
"
"7786438","8","<p>The following code will create an object which has two methods:</p>

<ol>
<li><code>isKeyExist</code>: Check if a particular parameter exist</li>
<li><code>getValue</code>: Get the value of a particular parameter.</li>
</ol>

<p>&nbsp;</p>

<pre><code>var QSParam = new function() {
       var qsParm = {};
       var query = window.location.search.substring(1);
       var params = query.split('&amp;');
       for (var i = 0; i &lt; params.length; i++) {
           var pos = params[i].indexOf('=');
           if (pos &gt; 0) {
               var key = params[i].substring(0, pos);
               var val = params[i].substring(pos + 1);
               qsParm[key] = val;
           }
       }
       this.isKeyExist = function(query){
           if(qsParm[query]){
               return true;
           }
           else{
              return false;
           }
       };
       this.getValue = function(query){
           if(qsParm[query])
           {
               return qsParm[query];
           }
           throw ""URL does not contain query ""+ query;
       }
};
</code></pre>
"
"8736060","8","<p>Try this:</p>

<pre><code>String.prototype.getValueByKey = function(k){
    var p = new RegExp('\\b'+k+'\\b','gi');
    return this.search(p) != -1 ? decodeURIComponent(this.substr(this.search(p)+k.length+1).substr(0,this.substr(this.search(p)+k.length+1).search(/(&amp;|;|$)/))) : """";
};
</code></pre>

<p>Then call it like so:</p>

<pre><code>if(location.search != """") location.search.getValueByKey(""id"");
</code></pre>

<p>You can use this for <strong>cookies</strong> also:</p>

<pre><code>if(navigator.cookieEnabled) document.cookie.getValueByKey(""username"");
</code></pre>

<p>This only works for strings that have <code>key=value[&amp;|;|$]</code>... will not work on objects/arrays.</p>

<p>If you <strong>don't</strong> want to use <strong>String.prototype</strong>...
move it to a function and pass the string as an argument</p>
"
"8812157","65","<p>I like <a href=""https://stackoverflow.com/a/3867610/632117"">Ryan Phelan's solution</a>. But I don't see any point of extending jQuery for that? There is no usage of jQuery functionality.</p>

<p>On the other hand, I like the built-in function in Google Chrome: window.location.getParameter.</p>

<p>So why not to use this? Okay, other browsers don't have. So let's create this function if it does not exist:</p>

<pre><code>if (!window.location.getParameter ) {
  window.location.getParameter = function(key) {
    function parseParams() {
        var params = {},
            e,
            a = /\+/g,  // Regex for replacing addition symbol with a space
            r = /([^&amp;=]+)=?([^&amp;]*)/g,
            d = function (s) { return decodeURIComponent(s.replace(a, "" "")); },
            q = window.location.search.substring(1);

        while (e = r.exec(q))
            params[d(e[1])] = d(e[2]);

        return params;
    }

    if (!this.queryStringParams)
        this.queryStringParams = parseParams(); 

    return this.queryStringParams[key];
  };
}
</code></pre>

<p>This function is more or less from Ryan Phelan, but it is wrapped differently: clear name and no dependencies of other javascript libraries. <a href=""http://sharepointkunskap.wordpress.com/2012/01/11/get-url-parameters-with-javascript/"" rel=""noreferrer"">More about this function on my blog</a>.</p>
"
"9199617","9","<pre><code>function getUrlVar(key){
    var result = new RegExp(key + ""=([^&amp;]*)"", ""i"").exec(window.location.search); 
    return result &amp;&amp; unescape(result[1]) || """"; 
}
</code></pre>

<p><a href=""https://gist.github.com/1771618"" rel=""noreferrer"">https://gist.github.com/1771618</a></p>
"
"9362358","58","<p>Keep it simple in plain JavaScript code:</p>

<pre><code>function qs(key) {
    var vars = [], hash;
    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&amp;');
    for(var i = 0; i &lt; hashes.length; i++)
    {
        hash = hashes[i].split('=');
        vars.push(hash[0]);
        vars[hash[0]] = hash[1];
    }
    return vars[key];
}
</code></pre>

<p>Call it from anywhere in the JavaScript code:</p>

<pre><code>var result = qs('someKey');
</code></pre>
"
"25135553","2","<p>Embrace the asyncronous nature of javascript!</p>

<p>All of the following will return immediately but have a single place for putting code you want to run after something has happened.  </p>

<p>The methods I've outlined here are all for different use cases and are roughly ordered in terms of their complexity.</p>

<p>The different things are as follows:</p>

<ul>
<li>Waiting for some condition to become true</li>
<li>Waiting for a set of methods to finish (in any order) before calling a single callback</li>
<li>Running a series of asyncronous methods with shared state in a particular order before calling a callback</li>
</ul>

<p><strong>Wait</strong></p>

<p>Waiting to see if some condition is true is usedful where there is no accessible callback to tell you when something has finished executing.</p>

<p>This is a pretty basic implementation that assumes that the condition will become true at some point.  With a few tweaks it could be expanded to be even more useful (eg by setting a call limit).  (I only wrote this one yesterday!)</p>

<pre><code>function waitFor(predicate, successCallback) {
    setTimeout(function () {
        var result = predicate();
        if (result !== undefined)
            successCallback(result);
        else
            waitFor(predicate, successCallback);
    }, 100);
}
</code></pre>

<p>calling code:</p>

<pre><code>    beforeEach(function (done) {
        selectListField('A field');

        waitFor(function () {
            var availableOptions = stores.scrapeStore(optionStore);
            if (availableOptions.length !== 0)
                return availableOptions;
        }, done);
    });
</code></pre>

<p>Here I'm calling something which loads an extjs 'store' and waiting til the store contains something before continuing (the beforeEach is a jasmine test framework thing).</p>

<p><strong>Wait for several things to complete</strong></p>

<p>Another thing I needed to do was run a single callback after a load of different methods finished.  You can do that like this:</p>

<pre><code>createWaitRunner = function (completionCallback) {
    var callback = completionCallback;
    var completionRecord = [];
    var elements = 0;

    function maybeFinish() {
        var done = completionRecord.every(function (element) {
            return element === true
        });

        if (done)
            callback();
    }

    return {
        getNotifier: function (func) {
            func = func || function (){};

            var index = elements++;
            completionRecord[index] = false;

            return function () {
                func.applyTo(arguments);
                completionRecord[index] = true;
                maybeFinish();
            }
        }
    }
};
</code></pre>

<p>calling code:</p>

<pre><code>    var waiter = createWaitRunner(done);

    filterList.bindStore = waiter.getNotifier();
    includeGrid.reconfigure = waiter.getNotifier(function (store) {
        includeStore = store;
    });
    excludeGrid.reconfigure = waiter.getNotifier(function (store) {
        excludeStore = store;
    });
</code></pre>

<p>You either just wait for the notifications or can also wrap other functions which use the values passed to the function.  When all the methods are called then <code>done</code> will be run.</p>

<p><strong>Running asynchronous methods in order</strong></p>

<p>I've used a different approach when I had a series of asynchronous methods to call in a row (again in tests).  This is somewhat similar to something you can get in <a href=""https://github.com/caolan/async"" rel=""nofollow"">the Async library</a> - series does about the same thing and I had a little read of that library first to see if it did what I wanted.  I think mine has a nicer api for working with tests though (+ it was fun to implement!).</p>

<pre><code>//provides a context for running asyncronous methods syncronously
//the context just provides a way of sharing bits of state
//use run to execute the methods.  These should be methods that take a callback and optionally the context as arguments
//note the callback is provided first so you have the option of just partially applying your function to the arguments you want
//instead of having to wrap even simple functions in another function

//when adding steps you can supply either just a function or a variable name and a function
//if you supply a variable name then the output of the function (which should be passed into the callback) will be written to the context
createSynchronisedRunner = function (doneFunction) {
    var context = {};

    var currentPosition = 0;
    var steps = [];

    //this is the loop. it is triggered again when each method finishes
    var runNext = function () {
        var step = steps[currentPosition];
        step.func.call(null,
                       function (output) {
                           step.outputHandler(output);
                           currentPosition++;

                           if (currentPosition === steps.length)
                               return;

                           runNext();
                       }, context);
    };

    var api = {};

    api.addStep = function (firstArg, secondArg) {
        var assignOutput;
        var func;

        //overloads
        if (secondArg === undefined) {
            assignOutput = function () {
            };
            func = firstArg;
        }
        else {
            var propertyName = firstArg;
            assignOutput = function (output) {
                context[propertyName] = output;
            };
            func = secondArg;
        }

        steps.push({
                       func: func,
                       outputHandler: assignOutput
                   });
    };

    api.run = function (completedAllCallback) {
        completedAllCallback = completedAllCallback || function(){};

        var lastStep = steps[steps.length - 1];
        var currentHandler = lastStep.outputHandler;
        lastStep.outputHandler = function (output) {
            currentHandler(output);
            completedAllCallback(context);
            doneFunction();
        };

        runNext();
    };

    //this is to support more flexible use where you use a done function in a different scope to initialisation
    //eg the done of a test but create in a beforeEach
    api.setDoneCallback = function (done) {
        doneFunction = done;
    };

    return api;
};
</code></pre>

<p>calling code:</p>

<pre><code>beforeAll(function (done) {
    var runner = createSynchronisedRunner(done);
    runner.addStep('attachmentInformation', testEventService.getAttachmentCalled.partiallyApplyTo('cat eating lots of memory.jpg'));
    runner.addStep('attachment', getAttachment.partiallyApplyTo(""cat eating lots of memory.jpg""));
    runner.addStep('noAttachment', getAttachment.partiallyApplyTo(""somethingElse.jpg""));
    runner.run(function (context) {
        attachment = context.attachment;
        noAttachment = context.noAttachment;
    });
});
</code></pre>

<p>PartiallyApplyTo here is basically a renamed version of Doug Crockford's implementation of Curry.  A lot of the stuff I'm working with takes a callback as the final argument so simple calls can be done like this rather than having to wrap everything with an extra func.</p>

<p>Hopefully some of the ideas in there might be useful to people.</p>
"
"26725103","29","<p>Here's a simple solution using a synchronous XMLHttpRequest:</p>

<pre><code>function sleep(n){
  var request = new XMLHttpRequest();
  request.open('GET', '/sleep.php?n=' + n, false);  // `false` makes the request synchronous
  request.send(null);
}
</code></pre>

<p>contents of sleep.php:</p>

<pre><code>&lt;?php sleep($_GET['n']);
</code></pre>

<p>Now call it with:
sleep(5);</p>
"
"7669423","70","<p>Using the <code>Click</code> event handler for the checkbox property is unreliable, as the <code>checked</code> property can change during the execution of the event handler itself!</p>

<p>Ideally, you'd want to put your code into a <code>change</code> event handler such as it is fired every time the value of the check box is changed (independent of <em>how</em> it's done so).</p>

<pre><code>$('#isAgeSelected').bind('change', function () {

   if ($(this).is(':checked'))
     $(""#txtAge"").show();
   else
     $(""#txtAge"").hide();
});
</code></pre>
"
"27762447","8","<p>A lot of the answers don't (directly) answer the question, and neither does this one...</p>

<p>Here's my two cents (or functions):</p>

<p>If you want less clunky functions than <code>setTimeout</code> and <code>setInterval</code>, you can wrap them in functions that just reverse the order of the arguments and give them nice names:</p>

<pre><code>function after(ms, fn){ setTimeout(fn, ms); }
function every(ms, fn){ setInterval(fn, ms); }
</code></pre>

<p>CoffeeScript versions:</p>

<pre><code>after = (ms, fn)-&gt; setTimeout fn, ms
every = (ms, fn)-&gt; setInterval fn, ms
</code></pre>

<p>You can then use them nicely with anonymous functions:</p>

<pre><code>after(1000, function(){
    console.log(""it's been a second"");
    after(1000, function(){
        console.log(""it's been another second"");
    });
});
</code></pre>

<p>Now it reads easily as ""after N milliseconds, ..."" (or ""every N milliseconds, ..."")</p>
"
"7886844","32","<p>Here is code for checked and unchecked with a button:</p>

<pre><code>var set=1;
var unset=0;
jQuery( function() {
    $( '.checkAll' ).live('click', function() {
        $( '.cb-element' ).each(function () {
            if(set==1){ $( '.cb-element' ).attr('checked', true) unset=0; }
            if(set==0){ $( '.cb-element' ).attr('checked', false); unset=1; }
        });
        set=unset;
    });
});
</code></pre>

<p>Update: Here is the same code block using the newer Jquery 1.6+ prop method, which replaces attr:</p>

<pre><code>var set=1;
var unset=0;
jQuery( function() {
    $( '.checkAll' ).live('click', function() {
        $( '.cb-element' ).each(function () {
            if(set==1){ $( '.cb-element' ).prop('checked', true) unset=0; }
            if(set==0){ $( '.cb-element' ).prop('checked', false); unset=1; }
        });
        set=unset;
    });
});
</code></pre>
"
"37134649","6","<p><a href=""https://i.stack.imgur.com/nChy7.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/nChy7.png"" alt=""enter image description here""></a></p>

<p><em>To Empty a Current memory location of an array use: <code>'myArray.length = 0'</code> or <code>'myArray.pop() UN-till its length is 0'</code></em></p>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length"" rel=""noreferrer""><code>length</code></a> : You can set the length property to truncate an array at any time. When you extend an array by changing its length property, the number of actual elements increases.</li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop"" rel=""noreferrer""><code>pop()</code></a>  : The pop method removes the <strong>last</strong> element from an array and returns that returns the removed value.</li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift"" rel=""noreferrer""><code>shift()</code></a> : The shift method removes the element at the <strong>zeroeth index</strong> and shifts the values at consecutive indexes down, then returns the removed value.</li>
</ul>

<p>Example:</p>

<pre><code>var arr = ['77'];
arr.length = 20;
console.log(""Increasing : "", arr); // (20) [""77"", empty × 19]
arr.length = 12;
console.log(""Truncating : "", arr); // (12) [""77"", empty × 11]

var mainArr = new Array();
mainArr = ['1', '2', '3', '4'];

var refArr = mainArr;
console.log('Current', mainArr, 'Refered', refArr);

refArr.length = 3;
console.log('Length: ~ Current', mainArr, 'Refered', refArr);

mainArr.push('0');
console.log('Push to the End of Current Array Memory Location \n~ Current', mainArr, 'Refered', refArr);

mainArr.poptill_length(0);
console.log('Empty Array \n~ Current', mainArr, 'Refered', refArr);

Array.prototype.poptill_length = function (e) {
  while (this.length) {
    if( this.length == e ) break;

    console.log('removed last element:', this.pop());
  }
};
</code></pre>

<hr>

<ul>
<li><p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"" rel=""noreferrer""><code>new Array() | []</code></a> <em>Create an Array with new memory location by using <code>Array constructor</code> or <code>array literal</code>.</em></p>

<pre><code>mainArr = []; // a new empty array is addressed to mainArr.

var arr = new Array('10'); // Array constructor
arr.unshift('1'); // add to the front
arr.push('15'); // add to the end
console.log(""After Adding : "", arr); // [""1"", ""10"", ""15""]

arr.pop(); // remove from the end
arr.shift(); // remove from the front
console.log(""After Removing : "", arr); // [""10""]

var arrLit = ['14', '17'];
console.log(""array literal « "", indexedItem( arrLit ) ); // {0,14}{1,17}

function indexedItem( arr ) {
    var indexedStr = """";
    arr.forEach(function(item, index, array) {
        indexedStr += ""{""+index+"",""+item+""}"";
        console.log(item, index);
    });
    return indexedStr;
}
</code></pre></li>
<li><p><em><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice"" rel=""noreferrer""><code>slice()</code></a> : By using slice function we get an shallow copy of elements from the original array, with new memory address, So that any modification on cloneArr will not affect to an actual|original array.</em></p>

<pre><code>var shallowCopy = mainArr.slice(); // this is how to make a copy

var cloneArr = mainArr.slice(0, 3); 
console.log('Main', mainArr, '\tCloned', cloneArr);

cloneArr.length = 0; // Clears current memory location of an array.
console.log('Main', mainArr, '\tCloned', cloneArr);
</code></pre></li>
</ul>
"
"27870155","3","<p>In case you really need a sleep() just to test something. But be aware that it'll crash the browser most of the times while debuggin - probably that's why you need it anyway. In production mode I'll comment out this function.</p>

<pre><code>function pauseBrowser(millis) {
    var date = Date.now();
    var curDate = null;
    do {
        curDate = Date.now();
    } while (curDate-date &lt; millis);
}
</code></pre>

<p>Don't use new Date() in the loop, unless you want to waste memory, processing power, battery and possibly the lifetime of your device.</p>
"
"9402569","7","<p>Here's my own take on this. This first function decodes a URL string into an object of name/value pairs:</p>

<pre><code>url_args_decode = function (url) {
  var args_enc, el, i, nameval, ret;
  ret = {};
  // use the DOM to parse the URL via an 'a' element
  el = document.createElement(""a"");
  el.href = url;
  // strip off initial ? on search and split
  args_enc = el.search.substring(1).split('&amp;');
  for (i = 0; i &lt; args_enc.length; i++) {
    // convert + into space, split on =, and then decode 
    args_enc[i].replace(/\+/g, ' ');
    nameval = args_enc[i].split('=', 2);
    ret[decodeURIComponent(nameval[0])]=decodeURIComponent(nameval[1]);
  }
  return ret;
};
</code></pre>

<p>And as an added bonus, if you change some of the args, you can use this second function to put the array of args back into the URL string:</p>

<pre><code>url_args_replace = function (url, args) {
  var args_enc, el, name;
  // use the DOM to parse the URL via an 'a' element
  el = document.createElement(""a"");
  el.href = url;
  args_enc = [];
  // encode args to go into url
  for (name in args) {
    if (args.hasOwnProperty(name)) {
      name = encodeURIComponent(name);
      args[name] = encodeURIComponent(args[name]);
      args_enc.push(name + '=' + args[name]);
    }
  }
  if (args_enc.length &gt; 0) {
    el.search = '?' + args_enc.join('&amp;');
  } else {
    el.search = '';
  }
  return el.href;
};
</code></pre>
"
"14822579","121","<p>Here's a string prototype function based on the accepted answer:</p>

<pre><code>String.prototype.replaceAll = function (find, replace) {
    var str = this;
    return str.replace(new RegExp(find, 'g'), replace);
};
</code></pre>

<p><strong>EDIT</strong> </p>

<p>If your <code>find</code> will contain special characters then you need to escape them:</p>

<pre><code>String.prototype.replaceAll = function (find, replace) {
    var str = this;
    return str.replace(new RegExp(find.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&amp;'), 'g'), replace);
};
</code></pre>

<p>Fiddle: <a href=""http://jsfiddle.net/cdbzL/"">http://jsfiddle.net/cdbzL/</a></p>
"
"15275614","6","<p>Now, I may be totally misguided, but here's what I've recently started doing... 
Start and end your JavaScript files with a carriage return, place in the PHP script, followed by one more carriage return.
The JavaScript comment ""//"" is ignored by PHP so the inclusion happens anyway. The purpose for the carriage returns is so that the first line of your included JavaScript isn't commented out.</p>

<p>Technically, you don't need the comment, but it posts errors in <a href=""http://en.wikipedia.org/wiki/Adobe_Dreamweaver"" rel=""noreferrer"">Dreamweaver</a> that annoy me. If you're scripting in an IDE that doesn't post errors, you shouldn't need the comment or the carriage returns.</p>

<pre><code>\n
//&lt;?php require_once(""path/to/javascript/dependency.js""); ?&gt;

function myFunction(){
    // stuff
}
\n
</code></pre>
"
"28364162","7","<p>If you're on node.js, you can have a look at <a href=""https://www.npmjs.com/package/fibers"" rel=""noreferrer"">fibers</a> – a native C extension to node, a kinda-multi-threading simulation.</p>

<p>It allows you to do a real <code>sleep</code> in a way which is blocking execution in a fiber, but it's non-blocking in the main thread and other fibers.</p>

<p>Here's an example fresh from their own readme:</p>

<pre><code>// sleep.js

var Fiber = require('fibers');

function sleep(ms) {
    var fiber = Fiber.current;
    setTimeout(function() {
        fiber.run();
    }, ms);
    Fiber.yield();
}

Fiber(function() {
    console.log('wait... ' + new Date);
    sleep(1000);
    console.log('ok... ' + new Date);
}).run();
console.log('back in main');
</code></pre>

<p>– and the results are:</p>

<pre><code>$ node sleep.js
wait... Fri Jan 21 2011 22:42:04 GMT+0900 (JST)
back in main
ok... Fri Jan 21 2011 22:42:05 GMT+0900 (JST)
</code></pre>
"
"15381347","37","<p><strong>Update:</strong> This method is recommended only if you cannot use ECMAScript 2015 (formerly known as ES6). If you can use it, other answers here provide much neater implementations.</p>

<hr>

<p><a href=""https://gist.github.com/zykadelic/5069236"" rel=""noreferrer"">This gist here</a> will solve your problem, and also deletes all occurrences of the argument instead of just 1 (or a specified value).</p>

<pre><code>Array.prototype.destroy = function(obj){
    // Return null if no objects were found and removed
    var destroyed = null;

    for(var i = 0; i &lt; this.length; i++){

        // Use while-loop to find adjacent equal objects
        while(this[i] === obj){

            // Remove this[i] and store it within destroyed
            destroyed = this.splice(i, 1)[0];
        }
    }

    return destroyed;
}
</code></pre>

<p>Usage:</p>

<pre><code>var x = [1, 2, 3, 3, true, false, undefined, false];

x.destroy(3);         // =&gt; 3
x.destroy(false);     // =&gt; false
x;                    // =&gt; [1, 2, true, undefined]

x.destroy(true);      // =&gt; true
x.destroy(undefined); // =&gt; undefined
x;                    // =&gt; [1, 2]

x.destroy(3);         // =&gt; null
x;                    // =&gt; [1, 2]
</code></pre>
"
"29252006","-4","<pre><code>&lt;html&gt;
    &lt;head&gt;
        &lt;script lang=""javascript""&gt;

            function nullcheck()
            {
                var n = ""fdgdfg"";
                var e = n.length;
                if (e == 0)
                {
                    return true;
                }
                else
                {
                    alert(""success"");
                    return false;
                }
            }
        &lt;/script&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;button type=""submit"" value=""add"" onclick=""nullcheck()""&gt;&lt;/button&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
"
"9181943","18","<p>I verified in Firefox 9.0.1 that the following works for catching the state of a checkbox post change:</p>

<pre><code>$(""#mycheckbox"").change(function() {
    var value = $(this).prop(""checked"") ? 'true' : 'false';                     
    alert(value);
});
</code></pre>
"
"10733654","21","<p>This one works fine. Regular expressions in some of the other answers introduce unnecessary overhead.</p>
<pre><code>function getQuerystring(key) {
    var query = window.location.search.substring(1);
    var vars = query.split(&quot;&amp;&quot;);
    for (var i = 0; i &lt; vars.length; i++) {
        var pair = vars[i].split(&quot;=&quot;);
        if (pair[0] == key) {
            return pair[1];
        }
    }
}
</code></pre>
<p>taken from <a href=""http://forums.asp.net/t/1771251.aspx/1"" rel=""nofollow noreferrer"">here</a></p>
"
"11086014","24","<p>If you ever run across code written purely for Internet&nbsp;Explorer you might see this:</p>

<pre><code>var e = document.getElementById(""ddlViewBy"");
var strUser = e.options(e.selectedIndex).value;
</code></pre>

<p>Running the above in Firefox et al will give you an 'is not a function' error, because Internet&nbsp;Explorer  allows you to get away with using () instead of []:</p>

<pre><code>var e = document.getElementById(""ddlViewBy"");
var strUser = e.options[e.selectedIndex].value;
</code></pre>

<p>The correct way is to use square brackets.</p>
"
"30751362","5","<p>The <a href=""https://en.wikipedia.org/wiki/Underscore.js"" rel=""nofollow noreferrer"">Underscore.js</a> JavaScript library, <a href=""http://underscorejs.org/"" rel=""nofollow noreferrer"">http://underscorejs.org/</a>, provides a very useful <code>_.isEmpty()</code> function for checking for empty strings and other empty objects.</p>

<p>Reference: <a href=""http://underscorejs.org/#isEmpty"" rel=""nofollow noreferrer"">http://underscorejs.org/#isEmpty</a></p>

<blockquote>
  <p><strong>isEmpty</strong>  <code>_.isEmpty(object)</code> <br/>
  Returns true if an enumerable object contains no values (no enumerable own-properties). For strings and array-like objects _.isEmpty checks if the length property is 0.</p>
  
  <p><code>_.isEmpty([1, 2, 3]);</code> <br/>
   => false</p>
  
  <p><code>_.isEmpty({});</code> <br/>
  => true</p>
</blockquote>

<p>Other very useful Underscore.js functions include:</p>

<ul>
<li><a href=""http://underscorejs.org/#isNull"" rel=""nofollow noreferrer"">http://underscorejs.org/#isNull</a>  <code>_.isNull(object)</code></li>
<li><a href=""http://underscorejs.org/#isUndefined"" rel=""nofollow noreferrer"">http://underscorejs.org/#isUndefined</a></li>
<li><code>_.isUndefined(value)</code></li>
<li><a href=""http://underscorejs.org/#has"" rel=""nofollow noreferrer"">http://underscorejs.org/#has</a> <code>_.has(object, key)</code></li>
</ul>
"
"31319762","11","<p>I would encapsulate setTimeOut in a Promise for code consistency with other asynchronous tasks : Demo in <a href=""http://jsfiddle.net/a4gjhpgd/"" rel=""noreferrer"">Fiddle</a></p>

<pre><code>function sleep(ms)
{
    return(new Promise(function(resolve, reject) {        
        setTimeout(function() { resolve(); }, ms);        
    }));    
}
</code></pre>

<p>Used like that :</p>

<pre><code>sleep(2000).then(function() { 
   // Do something
});
</code></pre>

<p>It is easy to remember syntax if you used to use Promises.</p>
"
"32323604","0","<p>To summarize (like it has been said in previous answers):</p>

<p>There is no built-in sleep function in JavaScript. You should use <a href=""https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout"" rel=""nofollow"">setTimeout</a> or <a href=""https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval"" rel=""nofollow"">setInterval</a> to achieve a similar effect.</p>

<p>If you really wanted to, you could simulate sleep functionality with a for loop such as the one shown in the original question, but that would make your CPU work like crazy. Inside a Web Worker an alternative solution would be to make a synchronous <code>XMLHttpRequest</code> to a non-responsive IP and set a proper timeout. This would avoid the CPU utilization problem. Here's a code example:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Works only inside a web worker

function sleep(milliseconds) {
	var req = new XMLHttpRequest();
	req.open(""GET"", ""http://192.0.2.0/"", false);
	req.timeout = milliseconds;
	try {
		req.send();
	} catch (ex) {
		
	}
}

console.log('Sleeping for 1 second...');
sleep(1000);
console.log('Slept!');

console.log('Sleeping for 5 seconds...')
sleep(5000);
console.log('Slept!');</code></pre>
</div>
</div>
</p>
"
"11290751","6","<p>The following function returns an object version of your queryString. 
You can simply write <code>obj.key1</code> and  <code>obj.key2</code> to access values of <code>key1</code> and <code>key2</code> in parameter.</p>

<pre><code>function getQueryStringObject()
{
    var querystring = document.location.search.replace('?','').split( '&amp;' );
    var objQueryString={};
    var key="""",val="""";
    if(typeof querystring == 'undefined')
    {
        return (typeof querystring);
    }
    for(i=0;i&lt;querystring.length;i++)
    {
        key=querystring[i].split(""="")[0];
        val=querystring[i].split(""="")[1];
        objQueryString[key] = val;
    }
    return objQueryString;
}
</code></pre>

<p>And to use this function you can write</p>

<pre><code>var obj= getQueryStringObject();
alert(obj.key1);
</code></pre>
"
"11677514","37","<p>I like <a href=""http://jquery-howto.blogspot.co.uk/2009/09/get-url-parameters-values-with-jquery.html"">this one</a> (taken from jquery-howto.blogspot.co.uk):</p>

<pre><code>// get an array with all querystring values
// example: var valor = getUrlVars()[""valor""];
function getUrlVars() {
    var vars = [], hash;
    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&amp;');
    for (var i = 0; i &lt; hashes.length; i++) {
        hash = hashes[i].split('=');
        vars.push(hash[0]);
        vars[hash[0]] = hash[1];
    }
    return vars;
}
</code></pre>

<p>Works great for me.</p>
"
"44155755","21","<p>You can easily create a function to do that for you, change the <strong>length</strong> or even add it to <strong>native Array</strong> as <code>remove()</code> function for reuse.</p>

<p>Imagine you have this array:</p>

<pre><code>var arr = [1, 2, 3, 4, 5]; //the array
</code></pre>

<p>OK, just simply run this:</p>

<pre><code>arr.length = 0; //change the length
</code></pre>

<p>and the result is:</p>

<pre><code>[] //result
</code></pre>

<p>easy way to empty an array...</p>

<p>Also using loop which is not necessary but just another way to do that:</p>

<pre><code>/* could be arr.pop() or arr.splice(0)
don't need to return as main array get changed */

function remove(arr) {
  while(arr.length) {
    arr.shift(); 
  }
}
</code></pre>

<p>There are also tricky way which you can think about, for example something like this:</p>

<pre><code>arr.splice(0, arr.length); //[]
</code></pre>

<p>So if arr has 5 items, it will splice 5 items from 0, which means nothing will remain in the array.</p>

<p>Also other ways like simply reassign the array for example:</p>

<pre><code>arr = []; //[]
</code></pre>

<p>If you look at the Array functions, there are many other ways to do this, but the most recommended one could be changing the length.</p>

<p>As I said in the first place, you can also prototype remove() as it's the answer to your question. you can simply choose one of the methods above and prototype it to Array object in JavaScript, something like:</p>

<pre><code>Array.prototype.remove = Array.prototype.remove || function() {
  this.splice(0, this.length);
};
</code></pre>

<p>and you can simply call it like this to empty any array in your javascript application:</p>

<pre><code>arr.remove(); //[]
</code></pre>
"
"11690095","757","<h1>Standard &quot;vanilla&quot; JavaScript way to redirect a page</h1>
<pre><code>window.location.href = 'newPage.html';
</code></pre>
<h2>Or more simply:  (since <code>window</code> is Global)</h2>
<pre><code>location.href = 'newPage.html';
</code></pre>
<hr />
<blockquote>
<p><strong>If you are here because you are <em>losing</em> HTTP_REFERER when redirecting, keep reading:</strong></p>
<p>(Otherwise ignore this last part)</p>
</blockquote>
<hr />
<p>The following section is for those using <code>HTTP_REFERER</code> as one of many security measures (although it isn't a great protective measure). If you're using <a href=""http://en.wikipedia.org/wiki/Internet_Explorer_8"" rel=""noreferrer"">Internet Explorer 8</a> or lower, these variables get lost when using any form of JavaScript page redirection (location.href,  etc.).</p>
<p>Below we are going to implement an alternative for <strong>IE8 &amp; lower</strong> so that we don't lose HTTP_REFERER. Otherwise, you can almost always simply use <code>window.location.href</code>.</p>
<p>Testing against <code>HTTP_REFERER</code> (URL pasting, session, etc.) <em>can</em> help tell whether a request is legitimate.
<em>(<strong>Note:</strong> there are also ways to work-around / spoof these referrers, as noted by droop's link in the comments)</em></p>
<hr />
<p>Simple cross-browser testing solution (fallback to window.location.href for Internet Explorer 9+ and all other browsers)</p>
<p><strong>Usage: <code>redirect('anotherpage.aspx');</code></strong></p>
<pre><code>function redirect (url) {
    var ua        = navigator.userAgent.toLowerCase(),
        isIE      = ua.indexOf('msie') !== -1,
        version   = parseInt(ua.substr(4, 2), 10);

    // Internet Explorer 8 and lower
    if (isIE &amp;&amp; version &lt; 9) {
        var link = document.createElement('a');
        link.href = url;
        document.body.appendChild(link);
        link.click();
    }

    // All other browsers can use the standard window.location.href (they don't lose HTTP_REFERER like Internet Explorer 8 &amp; lower does)
    else { 
        window.location.href = url; 
    }
}
</code></pre>
"
"11832963","31","<p>This may help you:</p>

<pre><code>var result = Math.round(input*100)/100;
</code></pre>

<p>for more information, you can have a look at this link</p>

<p><a href=""https://stackoverflow.com/questions/566564/javascript-functions-math-roundnum-vs-num-tofixed0-and-browser-inconsistenci"">Math.round(num) vs num.toFixed(0) and browser inconsistencies</a></p>
"
"15762329","74","<p>Check out this code. It works in every <strong>major browser</strong>.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>remove_item = function(arr, value) {
 var b = '';
 for (b in arr) {
  if (arr[b] === value) {
   arr.splice(b, 1);
   break;
  }
 }
 return arr;
};

var array = [1,3,5,6,5,9,5,3,55]
var res = remove_item(array,5);
console.log(res)</code></pre>
</div>
</div>
</p>
"
"11832969","19","<p>It may work for you,</p>

<pre><code>Math.round(num * 100)/100;
</code></pre>

<p>to know the difference between toFixed and round. You can have a look at <em><a href=""https://stackoverflow.com/questions/566564/javascript-functions-math-roundnum-vs-num-tofixed0-and-browser-inconsistenci"">Math.round(num) vs num.toFixed(0) and browser inconsistencies</a></em>.</p>
"
"4439076","39","<p>Roshambo jQuery method wasn't taking care of decode URL</p>

<blockquote>
  <p><a href=""http://snipplr.com/view/26662/get-url-parameters-with-jquery--improved/"" rel=""noreferrer"">http://snipplr.com/view/26662/get-url-parameters-with-jquery--improved/</a></p>
</blockquote>

<p>Just added that capability also while adding in  the return statement </p>

<pre><code>return decodeURIComponent(results[1].replace(/\+/g, "" "")) || 0;
</code></pre>

<p>Now you can find the updated gist:</p>

<pre><code>$.urlParam = function(name){
var results = new RegExp('[\\?&amp;]' + name + '=([^&amp;#]*)').exec(window.location.href);
if (!results) { return 0; }
return decodeURIComponent(results[1].replace(/\+/g, "" "")) || 0;
}
</code></pre>
"
"16521953","12","<p>You can iterate over each <code>array</code>-item and <code>splice</code> it if it exist in your <code>array</code>.</p>

<pre><code>function destroy(arr, val) {
    for (var i = 0; i &lt; arr.length; i++) if (arr[i] === val) arr.splice(i, 1);
    return arr;
}
</code></pre>
"
"11833028","59","<p>Here is a simple way to do it:</p>

<pre><code>Math.round(value * 100) / 100
</code></pre>

<p>You might want to go ahead and make a separate function to do it for you though:</p>

<pre><code>function roundToTwo(value) {
    return(Math.round(value * 100) / 100);
}
</code></pre>

<p>Then you would simply pass in the value.</p>

<p>You could enhance it to round to any arbitrary number of decimals by adding a second parameter.</p>

<pre><code>function myRound(value, places) {
    var multiplier = Math.pow(10, places);

    return (Math.round(value * multiplier) / multiplier);
}
</code></pre>
"
"33049060","6","<p>An old question from 2009.  Now in 2015 a new solution is possible with generators defined in ECMAscript 2015 aka ES6.  It was approved in June, but it was implemented in Firefox and Chrome before.  Now a sleep function can be made non-busy, non-blocking and nested inside loops and sub-functions without freezing the browser.  Only pure JavaScript is needed, no libraries or frameworks.</p>

<p>The program below shows how <code>sleep()</code> and <code>runSleepyTask()</code> can be made.  The <code>sleep()</code> function is only a <code>yield</code> statement.  It is so simple that it is actually easier to write the <code>yield</code> statement directly in stead of calling <code>sleep()</code>, but then there would be no sleep-word :-)  The yield returns a time value to the <code>next()</code> method inside <code>wakeup()</code> and waits.  The actual ""sleeping"" is done in <code>wakeup()</code> using the good old <code>setTimeout()</code>.  At callback the the <code>next()</code> method triggers the <code>yield</code> statement to continue, and the ""magic"" of yield is that all the local variables and the whole call-stack around it is still intact.</p>

<p>Functions that use sleep() or yield must be defined as generators.  Easy done by adding an asterix to the keyword <code>function*</code>.  To execute a generator is a bit trickier.  When invoked with the keyword <code>new</code> the generator returns an object that has the <code>next()</code> method, but the body of the generator is not executed (the keyword <code>new</code> is optional and makes no difference).  The <code>next()</code> method triggers execution of the generator body until it encounters a <code>yield</code>.  The wrapper function <code>runSleepyTask()</code> starts up the ping-pong: <code>next()</code> waits for a <code>yield</code>, and <code>yield</code> waits a <code>next()</code>.</p>

<p>Another way to invoke a generator is with keyword <code>yield*</code>, here it works like a simple function call, but it also includes the ability to yield back to <code>next()</code>.</p>

<p>This is all demonstrated by the example <code>drawTree()</code>.  It draws a tree with leaves on a rotating 3D scene.  A tree is drawn as a trunk with 3 parts at the top in different directions.  Each part is then drawn as another but smaller tree by calling <code>drawTree()</code> recursively after a short sleep.  A very small tree is drawn as only a leaf.</p>

<p>Each leaf has its own life in a separate task started with <code>runSleepyTask()</code>.  It is born, grows, sits, fades, falls and dies in <code>growLeaf()</code>.  The speed is controlled with <code>sleep()</code>.  This demonstrates how easy multitasking can be done.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function* sleep(milliseconds) {yield milliseconds};

function runSleepyTask(task) {
    (function wakeup() {
        var result = task.next();
        if (!result.done) setTimeout(wakeup, result.value);
    })()
}
//////////////// written by Ole Middelboe  /////////////////////////////

pen3D =setup3D();
var taskObject = new drawTree(pen3D.center, 5);
runSleepyTask(taskObject);

function* drawTree(root3D, size) {
    if (size &lt; 2) runSleepyTask(new growLeaf(root3D))
    else {
        pen3D.drawTrunk(root3D, size);
        for (var p of [1, 3, 5]) {
            var part3D = new pen3D.Thing;
            root3D.add(part3D);
            part3D.move(size).turn(p).tilt(1-p/20);
            yield* sleep(50);
            yield* drawTree(part3D, (0.7+p/40)*size);
        }
    }
}

function* growLeaf(stem3D) {
    var leaf3D = pen3D.drawLeaf(stem3D);
    for (var s=0;s++&lt;15;) {yield* sleep(100); leaf3D.scale.multiplyScalar(1.1)}
    yield* sleep( 1000 + 9000*Math.random() );
    for (var c=0;c++&lt;30;) {yield* sleep(200); leaf3D.skin.color.setRGB(c/30, 1-c/40, 0)}
    for (var m=0;m++&lt;90;) {yield* sleep( 50); leaf3D.turn(0.4).tilt(0.3).move(2)}
    leaf3D.visible = false;
}
///////////////////////////////////////////////////////////////////////

function setup3D() {
    var scene, camera, renderer, diretionalLight, pen3D;

    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(75, 
        window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(0, 15, 20);
    renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);
    
    directionalLight = new THREE.DirectionalLight(0xffffaa, 0.7);
    directionalLight.position.set(-1, 2, 1);
    scene.add(directionalLight);
    scene.add(new THREE.AmbientLight(0x9999ff));
      
    (function render() {
        requestAnimationFrame(render);
        // renderer.setSize( window.innerWidth, window.innerHeight );
        scene.rotateY(10/60/60);
        renderer.render(scene, camera);
    })();
    
    window.addEventListener(
        'resize',
        function(){
            renderer.setSize( window.innerWidth, window.innerHeight );
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
       }, 
       false
    );
    
    pen3D = {
        drawTrunk: function(root, size) {
            // root.skin = skin(0.5, 0.3, 0.2);
            root.add(new THREE.Mesh(new THREE.CylinderGeometry(size/12, size/10, size, 16), 
                root.skin).translateY(size/2));
            root.add(new THREE.Mesh(new THREE.SphereGeometry(size/12, 16), 
                root.skin).translateY(size));
            return root;
        },
        
        drawLeaf: function(stem) {
            stem.skin.color.setRGB(0, 1, 0);
            stem.add(new THREE.Mesh(new THREE.CylinderGeometry(0, 0.02, 0.6), 
                stem.skin) .rotateX(0.3).translateY(0.3));
            stem.add(new THREE.Mesh(new THREE.CircleGeometry(0.2), 
                stem.skin) .rotateX(0.3).translateY(0.4));
            return stem;
        },
        
        Thing: function() {
            THREE.Object3D.call(this);
            this.skin = new THREE.MeshLambertMaterial({
                color: new THREE.Color(0.5, 0.3, 0.2),
                vertexColors: THREE.FaceColors,
                side: THREE.DoubleSide
            })
        }
    };

    pen3D.Thing.prototype = Object.create(THREE.Object3D.prototype);
    pen3D.Thing.prototype.tilt = pen3D.Thing.prototype.rotateX;
    pen3D.Thing.prototype.turn = pen3D.Thing.prototype.rotateY;
    pen3D.Thing.prototype.move = pen3D.Thing.prototype.translateY;
    
    pen3D.center = new pen3D.Thing;
    scene.add(pen3D.center);
    
    return pen3D;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/three.js/r71/three.min.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>

<p>The 3D stuff is hidden inside setup3D() and is only included to make it less boring than console.log().  Angels are measured in radians by the way.</p>

<p>Tested to work in Firefox and Chrome.  Not implemented in Internet Explore and iOS (iPads).  Try to run it yourself.</p>

<p>After another pass of the answers I found, that Gabriel Ratener made a similar answer a year ago: <a href=""https://stackoverflow.com/a/24401317/5032384"">https://stackoverflow.com/a/24401317/5032384</a> </p>
"
"16864566","13","<p>My usual method is:</p>

<pre><code>var require = function (src, cb) {
    cb = cb || function () {};

    var newScriptTag = document.createElement('script'),
        firstScriptTag = document.getElementsByTagName('script')[0];
    newScriptTag.src = src;
    newScriptTag.async = true;
    newScriptTag.onload = newScriptTag.onreadystatechange = function () {
        (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete') &amp;&amp; (cb());
    };
    firstScriptTag.parentNode.insertBefore(newScriptTag, firstScriptTag);
}
</code></pre>

<p>It works great and uses no page-reloads for me. I've tried the AJAX method (one of the other answers) but it doesn't seem to work as nicely for me.</p>

<p>Here's an explanation of how the code works for those that are curious: essentially, it creates a new script tag (after the first one) of the URL. It sets it to asynchronous mode so it doesn't block the rest of the code, but calls a callback when the readyState (the state of the content to be loaded) changes to 'loaded'.</p>
"
"16931854","27","<p>Loop it until number occurrences comes to 0, like this:</p>
<pre class=""lang-js prettyprint-override""><code>function replaceAll(find, replace, str) {
    while (str.indexOf(find) &gt; -1) {
        str = str.replace(find, replace);
    }
    return str;
}
</code></pre>
"
"35888473","1","<p>There's a new library that neatly chains functions together with timeouts so you can avoid callback hell.</p>

<p><a href=""https://github.com/JSideris/Sequencr.js/wiki"" rel=""nofollow"">Sequencr.js</a></p>

<p>Turns this:</p>

<pre><code>setTimeout(function(timeout){
    function1();
    setTimeout(function(timeout){
        function2();
        setTimeout(function(timeout){
            function3();
        }, timeout, timeout)
    }, timeout, timeout)
}, 10, 10);
</code></pre>

<p>into this:</p>

<pre><code>Sequencr.chain([function1, function2, function3], 10);
</code></pre>

<p>And has built-in support for loops that ""sleep"" between each iteration.</p>
"
"17202942","22","<p>If what you want to find is already in a string, and you don't have a regex escaper handy, you can use join/split:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>    function replaceMulti(haystack, needle, replacement)
    {
        return haystack.split(needle).join(replacement);
    }

    someString = 'the cat looks like a cat';
    console.log(replaceMulti(someString, 'cat', 'dog'));</code></pre>
</div>
</div>
</p>
"
"36180701","-1","<p>Another possible way is:</p>

<pre><code>var _timer;
clearTimeout(_timer);
_timer = setTimeout(function() {
    // Your code
}, 1000); // Delay for 1 s.
</code></pre>
"
"17634471","30","<p>Most of solutions shown here imply dynamical loading. I was searching instead for a compiler which assemble all the depended files into a single output file. The same as <a href=""http://en.wikipedia.org/wiki/Less_%28stylesheet_language%29"">Less</a>/<a href=""http://en.wikipedia.org/wiki/Sass_%28stylesheet_language%29"">Sass</a> preprocessors deal with the CSS <code>@import</code> at-rule. Since I didn't find anything decent of this sort, I wrote a simple tool solving the issue.</p>

<p>So here is the compiler, <a href=""https://github.com/dsheiko/jsic"">https://github.com/dsheiko/jsic</a>, which replaces <code>$import(""file-path"")</code> with the requested file content securely. Here is the corresponding <a href=""http://gruntjs.com/"">Grunt</a> plugin: <a href=""https://github.com/dsheiko/grunt-jsic"">https://github.com/dsheiko/grunt-jsic</a>.</p>

<p>On the jQuery master branch, they simply concatenate atomic source files into a single one starting with <code>intro.js</code> and ending with <code>outtro.js</code>. That doesn't suits me as it provides no flexibility on the source code design. Check out how it works with jsic:</p>

<p><em>src/main.js</em></p>

<pre><code>var foo = $import(""./Form/Input/Tel"");
</code></pre>

<p><em>src/Form/Input/Tel.js</em></p>

<pre><code>function() {
    return {
          prop: """",
          method: function(){}
    }
}
</code></pre>

<p>Now we can run the compiler:</p>

<pre><code>node jsic.js src/main.js build/mail.js
</code></pre>

<p>And get the combined file</p>

<p><em>build/main.js</em></p>

<pre><code>var foo = function() {
    return {
          prop: """",
          method: function(){}
    }
};
</code></pre>
"
"18104035","17","<p><strong>Create new array:</strong></p>

<pre><code>var my_array = new Array();
</code></pre>

<p><strong>Add elements to this array:</strong></p>

<pre><code>my_array.push(""element1"");
</code></pre>

<p><strong>The function indexOf (returns index or -1 when not found):</strong></p>

<pre><code>var indexOf = function(needle)
{
    if (typeof Array.prototype.indexOf === 'function') // Newer browsers
    {
        indexOf = Array.prototype.indexOf;
    }
    else // Older browsers
    {
        indexOf = function(needle)
        {
            var index = -1;

            for (var i = 0; i &lt; this.length; i++)
            {
                if (this[i] === needle)
                {
                    index = i;
                    break;
                }
            }
            return index;
        };
    }

    return indexOf.call(this, needle);
};
</code></pre>

<p><strong>Check index of this element (tested with Firefox and Internet&nbsp;Explorer&nbsp;8 (and later)):</strong></p>

<pre><code>var index = indexOf.call(my_array, ""element1"");
</code></pre>

<p><strong>Remove 1 element located at index from the array</strong></p>

<pre><code>my_array.splice(index, 1);
</code></pre>
"
"36254488","0","<p>I navigate the solution for a day but still thinking how to maintain the chainability in using callback. Everyone is familiar with the traditional programming style which running the code line by line in synchronised way. SetTimeout uses a callback so the next line does not wait for it to complete. This let me think how to make it ""sync"", so as to make a ""sleep"" function.</p>

<p>Beginning with a simple coroutine:</p>

<pre><code>function coroutine() {
    console.log('coroutine-1:start');
    sleepFor(3000); //sleep for 3 seconds here
    console.log('coroutine-2:complete');
}
</code></pre>

<p>I want to sleep 3 seconds in the middle but don't want to dominate the whole flow, so the coroutine must be executed by another thread. I consider the <a href=""http://docs.unity3d.com/ScriptReference/WaitForSeconds.html"" rel=""nofollow"">Unity YieldInstruction</a>, and modify the coroutine in the following:</p>

<pre><code>function coroutine1() {
    this.a = 100;
    console.log('coroutine1-1:start');
    return sleepFor(3000).yield; // sleep for 3 seconds here
    console.log('coroutine1-2:complete');
    this.a++;
}

var c1 = new coroutine1();
</code></pre>

<p>Declare the sleepFor prototype:</p>

<pre><code>sleepFor = function(ms) {
    var caller = arguments.callee.caller.toString();
    var funcArgs = /\(([\s\S]*?)\)/gi.exec(caller)[1];
    var args = arguments.callee.caller.arguments;
    var funcBody = caller.replace(/^[\s\S]*?sleepFor[\s\S]*?yield;|}[\s;]*$/g,'');
    var context = this;
    setTimeout(function() {
        new Function(funcArgs, funcBody).apply(context, args);
    }, ms);
    return this;
}
</code></pre>

<p>After run the coroutine1 (I tested in IE11 and Chrome49), you will see it sleep 3 seconds between two console statements. It keeps the codes as pretty as the traditional style. The tricky is in sleepFor routine. It reads the caller function body as string and break it into 2 parts. Remove the upper part and create another function by lower part. After waiting for the specified number of milliseconds, it calls the created function by applying the original context and arguments. For the original flow, it will end by ""return"" as usual. For the ""yield""? It is used for regex matching. It is necessary but no use at all.</p>

<p>It is not 100% perfect at all but it achieves my jobs at least. I have to mention some limitations in using this piece of codes. As the code is being broken into 2 parts, the ""return"" statement must be in outer, instead of in any loop or {}. i.e.</p>

<pre><code>function coroutine3() {
    this.a = 100;
    console.log('coroutine3-1:start');
    if(true) {
        return sleepFor(3000).yield;
    } // &lt;- raise exception here
    console.log('coroutine3-2:complete');
    this.a++;
}
</code></pre>

<p>The above codes must have problem as the close bracket could not exist individually in the created function. Another limitation is all local variables declared by ""var xxx=123"" could not carry to next function. You must use ""this.xxx=123"" to achieve the same thing. If your function has arguments and they got changes, the modified value also could not carry to next function.</p>

<pre><code>function coroutine4(x) { // assume x=abc
    var z = x;
    x = 'def';
    console.log('coroutine4-1:start' + z + x); //z=abc, x=def
    return sleepFor(3000).yield;
    console.log('coroutine4-2:' + z + x); //z=undefined, x=abc
}
</code></pre>

<p>I would introduce another function prototype: waitFor</p>

<pre><code>waitFor = function(check, ms) {
    var caller = arguments.callee.caller.toString();
    var funcArgs = /\(([\s\S]*?)\)/gi.exec(caller)[1];
    var args = arguments.callee.caller.arguments;
    var funcBody = caller.replace(/^[\s\S]*?waitFor[\s\S]*?yield;|}[\s;]*$/g,'');
    var context = this;
    var thread = setInterval(function() {
        if(check()) {
            clearInterval(thread);
            new Function(funcArgs, funcBody).apply(context, args);
        }
    }, ms?ms:100);
    return this;
}
</code></pre>

<p>It waits for ""check"" function until it returns true. It checks the value every 100ms. You can adjust it by passing additional argument. Consider the testing coroutine2:</p>

<pre><code>function coroutine2(c) {
    /* some codes here */
    this.a = 1;
    console.log('coroutine2-1:' + this.a++);
    return sleepFor(500).yield;

    /* next */
    console.log('coroutine2-2:' + this.a++);
    console.log('coroutine2-2:waitFor c.a&gt;100:' + c.a);
    return waitFor(function() {
        return c.a&gt;100;
    }).yield;

    /* the rest of code */
    console.log('coroutine2-3:' + this.a++);
}
</code></pre>

<p>Also in pretty style we love so far. Actually I hate the nested callback. It is easily understood that the coroutine2 will wait for the completion of coroutine1. Interesting? Ok, then run the following codes:</p>

<pre><code>this.a = 10;
console.log('outer-1:' + this.a++);
var c1 = new coroutine1();
var c2 = new coroutine2(c1);
console.log('outer-2:' + this.a++);
</code></pre>

<p>The output is:</p>

<pre><code>outer-1:10
coroutine1-1:start
coroutine2-1:1
outer-2:11
coroutine2-2:2
coroutine2-2:waitFor c.a&gt;100:100
coroutine1-2:complete
coroutine2-3:3
</code></pre>

<p>Outer is immediately completed after initialised coroutine1 and coroutine2. Then, coroutine1 will wait for 3000ms. Coroutine2 will enter into step 2 after waited for 500ms. After that, it will continue step 3 once it detects the coroutine1.a values > 100.</p>

<p>Beware of that there are 3 contexts to hold variable ""a"". One is outer, which values are 10 and 11. Another one is in coroutine1, which values are 100 and 101. The last one is in coroutine2, which values are 1,2 and 3. In coroutine2, it also waits for c.a which comes from coroutine1, until its value is greater than 100. 3 contexts are independent.</p>

<p>The whole code for copy&amp;paste:</p>

<pre><code>sleepFor = function(ms) {
    var caller = arguments.callee.caller.toString();
    var funcArgs = /\(([\s\S]*?)\)/gi.exec(caller)[1];
    var args = arguments.callee.caller.arguments;
    var funcBody = caller.replace(/^[\s\S]*?sleepFor[\s\S]*?yield;|}[\s;]*$/g,'');
    var context = this;
    setTimeout(function() {
        new Function(funcArgs, funcBody).apply(context, args);
    }, ms);
    return this;
}

waitFor = function(check, ms) {
    var caller = arguments.callee.caller.toString();
    var funcArgs = /\(([\s\S]*?)\)/gi.exec(caller)[1];
    var args = arguments.callee.caller.arguments;
    var funcBody = caller.replace(/^[\s\S]*?waitFor[\s\S]*?yield;|}[\s;]*$/g,'');
    var context = this;
    var thread = setInterval(function() {
        if(check()) {
            clearInterval(thread);
            new Function(funcArgs, funcBody).apply(context, args);
        }
    }, ms?ms:100);
    return this;
}

function coroutine1() {
    this.a = 100;
    console.log('coroutine1-1:start');
    return sleepFor(3000).yield;
    console.log('coroutine1-2:complete');
    this.a++;
}

function coroutine2(c) {
    /* some codes here */
    this.a = 1;
    console.log('coroutine2-1:' + this.a++);
    return sleepFor(500).yield;

    /* next */
    console.log('coroutine2-2:' + this.a++);
    console.log('coroutine2-2:waitFor c.a&gt;100:' + c.a);
    return waitFor(function() {
        return c.a&gt;100;
    }).yield;

    /* the rest of code */
    console.log('coroutine2-3:' + this.a++);
}

this.a = 10;
console.log('outer-1:' + this.a++);
var c1 = new coroutine1();
var c2 = new coroutine2(c1);
console.log('outer-2:' + this.a++);
</code></pre>

<p>It is tested in IE11 and Chrome49. Because it uses arguments.callee, so it may be trouble if it runs in strict mode.</p>
"
"36328062","21","<p>A lot of answers, and a lot of different possibilities!</p>
<p>Without a doubt for quick and simple implementation the winner is: <code>if (!str.length) {...}</code></p>
<p>However, as many other examples are available. The best functional method to go about this, I would suggest:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function empty(str)
{
    if (typeof str == 'undefined' || !str || str.length === 0 || str === """" || !/[^\s]/.test(str) || /^\s*$/.test(str) || str.replace(/\s/g,"""") === """")
        return true;
    else
        return false;
}</code></pre>
</div>
</div>
</p>
<p>A bit excessive, I know.</p>
"
"18165553","334","<p>A friend was having issues in <a href=""http://en.wikipedia.org/wiki/Internet_Explorer_8"" rel=""noreferrer"">Internet Explorer 8</a> and showed me what he did. I told him it was wrong, and he told me he got the answer here. The current top answer will not work in all browsers (Internet Explorer 8 for example), and it will only remove the first occurrence of the item.</p>
<h2>Remove ALL instances from an array</h2>
<pre><code>function removeAllInstances(arr, item) {
   for (var i = arr.length; i--;) {
     if (arr[i] === item) arr.splice(i, 1);
   }
}
</code></pre>
<p>It loops through the array backwards (since indices and length will change as items are removed) and removes the item if it's found. It works in all browsers.</p>
"
"36342822","0","<p>If you <em>really</em> want to pause a script, you can do this:</p>

<pre><code>var milliseconds;
var pretime;
var stage;

function step(time){
  switch(stage){
    case 0:
      //Code before the pause

      pretime=time;
      milliseconds=XXX;
      stage=1;
      break;
    case 1:
      //Code that is looped through while paused

      if(time-pretime &gt;= milliseconds){
        //Code after the pause

        pretime=time;
        milliseconds=XXX;
        stage=2;
      }
      break;
    case 2:
      //Code that is looped through while paused

      if(time-pretime &gt;= milliseconds){
        //Code after the pause

        pretime=time;
        milliseconds=XXX;
        stage=3;
      }
      break;
    case 3:
      //Etc...
  }

  Window.requestAnimationFrame(step)
}

step();
</code></pre>

<p>This is probably exactly what you want if you use a loop anyway, and you can change it in ways so that you have pseudo-multi-threading, where you have some functions waiting a while and others running normally. I use this all the time for pure-JS games.</p>
"
"51114044","0","<p>if you are referring to a specific link that has an <strong>id</strong> this code can help you.</p>

<pre><code>$("".disapprove"").click(function(){
    var id = $(this).attr(""id"");

    $.ajax({
        url: ""&lt;?php echo base_url('index.php/sample/page/""+id+""')?&gt;"",
        type: ""post"",
        success:function()
        {
            alert(""The Request has been Disapproved"");
            window.location.replace(""http://localhost/sample/page/""+id+"""");
        }
    });
});
</code></pre>

<p>I am using ajax here to submit an id and redirect the page using <strong>window.location.replace</strong>. just add an attribute <code>id=""""</code> as stated.</p>
"
"52720453","-2","<p>Firstly check for page is loaded completely in </p>

<pre><code>browser,window.location.toString();

window.location.href
</code></pre>

<p>then call a function which takes url, URL variable and prints on console,</p>

<pre><code>$(window).load(function(){
   var url = window.location.href.toString();
   var URL = document.URL;
   var wayThreeUsingJQuery = $(location).attr('href');
   console.log(url);
   console.log(URL);
   console.log(wayThreeUsingJQuery );
});
</code></pre>
"
"37535344","-4","<p>This might work. It worked for me in c and javascript.</p>

<pre><code>function sleep(time) {
 var x = 0;
 for(x = 0;x &lt; time;x++) {/* Do nothing*/}
}
</code></pre>
"
"18539905","95","<p>John Resig <a href=""http://ejohn.org/blog/javascript-array-remove/"" rel=""noreferrer"">posted a good implementation</a>:</p>

<pre><code>// Array Remove - By John Resig (MIT Licensed)
Array.prototype.remove = function(from, to) {
  var rest = this.slice((to || from) + 1 || this.length);
  this.length = from &lt; 0 ? this.length + from : from;
  return this.push.apply(this, rest);
};
</code></pre>

<p>If you don’t want to extend a global object, you can do something like the following, instead:</p>

<pre><code>// Array Remove - By John Resig (MIT Licensed)
Array.remove = function(array, from, to) {
    var rest = array.slice((to || from) + 1 || array.length);
    array.length = from &lt; 0 ? array.length + from : from;
    return array.push.apply(array, rest);
};
</code></pre>

<p>But the main reason I am posting this is to warn users against the alternative implementation suggested in the comments on that page (Dec 14, 2007):</p>

<pre><code>Array.prototype.remove = function(from, to){
  this.splice(from, (to=[0,from||1,++to-from][arguments.length])&lt;0?this.length+to:to);
  return this.length;
};
</code></pre>

<p>It seems to work well at first, but through a painful process I discovered it fails when trying to remove the second to last element in an array. For example, if you have a 10-element array and you try to remove the 9th element with this:</p>

<pre><code>myArray.remove(8);
</code></pre>

<p>You end up with an 8-element array. Don't know why but I confirmed John's original implementation doesn't have this problem.</p>
"
"38155341","-2","<p>Use three functions:</p>

<ol>
<li>A function which calls <code>setInterval</code> to start the loop</li>
<li>A function which calls <code>clearInterval</code> to stop the loop, then calls <code>setTimeout</code> to sleep, and finally calls to within the <code>setTimeout</code> as the callback to restart the loop</li>
<li>A loop which tracks the number of iterations, sets a sleep number and a maximum number, calls the sleep function once the sleep number has been reached, and calls <code>clearInterval</code> after the maximum number has been reached</li>
</ol>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var foo = {};

function main()
  {
  'use strict';
  /*Initialize global state*/
  foo.bar = foo.bar || 0;
  /* Initialize timer */ 
  foo.bop = setInterval(foo.baz, 1000); 
  }
 
 sleep = 
      function(timer)
      {
      'use strict';
      clearInterval(timer);
      timer = setTimeout(function(){main()}, 5000);
      };
       
 
 foo.baz = 
   function()
      {
      'use strict';
      /* Update state */
      foo.bar = Number(foo.bar + 1) || 0; 
      /* Log state */
      console.log(foo.bar);
      /* Check state and stop at 10 */ 
      (foo.bar === 5) &amp;&amp; sleep(foo.bop);
      (foo.bar === 10) &amp;&amp; clearInterval(foo.bop);
      };
      
main();</code></pre>
</div>
</div>
</p>

<p><a href=""https://i.stack.imgur.com/l0lJB.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/l0lJB.png"" alt=""Event Loop""></a></p>

<p><strong>References</strong></p>

<ul>
<li><p><a href=""http://www.codeproject.com/Articles/563425/Game-Development-Using-JavaScript"" rel=""nofollow noreferrer"">Game Development Using JavaScript</a></p></li>
<li><p><a href=""http://developer.telerik.com/featured/scroll-event-change-ios-8-big-deal/"" rel=""nofollow noreferrer"">Why the Scroll Event Change in iOS 8 is a Big Deal</a></p></li>
<li><p><a href=""http://yoranbrondsema.com/live-polling-system-ember-js/"" rel=""nofollow noreferrer"">A live polling system in Ember.js</a></p></li>
<li><p><a href=""http://chimera.labs.oreilly.com/books/1234000000802/ch05.html"" rel=""nofollow noreferrer"">Driving Animation with requestAnimationFrame()</a></p></li>
<li><p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"" rel=""nofollow noreferrer"">MDN: JavaScript Concurrency Model and the Event Loop</a></p></li>
<li><p><a href=""http://monome.org/docs/grid-studies/nodejs/"" rel=""nofollow noreferrer"">Grid Studies: Node.js</a></p></li>
<li><p><a href=""http://jsfiddle.net/chandlerprall/Wj5yM/"" rel=""nofollow noreferrer"">Beating 60fps in JavaScript</a></p></li>
<li><p><a href=""https://benjaminhorn.io/code/part-2-cpu-intensive-javascript-computations-without-blocking-the-single-thread/"" rel=""nofollow noreferrer"">Part 2: CPU intensive javascript computations without blocking the single thread</a></p></li>
</ul>
"
"18885102","138","<p>There is no need to use <code>indexOf</code> or <code>splice</code>. However, it performs better if you only want to remove one occurrence of an element. </p>

<p><strong>Find and move (move):</strong></p>

<pre><code>function move(arr, val) {
  var j = 0;
  for (var i = 0, l = arr.length; i &lt; l; i++) {
    if (arr[i] !== val) {
      arr[j++] = arr[i];
    }
  }
  arr.length = j;
}
</code></pre>

<p><strong>Use <code>indexOf</code> and <code>splice</code> (indexof):</strong></p>

<pre><code>function indexof(arr, val) {
  var i;
  while ((i = arr.indexOf(val)) != -1) {
    arr.splice(i, 1);
  }
}
</code></pre>

<p><strong>Use only <code>splice</code> (splice):</strong></p>

<pre><code>function splice(arr, val) {
  for (var i = arr.length; i--;) {
    if (arr[i] === val) {
      arr.splice(i, 1);
    }
  }
}
</code></pre>

<p><strong>Run-times on nodejs for array with 1000 elements (average over 10000 runs):</strong></p>

<p><em>indexof</em> is approximately 10x slower than <em>move</em>. Even if improved by removing the call to <code>indexOf</code> in <em>splice</em> it performs much worse than <em>move</em>. </p>

<pre><code>Remove all occurrences:
    move 0.0048 ms
    indexof 0.0463 ms
    splice 0.0359 ms

Remove first occurrence:
    move_one 0.0041 ms
    indexof_one 0.0021 ms
</code></pre>
"
"12197444","57","<p>Here is a fast way to get an object similar to the PHP <a href=""http://php.net/manual/en/reserved.variables.get.php"">$_GET</a> array:</p>

<pre><code>function get_query(){
    var url = location.search;
    var qs = url.substring(url.indexOf('?') + 1).split('&amp;');
    for(var i = 0, result = {}; i &lt; qs.length; i++){
        qs[i] = qs[i].split('=');
        result[qs[i][0]] = decodeURIComponent(qs[i][1]);
    }
    return result;
}
</code></pre>

<p>Usage:</p>

<pre><code>var $_GET = get_query();
</code></pre>

<p>For the query string <code>x=5&amp;y&amp;z=hello&amp;x=6</code> this returns the object:</p>

<pre><code>{
  x: ""6"",
  y: undefined,
  z: ""hello""
}
</code></pre>
"
"19017234","25","<pre><code>Array.prototype.removeItem = function(a) {
    for (i = 0; i &lt; this.length; i++) {
        if (this[i] == a) {
            for (i2 = i; i2 &lt; this.length - 1; i2++) {
                this[i2] = this[i2 + 1];
            }
            this.length = this.length - 1
            return;
        }
    }
}

var recentMovies = ['Iron Man', 'Batman', 'Superman', 'Spiderman'];
recentMovies.removeItem('Superman');
</code></pre>
"
"12254019","102","<p>Just use two <strong>splits</strong>:</p>

<pre><code>function get(n) {
    var half = location.search.split(n + '=')[1];
    return half !== undefined ? decodeURIComponent(half.split('&amp;')[0]) : null;
}
</code></pre>

<p>I was reading all the previous and more complete answers. But I think that is the simplest and faster method. You can check in this jsPerf <a href=""http://jsperf.com/querystring-with-javascript/9"" rel=""noreferrer"">benchmark</a></p>

<p>To solve the problem in Rup's comment, add a conditional split by changing the first line to the two below. But absolute accuracy means it's now slower than regexp (see <a href=""http://jsperf.com/querystring-with-javascript/10"" rel=""noreferrer"">jsPerf</a>).</p>

<pre><code>function get(n) {
    var half = location.search.split('&amp;' + n + '=')[1];
    if (!half) half = location.search.split('?' + n + '=')[1];
    return half !== undefined ? decodeURIComponent(half.split('&amp;')[0]) : null;
}
</code></pre>

<p>So if you know you won't run into Rup's counter-case, this wins. Otherwise, regexp.</p>

<blockquote>
  <p><em>Or</em> if you have control of the querystring and can guarantee that a value you are trying to get will never contain any URL encoded
  characters (having these in a value would be a bad idea) - you can use
  the following slightly more simplified and readable version of the 1st option:</p>

<pre><code>    function getQueryStringValueByName(name) {
        var queryStringFromStartOfValue = location.search.split(name + '=')[1];
         return queryStringFromStartOfValue !== undefined ? queryStringFromStartOfValue.split('&amp;')[0] : null;
</code></pre>
</blockquote>
"
"13372097","77","<p>On your click function, just add:</p>

<pre><code>window.location.href = ""The URL where you want to redirect"";
$('#id').click(function(){
    window.location.href = ""http://www.google.com"";
});
</code></pre>
"
"19602549","11","<p>This script will add a JavaScript file to the top of any other <code>&lt;script&gt;</code> tag:</p>
<pre><code>(function () {
    var li = document.createElement('script'); 
    li.type = 'text/javascript'; 
    li.src = &quot;http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&quot;; 
    li.async = true; 
    var s = document.getElementsByTagName('script')[0]; 
    s.parentNode.insertBefore(li, s);
})();
</code></pre>
"
"13678461","67","<p>The following code exhibits various examples related to getting/putting of values from input/select fields using JavaScript.</p>

<p><strong><a href=""http://www.freakyjolly.com/how-to-get-selected-value-in-dropdown-list-using-jquery-javascript/"" rel=""noreferrer"">Source Link</a></strong></p>

<p>Working <a href=""https://freakyjolly.com/demo/getDropDownValue_JavaScript_jQuery.html"" rel=""noreferrer""><strong>Javascript &amp; jQuery Demo</strong></a></p>

<p><a href=""https://i.stack.imgur.com/8LJas.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/8LJas.jpg"" alt=""enter image description here""></a></p>

<p><a href=""https://i.stack.imgur.com/GnfKD.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/GnfKD.jpg"" alt=""enter image description here""></a></p>

<pre><code> &lt;select id=""Ultra"" onchange=""run()""&gt;  &lt;!--Call run() function--&gt;
     &lt;option value=""0""&gt;Select&lt;/option&gt;
     &lt;option value=""8""&gt;text1&lt;/option&gt;
     &lt;option value=""5""&gt;text2&lt;/option&gt;
     &lt;option value=""4""&gt;text3&lt;/option&gt;
&lt;/select&gt;&lt;br&gt;&lt;br&gt;
TextBox1&lt;br&gt;
&lt;input type=""text"" id=""srt"" placeholder=""get value on option select""&gt;&lt;br&gt;
TextBox2&lt;br&gt;
&lt;input type=""text"" id=""rtt""  placeholder=""Write Something !"" onkeyup=""up()""&gt;
</code></pre>

<p><strong>The following script is getting the value of the selected option and putting it in text box 1</strong></p>

<pre><code>&lt;script&gt;
    function run() {
        document.getElementById(""srt"").value = document.getElementById(""Ultra"").value;
    }
&lt;/script&gt;
</code></pre>

<p><strong>The following script is getting a value from a text box 2 and alerting with its value</strong></p>

<pre><code>&lt;script&gt;
    function up() {
        //if (document.getElementById(""srt"").value != """") {
            var dop = document.getElementById(""srt"").value;
        //}
        alert(dop);
    }
&lt;/script&gt;
</code></pre>

<p><strong>The following script is calling a function from a function</strong></p>

<pre><code>&lt;script&gt;
    function up() {
        var dop = document.getElementById(""srt"").value;
        pop(dop); // Calling function pop
    }

    function pop(val) {
        alert(val);
    }?
&lt;/script&gt;
</code></pre>
"
"20152162","10","<p>There is also <a href=""http://headjs.com/"" rel=""noreferrer"">Head.js</a>. It is very easy to deal with:</p>

<pre><code>head.load(""js/jquery.min.js"",
          ""js/jquery.someplugin.js"",
          ""js/jquery.someplugin.css"", function() {
  alert(""Everything is ok!"");
});
</code></pre>

<p>As you see, it's easier than Require.js and as convenient as jQuery's <code>$.getScript</code> method. It also has some advanced features, like conditional loading, feature detection and <a href=""http://headjs.com/site/api/v1.00.html"" rel=""noreferrer"">much more</a>.</p>
"
"20518446","57","<p>Here is a <strong>synchronous</strong> version <strong>without jQuery</strong>:</p>

<pre><code>function myRequire( url ) {
    var ajax = new XMLHttpRequest();
    ajax.open( 'GET', url, false ); // &lt;-- the 'false' makes it synchronous
    ajax.onreadystatechange = function () {
        var script = ajax.response || ajax.responseText;
        if (ajax.readyState === 4) {
            switch( ajax.status) {
                case 200:
                    eval.apply( window, [script] );
                    console.log(""script loaded: "", url);
                    break;
                default:
                    console.log(""ERROR: script not loaded: "", url);
            }
        }
    };
    ajax.send(null);
}
</code></pre>

<p>Note that to get this working cross-domain, the server will need to set <code>allow-origin</code> header in its response.</p>
"
"39914235","3553","<h2>2017 — 2021 update</h2>
<p>Since 2009 when this question was asked, JavaScript has evolved significantly. All other answers are now obsolete or overly complicated. Here is the current best practice:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function sleep(ms) {
  return new Promise(resolve =&gt; setTimeout(resolve, ms));
}

async function demo() {
  console.log('Taking a break...');
  await sleep(2000);
  console.log('Two seconds later, showing sleep in a loop...');

  // Sleep in loop
  for (let i = 0; i &lt; 5; i++) {
    if (i === 3)
      await sleep(2000);
    console.log(i);
  }
}

demo();</code></pre>
</div>
</div>
</p>
<h3>This is it. <code>await sleep(&lt;duration&gt;)</code>.</h3>
<p>Or as a one-liner:</p>
<pre><code>await new Promise(r =&gt; setTimeout(r, 2000));
</code></pre>
<p>Note that,</p>
<ol>
<li><code>await</code> can only be executed in functions prefixed with the <code>async</code> keyword, or at the top level of your script in <a href=""https://stackoverflow.com/questions/46515764/how-can-i-use-async-await-at-the-top-level/56590390#56590390"">an increasing number of environments</a>.</li>
<li><code>await</code> only pauses the current <code>async</code> function. This means it's not blocking the execution of the rest of the script, which is what you want in the vast majority of the cases. If you do want a blocking construct, see <a href=""https://stackoverflow.com/questions/951021/what-is-the-javascript-version-of-sleep/56406126#56406126"">this answer</a> using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics"" rel=""noreferrer""><code>Atomics</code></a><code>.wait</code>, but note that most browsers will not allow it on the browser's main thread.</li>
</ol>
<p>Two new JavaScript features (as of 2017) helped write this &quot;sleep&quot; function:</p>
<ul>
<li><a href=""https://ponyfoo.com/articles/es6-promises-in-depth"" rel=""noreferrer"">Promises, a native feature of ES2015</a> (aka ES6). We also use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"" rel=""noreferrer"">arrow functions</a> in the definition of the sleep function.</li>
<li>The <a href=""https://ponyfoo.com/articles/understanding-javascript-async-await"" rel=""noreferrer""><code>async/await</code></a> feature lets the code explicitly wait for a promise to settle (resolve or reject).</li>
</ul>
<h2>Compatibility</h2>
<ul>
<li>promises are supported <a href=""http://node.green/#Promise"" rel=""noreferrer"">in Node v0.12+</a> and <a href=""http://caniuse.com/#feat=promises"" rel=""noreferrer"">widely supported in browsers</a>, except IE</li>
<li><code>async</code>/<code>await</code> landed in V8 and has been <a href=""https://developers.google.com/web/fundamentals/getting-started/primers/async-functions"" rel=""noreferrer"">enabled by default since Chrome 55</a> (released in Dec 2016)
<ul>
<li>it landed <a href=""https://blog.risingstack.com/async-await-node-js-7-nightly/"" rel=""noreferrer"">in Node 7 in October 2016</a></li>
<li>and also landed <a href=""https://blog.nightly.mozilla.org/2016/11/01/async-await-support-in-firefox/"" rel=""noreferrer"">in Firefox Nightly in November 2016</a></li>
</ul>
</li>
</ul>
<p>If for some weird reason you're using Node older than 7 (which has reached <a href=""https://github.com/nodejs/Release"" rel=""noreferrer"">end of life</a>), or are targeting old browsers, <code>async</code>/<code>await</code> can still be used via <a href=""https://babeljs.io/"" rel=""noreferrer"">Babel</a> (a tool that will <a href=""https://www.stevefenton.co.uk/2012/11/compiling-vs-transpiling/"" rel=""noreferrer"">transpile</a> JavaScript + new features into plain old JavaScript), with the <a href=""https://babeljs.io/docs/en/babel-plugin-transform-async-to-generator"" rel=""noreferrer""><code>transform-async-to-generator</code></a> plugin.</p>
"
"12397882","46","<p>These are all great answers, but I needed something a bit more robust, and thought you all might like to have what I created.</p>

<p>It is a simple library method that does dissection and manipulation of URL parameters. The static method has the following sub methods that can be called on the subject URL:</p>

<ul>
<li>getHost</li>
<li>getPath</li>
<li>getHash</li>
<li>setHash</li>
<li>getParams</li>
<li>getQuery</li>
<li>setParam</li>
<li>getParam</li>
<li>hasParam</li>
<li>removeParam</li>
</ul>

<p>Example:</p>

<pre><code>URLParser(url).getParam('myparam1')
</code></pre>

<hr>

<pre><code>var url = ""http://www.test.com/folder/mypage.html?myparam1=1&amp;myparam2=2#something"";

function URLParser(u){
    var path="""",query="""",hash="""",params;
    if(u.indexOf(""#"") &gt; 0){
        hash = u.substr(u.indexOf(""#"") + 1);
        u = u.substr(0 , u.indexOf(""#""));
    }
    if(u.indexOf(""?"") &gt; 0){
        path = u.substr(0 , u.indexOf(""?""));
        query = u.substr(u.indexOf(""?"") + 1);
        params= query.split('&amp;');
    }else
        path = u;
    return {
        getHost: function(){
            var hostexp = /\/\/([\w.-]*)/;
            var match = hostexp.exec(path);
            if (match != null &amp;&amp; match.length &gt; 1)
                return match[1];
            return """";
        },
        getPath: function(){
            var pathexp = /\/\/[\w.-]*(?:\/([^?]*))/;
            var match = pathexp.exec(path);
            if (match != null &amp;&amp; match.length &gt; 1)
                return match[1];
            return """";
        },
        getHash: function(){
            return hash;
        },
        getParams: function(){
            return params
        },
        getQuery: function(){
            return query;
        },
        setHash: function(value){
            if(query.length &gt; 0)
                query = ""?"" + query;
            if(value.length &gt; 0)
                query = query + ""#"" + value;
            return path + query;
        },
        setParam: function(name, value){
            if(!params){
                params= new Array();
            }
            params.push(name + '=' + value);
            for (var i = 0; i &lt; params.length; i++) {
                if(query.length &gt; 0)
                    query += ""&amp;"";
                query += params[i];
            }
            if(query.length &gt; 0)
                query = ""?"" + query;
            if(hash.length &gt; 0)
                query = query + ""#"" + hash;
            return path + query;
        },
        getParam: function(name){
            if(params){
                for (var i = 0; i &lt; params.length; i++) {
                    var pair = params[i].split('=');
                    if (decodeURIComponent(pair[0]) == name)
                        return decodeURIComponent(pair[1]);
                }
            }
            console.log('Query variable %s not found', name);
        },
        hasParam: function(name){
            if(params){
                for (var i = 0; i &lt; params.length; i++) {
                    var pair = params[i].split('=');
                    if (decodeURIComponent(pair[0]) == name)
                        return true;
                }
            }
            console.log('Query variable %s not found', name);
        },
        removeParam: function(name){
            query = """";
            if(params){
                var newparams = new Array();
                for (var i = 0;i &lt; params.length;i++) {
                    var pair = params[i].split('=');
                    if (decodeURIComponent(pair[0]) != name)
                          newparams .push(params[i]);
                }
                params = newparams;
                for (var i = 0; i &lt; params.length; i++) {
                    if(query.length &gt; 0)
                        query += ""&amp;"";
                    query += params[i];
                }
            }
            if(query.length &gt; 0)
                query = ""?"" + query;
            if(hash.length &gt; 0)
                query = query + ""#"" + hash;
            return path + query;
        },
    }
}


document.write(""Host: "" + URLParser(url).getHost() + '&lt;br&gt;');
document.write(""Path: "" + URLParser(url).getPath() + '&lt;br&gt;');
document.write(""Query: "" + URLParser(url).getQuery() + '&lt;br&gt;');
document.write(""Hash: "" + URLParser(url).getHash() + '&lt;br&gt;');
document.write(""Params Array: "" + URLParser(url).getParams() + '&lt;br&gt;');
document.write(""Param: "" + URLParser(url).getParam('myparam1') + '&lt;br&gt;');
document.write(""Has Param: "" + URLParser(url).hasParam('myparam1') + '&lt;br&gt;');

document.write(url + '&lt;br&gt;');

// Remove the first parameter
url = URLParser(url).removeParam('myparam1');
document.write(url + ' - Remove the first parameter&lt;br&gt;');

// Add a third parameter
url = URLParser(url).setParam('myparam3',3);
document.write(url + ' - Add a third parameter&lt;br&gt;');

// Remove the second parameter
url = URLParser(url).removeParam('myparam2');
document.write(url + ' - Remove the second parameter&lt;br&gt;');

// Add a hash
url = URLParser(url).setHash('newhash');
document.write(url + ' - Set Hash&lt;br&gt;');

// Remove the last parameter
url = URLParser(url).removeParam('myparam3');
document.write(url + ' - Remove the last parameter&lt;br&gt;');

// Remove a parameter that doesn't exist
url = URLParser(url).removeParam('myparam3');
document.write(url + ' - Remove a parameter that doesn\""t exist&lt;br&gt;');
</code></pre>
"
"9329476","7495","
<p><strong>TL;DR</strong></p>
<ul>
<li><p><strong>Your best bets</strong> are usually</p>
<ul>
<li>a <code>for-of</code> loop (ES2015+ only; <a href=""https://tc39.es/ecma262/#sec-for-in-and-for-of-statements"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"" rel=""noreferrer"">MDN</a>) - simple and <code>async</code>-friendly</li>
<li><code>forEach</code> (ES5+ only; <a href=""https://tc39.es/ecma262/#sec-array.prototype.foreach"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"" rel=""noreferrer"">MDN</a>) (or its relatives <code>some</code> and such) - <strong>not</strong> <code>async</code>-friendly (but see details)</li>
<li>a simple old-fashioned <code>for</code> loop - <code>async</code>-friendly</li>
<li><em>(rarely)</em> <code>for-in</code> <em>with safeguards</em> - <code>async</code>-friendly</li>
</ul>
</li>
<li><p>Some quick &quot;don't&quot;s:</p>
<ul>
<li><strong>Don't use <code>for-in</code></strong> unless you use it with safeguards or are at least aware of why it might bite you.</li>
<li><strong>Don't use <code>map</code> if you're not using its return value</strong>.<br><em>(There's sadly someone out there teaching <code>map</code> [<a href=""https://tc39.es/ecma262/#sec-array.prototype.map"" rel=""noreferrer"">spec</a> / <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"" rel=""noreferrer"">MDN</a>] as though it were <code>forEach</code> — but <a href=""https://thenewtoys.dev/blog/2021/04/17/misusing-map/"" rel=""noreferrer"">that's not what it's for</a>. If you aren't using the array it creates, don't use <code>map</code>.)</em></li>
<li><strong>Don't use <code>forEach</code></strong> if the callback does asynchronous work and you want the <code>forEach</code> to wait until that work is done (because it won't).</li>
</ul>
</li>
</ul>
<p>But there's <strong>lots</strong> more to explore, read on...</p>
<hr />
<p>JavaScript has powerful semantics for looping through arrays and array-like objects. I've split the answer into two parts: Options for genuine arrays, and options for things that are just array-<em>like</em>, such as the <code>arguments</code> object, other iterable objects (ES2015+), DOM collections, and so on.</p>
<p>Okay, let's look at our options:</p>
<h2>For Actual Arrays</h2>
<p>You have five options (two supported basically forever, another added by ECMAScript 5 [&quot;ES5&quot;], and two more added in ECMAScript 2015 (&quot;ES2015&quot;, aka &quot;ES6&quot;):</p>
<ol>
<li>Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</li>
<li>Use <code>forEach</code> and related (ES5+)</li>
<li>Use a simple <code>for</code> loop</li>
<li>Use <code>for-in</code> <em>correctly</em></li>
<li>Use an iterator explicitly (ES2015+)</li>
</ol>
<p>(You can see those old specs here: <a href=""http://ecma-international.org/ecma-262/5.1/"" rel=""noreferrer"">ES5</a>, <a href=""http://www.ecma-international.org/ecma-262/6.0/index.html"" rel=""noreferrer"">ES2015</a>, but both have been superceded; the current editor's draft is always <a href=""https://tc39.github.io/ecma262/"" rel=""noreferrer"">here</a>.)</p>
<p>Details:</p>
<h3>1. Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</h3>
<p>ES2015 added <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols"" rel=""noreferrer""><em>iterators and iterables</em></a> to JavaScript. Arrays are iterable (so are strings, <code>Map</code>s, and <code>Set</code>s, as well as DOM collections and lists, as you'll see later). Iterable objects provide iterators for their values. The new <code>for-of</code> statement loops through the values returned by an iterator:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const a = [""a"", ""b"", ""c""];
for (const val of a) { // You can use `let` instead of `const` if you like
    console.log(val);
}
// a
// b
// c</code></pre>
</div>
</div>
</p>
<p>It doesn't get simpler than that! Under the covers, that gets an iterator from the array and loops through the values the iterator returns. The iterator provided by arrays provides the values of the array elements, in order beginning to end.</p>
<p>Notice how <code>val</code> is scoped to each loop iteration; trying to use <code>val</code> after the end of the loop would fail because it doesn't exist outside the loop body.</p>
<p>In theory, a <code>for-of</code> loop involves several function calls (one to get the iterator, then one to get each value from it). Even when that's true, it's nothing to worry about, function calls are <em><strong>very</strong></em> cheap in modern JavaScript engines (it bothered me for <code>forEach</code> [below] until I looked into it; <a href=""http://blog.niftysnippets.org/2012/02/foreach-and-runtime-cost.html"" rel=""noreferrer"">details</a>). But additionally, JavaScript engines optimize those calls away (in performance-critical code) when dealing with native iterators for things like arrays.</p>
<p><code>for-of</code> is entirely <code>async</code>-friendly. If you need the work in a loop body to be done in series (not in parallel), an <code>await</code> in the loop body will wait for the promise to settle before continuing. Here's a silly example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function delay(ms) {
    return new Promise(resolve =&gt; {
        setTimeout(resolve, ms);
    });
}

async function showSlowly(messages) {
    for (const str of messages) {
        await delay(400);
        console.log(str);
    }
}

showSlowly([
    ""So"", ""long"", ""and"", ""thanks"", ""for"", ""all"", ""the"", ""fish!""
]);
// `.catch` omitted because we know it never rejects</code></pre>
</div>
</div>
</p>
<p>Note how the words appear with a delay before each one.</p>
<p>It's a matter of coding style, but <code>for-of</code> is the first thing I reach for when looping through anything iterable.</p>
<h3>2. Use <code>forEach</code> and related</h3>
<p>In any even vaguely-modern environment (so, not IE8) where you have access to the <code>Array</code> features added by ES5, you can use <code>forEach</code> (<a href=""https://tc39.es/ecma262/#sec-array.prototype.foreach"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"" rel=""noreferrer"">MDN</a>) if you're only dealing with synchronous code (or you don't need to wait for an asynchronous process to finish during the loop):</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const a = [""a"", ""b"", ""c""];
a.forEach((entry) =&gt; {
    console.log(entry);
});</code></pre>
</div>
</div>
</p>
<p><code>forEach</code> accepts a callback function and, optionally, a value to use as <code>this</code> when calling that callback (not used above). The callback is called for each entry in the array, in order, skipping non-existent entries in sparse arrays. Although I only used one parameter above, the callback is called with three arguments: The value of each entry, the index of that entry, and a reference to the array you're iterating over (in case your function doesn't already have it handy).</p>
<p>Like <code>for-of</code>, <code>forEach</code> has the advantage that you don't have to declare indexing and value variables in the containing scope; in this case, they're supplied as arguments to the iteration function, and so nicely scoped to just that iteration.</p>
<p>Unlike <code>for-of</code>, <code>forEach</code> has the disadvantage that it doesn't understand <code>async</code> functions and <code>await</code>. If you use an <code>async</code> function as the callback, <code>forEach</code> does <strong>not</strong> wait for that function's promise to settle before continuing. Here's the <code>async</code> example from <code>for-of</code> using <code>forEach</code> instead — notice how there's an initial delay, but then all the text appears right away instead of waiting:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function delay(ms) {
    return new Promise(resolve =&gt; {
        setTimeout(resolve, ms);
    });
}

async function showSlowly(messages) {
    messages.forEach(async message =&gt; { // Doesn't wait before continuing
        await delay(400);
        console.log(message);
    });
}

showSlowly([
    ""So"", ""long"", ""and"", ""thanks"", ""for"", ""all"", ""the"", ""fish!""
]);
// `.catch` omitted because we know it never rejects</code></pre>
</div>
</div>
</p>
<p><code>forEach</code> is the &quot;loop through them all&quot; function, but ES5 defined several other useful &quot;work your way through the array and do things&quot; functions, including:</p>
<ul>
<li><code>every</code> (<a href=""https://tc39.es/ecma262/#sec-array.prototype.every"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every"" rel=""noreferrer"">MDN</a>) - stops looping the first time the callback returns a falsy value</li>
<li><code>some</code> (<a href=""https://tc39.es/ecma262/#sec-array.prototype.some"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some"" rel=""noreferrer"">MDN</a>) - stops looping the first time the callback returns a truthy value</li>
<li><code>filter</code> (<a href=""https://tc39.es/ecma262/#sec-array.prototype.filter"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"" rel=""noreferrer"">MDN</a>) - creates a new array including elements where the callback returns a truthy value, omitting the ones where it doesn't</li>
<li><code>map</code> (<a href=""https://tc39.es/ecma262/#sec-array.prototype.map"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"" rel=""noreferrer"">MDN</a>) - creates a new array from the values returned by the callback</li>
<li><code>reduce</code> (<a href=""https://tc39.es/ecma262/#sec-array.prototype.reduce"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce"" rel=""noreferrer"">MDN</a>) - builds up a value by repeatedly calling the callback, passing in previous values; see the spec for the details</li>
<li><code>reduceRight</code> (<a href=""https://tc39.es/ecma262/#sec-array.prototype.reduceright"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight"" rel=""noreferrer"">MDN</a>) - like <code>reduce</code>, but works in descending rather than ascending order</li>
</ul>
<p>As with <code>forEach</code>, if you use an <code>async</code> function as your callback, none of those waits for the function's promise to settle. That means:</p>
<ul>
<li>Using an <code>async</code> function callback is never appropriate with <code>every</code>, <code>some</code>, and <code>filter</code> since they will treat the returned promise as though it were a truthy value; they <strong>don't</strong> wait for the promise to settle and then use the fulfillment value.</li>
<li>Using an <code>async</code> function callback is often appropriate with <code>map</code>, <strong>if</strong> the goal is to turn an array of something into an array of <em>promises</em>, perhaps for passing to one of the promise combinator functions (<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all"" rel=""noreferrer""><code>Promise.all</code></a>, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race"" rel=""noreferrer""><code>Promise.race</code></a>, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled"" rel=""noreferrer""><code>promise.allSettled</code></a>, or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any"" rel=""noreferrer""><code>Promise.any</code></a>).</li>
<li>Using an <code>async</code> function callback is rarely appropriate with <code>reduce</code> or <code>reduceRight</code>, because (again) the callback will always return a promise. But there is an idiom of building a chain of promises from an array that uses <code>reduce</code> (<code>const promise = array.reduce((p, element) =&gt; p.then(/*...something using `element`...*/));</code>), but usually in those cases a <code>for-of</code> or <code>for</code> loop in an <code>async</code> function will be clearer and easier to debug.</li>
</ul>
<h3>3. Use a simple <code>for</code> loop</h3>
<p>Sometimes the old ways are the best:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const a = [""a"", ""b"", ""c""];
for (let index = 0; index &lt; a.length; ++index) {
    console.log(a[index]);
}</code></pre>
</div>
</div>
</p>
<p>If the length of the array won't change during the loop, and it's in performance-sensitive code (unlikely), a slightly more complicated version grabbing the length up front might be a <em><strong>tiny</strong></em> bit faster:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const a = [""a"", ""b"", ""c""];
for (let index = 0, len = a.length; index &lt; len; ++index) {
    console.log(a[index]);
}</code></pre>
</div>
</div>
</p>
<p>And/or counting backward:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const a = [""a"", ""b"", ""c""];
for (let index = a.length - 1; index &gt;= 0; --index) {
    console.log(a[index]);
}</code></pre>
</div>
</div>
</p>
<p>But with modern JavaScript engines, it's rare you need to eke out that last bit of juice.</p>
<p>Before ES2015, the loop variable had to exist in the containing scope, because <code>var</code> only has function-level scope, not block-level scope. But as you saw in the examples above, you can use <code>let</code> within the <code>for</code> to scope the variables to just the loop. And when you do that, the <code>index</code> variable is recreated for each loop iteration, meaning closures created in the loop body keep a reference to the <code>index</code> for that specific iteration, which solves the old &quot;closures in loops&quot; problem:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const divs = document.querySelectorAll(""div"");
for (let index = 0; index &lt; divs.length; ++index) {
    divs[index].addEventListener('click', e =&gt; {
        console.log(""Index is: "" + index);
    });
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div&gt;zero&lt;/div&gt;
&lt;div&gt;one&lt;/div&gt;
&lt;div&gt;two&lt;/div&gt;
&lt;div&gt;three&lt;/div&gt;
&lt;div&gt;four&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<p>In the above, you get &quot;Index is: 0&quot; if you click the first and &quot;Index is: 4&quot; if you click the last. This does <strong>not</strong> work if you use <code>var</code> instead of <code>let</code>.</p>
<p>Like <code>for-of</code>, <code>for</code> loops work well in <code>async</code> functions. Here's the earlier example using a <code>for</code> loop:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function delay(ms) {
    return new Promise(resolve =&gt; {
        setTimeout(resolve, ms);
    });
}

async function showSlowly(messages) {
    for (let i = 0; i &lt; messages.length; ++i) {
        await delay(400);
        console.log(messages[i]);
    }
}

showSlowly([
    ""So"", ""long"", ""and"", ""thanks"", ""for"", ""all"", ""the"", ""fish!""
]);
// `.catch` omitted because we know it never rejects</code></pre>
</div>
</div>
</p>
<h3>4. Use <code>for-in</code> <em>correctly</em></h3>
<p><code>for-in</code> isn't for looping through arrays, it's for looping through the names of an object's properties. It does often seem to work for looping through arrays as a by-product of the fact that arrays are objects, but it doesn't just loop through the array indexes, it loops through <strong>all</strong> enumerable properties of the object (including inherited ones). (It also used to be that the order wasn't specified; it is now [details in <a href=""https://stackoverflow.com/a/30919039/157247"">this other answer</a>], but even though the order is specified now, the rules are complex, there are exceptions, and relying on the order is not best practice.)</p>
<p>The only real use cases for <code>for-in</code> on an array are:</p>
<ul>
<li>It's a <a href=""http://en.wikipedia.org/wiki/Sparse_array"" rel=""noreferrer""><em>sparse</em> array</a> with <strong>massive</strong> gaps in it, or</li>
<li>You're using non-element properties and you want to include them in the loop</li>
</ul>
<p>Looking only at that first example: You can use <code>for-in</code> to visit those sparse array elements if you use appropriate safeguards:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// `a` is a sparse array
const a = [];
a[0] = ""a"";
a[10] = ""b"";
a[10000] = ""c"";
for (const name in a) {
    if (a.hasOwnProperty(name)  &amp;&amp;      // These checks are
        /^0$|^[1-9]\d*$/.test(name) &amp;&amp;  // explained
        name &lt;= 4294967294              // below
       ) {
        console.log(a[name]);
    }
}</code></pre>
</div>
</div>
</p>
<p>Note the three checks:</p>
<ol>
<li><p>That the object has its <em>own</em> property by that name (not one it inherits from its prototype), and</p>
</li>
<li><p>That the name is all decimal digits (e.g., normal string form, not scientific notation), and</p>
</li>
<li><p>That the name's value when coerced to a number is &lt;= 2^32 - 2 (which is 4,294,967,294). Where does that number come from? It's part of the definition of an array index <a href=""https://tc39.es/ecma262/#array-index"" rel=""noreferrer"">in the specification</a>. Other numbers (non-integers, negative numbers, numbers greater than 2^32 - 2) are not array indexes. The reason it's 2^32 - <strong>2</strong> is that that makes the greatest index value one lower than 2^32 - <strong>1</strong>, which is the maximum value an array's <code>length</code> can have. (E.g., an array's length fits in a 32-bit unsigned integer.)</p>
</li>
</ol>
<p>You wouldn't do that in inline code, of course. You'd write a utility function. Perhaps:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Utility function for antiquated environments without `forEach`
const hasOwn = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty);
const rexNum = /^0$|^[1-9]\d*$/;
function sparseEach(array, callback, thisArg) {
    for (const name in array) {
        const index = +name;
        if (hasOwn(a, name) &amp;&amp;
            rexNum.test(name) &amp;&amp;
            index &lt;= 4294967294
           ) {
            callback.call(thisArg, array[name], index, array);
        }
    }
}

const a = [];
a[5] = ""five"";
a[10] = ""ten"";
a[100000] = ""one hundred thousand"";
a.b = ""bee"";

sparseEach(a, (value, index) =&gt; {
    console.log(""Value at "" + index + "" is "" + value);
});</code></pre>
</div>
</div>
</p>
<p>...although with that said, most code only does the <code>hasOwnProperty</code> check.</p>
<p>Like <code>for</code>, <code>for-in</code> works well in asynchronous functions if the work within it needs to be done in series.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function delay(ms) {
    return new Promise(resolve =&gt; {
        setTimeout(resolve, ms);
    });
}

async function showSlowly(messages) {
    for (const name in messages) {
        if (messages.hasOwnProperty(name)) {
            await delay(400);
            console.log(messages[name]);
        }
    }
}

showSlowly([
    ""So"", ""long"", ""and"", ""thanks"", ""for"", ""all"", ""the"", ""fish!""
]);
// `.catch` omitted because we know it never rejects</code></pre>
</div>
</div>
</p>
<h3>5. Use an iterator explicitly (ES2015+)</h3>
<p><code>for-of</code> uses an iterator implicitly, doing all the scut work for you. Sometimes, you might want to use an iterator <em>explicitly</em>. It looks like this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const a = [""a"", ""b"", ""c""];
const it = a.values(); // Or `const it = a[Symbol.iterator]();` if you like
let entry;
while (!(entry = it.next()).done) {
    console.log(entry.value);
}</code></pre>
</div>
</div>
</p>
<p>An iterator is an object matching the Iterator definition in the specification. Its <code>next</code> method returns a new <em>result object</em> each time you call it. The result object has a property, <code>done</code>, telling us whether it's done, and a property <code>value</code> with the value for that iteration. (<code>done</code> is optional if it would be <code>false</code>, <code>value</code> is optional if it would be <code>undefined</code>.)</p>
<p>What you get for <code>value</code> varies depending on the iterator. On arrays, the default iterator provides the value of each array element (<code>&quot;a&quot;</code>, <code>&quot;b&quot;</code>, and <code>&quot;c&quot;</code> in the example earlier). Arrays also have three other methods that return iterators:</p>
<ul>
<li><code>values()</code>: This is an alias for the <code>[Symbol.iterator]</code> method that returns the default iterator.</li>
<li><code>keys()</code>: Returns an iterator that provides each key (index) in the array. In the example above, it would provide <code>&quot;0&quot;</code>, then <code>&quot;1&quot;</code>, then <code>&quot;2&quot;</code> (yes, as strings).</li>
<li><code>entries()</code>: Returns an iterator that provides <code>[key, value]</code> arrays.</li>
</ul>
<p>Since iterator objects don't advance until you call <code>next</code>, they work well in <code>async</code> function loops. Here's the earlier <code>for-of</code> example using the iterator explicitly:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function delay(ms) {
    return new Promise(resolve =&gt; {
        setTimeout(resolve, ms);
    });
}

async function showSlowly(messages) {
    const it = messages.values()
    while (!(entry = it.next()).done) {
        await delay(400);
        console.log(entry.value);
    }
}

showSlowly([
    ""So"", ""long"", ""and"", ""thanks"", ""for"", ""all"", ""the"", ""fish!""
]);
// `.catch` omitted because we know it never rejects</code></pre>
</div>
</div>
</p>
<h2>For Array-Like Objects</h2>
<p>Aside from true arrays, there are also <em>array-like</em> objects that have a <code>length</code> property and properties with all-digits names: <a href=""https://dom.spec.whatwg.org/#interface-nodelist"" rel=""noreferrer""><code>NodeList</code> instances</a>, <a href=""https://dom.spec.whatwg.org/#interface-htmlcollection"" rel=""noreferrer""><code>HTMLCollection</code> instances</a>, the <code>arguments</code> object, etc. How do we loop through their contents?</p>
<h3>Use most of the options above</h3>
<p>At least some, and possibly most or even all, of the array approaches above apply equally well to array-like objects:</p>
<ol>
<li><p><strong>Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</strong></p>
<p><code>for-of</code> uses the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols"" rel=""noreferrer"">iterator</a> provided by the object (if any). That includes host-provided objects (like DOM collections and lists). For instance, <code>HTMLCollection</code> instances from <code>getElementsByXYZ</code> methods and <code>NodeList</code>s instances from <code>querySelectorAll</code> both support iteration. (This is defined <strong>quite</strong> subtly by the HTML and DOM specifications. Basically, any object with <code>length</code> and indexed access is automatically iterable. It <strong>doesn't</strong> have to be marked <code>iterable</code>; that is used only for collections that, in addition to being iterable, support <code>forEach</code>, <code>values</code>, <code>keys</code>, and <code>entries</code> methods. <code>NodeList</code> does; <code>HTMLCollection</code> doesn't, but both are iterable.)</p>
<p>Here's an example of looping through <code>div</code> elements:</p>
</li>
</ol>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const divs = document.querySelectorAll(""div"");
for (const div of divs) {
    div.textContent = Math.random();
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div&gt;zero&lt;/div&gt;
&lt;div&gt;one&lt;/div&gt;
&lt;div&gt;two&lt;/div&gt;
&lt;div&gt;three&lt;/div&gt;
&lt;div&gt;four&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<ol start=""2"">
<li><p><strong>Use <code>forEach</code> and related (ES5+)</strong></p>
<p>The various functions on <code>Array.prototype</code> are &quot;intentionally generic&quot; and can be used on array-like objects via <code>Function#call</code> (<a href=""https://tc39.es/ecma262/#sec-function.prototype.call"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call"" rel=""noreferrer"">MDN</a>) or <code>Function#apply</code> (<a href=""https://tc39.es/ecma262/#sec-function.prototype.apply"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"" rel=""noreferrer"">MDN</a>). (If you have to deal with IE8 or earlier [ouch], see the &quot;Caveat for host-provided objects&quot; at the end of this answer, but it's not an issue with vaguely-modern browsers.)</p>
<p>Suppose you wanted to use <code>forEach</code> on a <code>Node</code>'s <code>childNodes</code> collection (which, being an <code>HTMLCollection</code>, doesn't have <code>forEach</code> natively). You'd do this:</p>
<pre><code>Array.prototype.forEach.call(node.childNodes, (child) =&gt; {
    // Do something with `child`
});
</code></pre>
<p>(Note, though, that you could just use <code>for-of</code> on <code>node.childNodes</code>.)</p>
<p>If you're going to do that a lot, you might want to grab a copy of the function reference into a variable for reuse, e.g.:</p>
<pre><code>// (This is all presumably in a module or some scoping function)
const forEach = Array.prototype.forEach.call.bind(Array.prototype.forEach);

// Then later...
forEach(node.childNodes, (child) =&gt; {
    // Do something with `child`
});
</code></pre>
</li>
<li><p><strong>Use a simple <code>for</code> loop</strong></p>
<p>Perhaps obviously, a simple <code>for</code> loop works for array-like objects.</p>
</li>
<li><p><strong>Use an iterator explicitly (ES2015+)</strong></p>
<p>See #1.</p>
</li>
</ol>
<p>You <em><strong>may</strong></em> be able to get away with <code>for-in</code> (with safeguards), but with all of these more appropriate options, there's no reason to try.</p>
<h3>Create a true array</h3>
<p>Other times, you may want to convert an array-like object into a true array. Doing that is surprisingly easy:</p>
<ol>
<li><p><strong>Use <code>Array.from</code></strong></p>
<p><code>Array.from</code> <a href=""https://tc39.es/ecma262/#sec-array.from"" rel=""noreferrer"">(spec)</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from"" rel=""noreferrer"">(MDN)</a> (ES2015+, but easily polyfilled) creates an array from an array-like object, optionally passing the entries through a mapping function first. So:</p>
<pre><code>const divs = Array.from(document.querySelectorAll(&quot;div&quot;));
</code></pre>
<p>...takes the <code>NodeList</code> from <code>querySelectorAll</code> and makes an array from it.</p>
<p>The mapping function is handy if you were going to map the contents in some way. For instance, if you wanted to get an array of the tag names of the elements with a given class:</p>
<pre><code>// Typical use (with an arrow function):
const divs = Array.from(document.querySelectorAll(&quot;.some-class&quot;), element =&gt; element.tagName);

// Traditional function (since `Array.from` can be polyfilled):
var divs = Array.from(document.querySelectorAll(&quot;.some-class&quot;), function(element) {
    return element.tagName;
});
</code></pre>
</li>
<li><p><strong>Use spread syntax (<code>...</code>)</strong></p>
<p>It's also possible to use ES2015's <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"" rel=""noreferrer"">spread syntax</a>. Like <code>for-of</code>, this uses the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols"" rel=""noreferrer"">iterator</a> provided by the object (see #1 in the previous section):</p>
<pre><code>const trueArray = [...iterableObject];
</code></pre>
<p>So for instance, if we want to convert a <code>NodeList</code> into a true array, with spread syntax this becomes quite succinct:</p>
<pre><code>const divs = [...document.querySelectorAll(&quot;div&quot;)];
</code></pre>
</li>
<li><p><strong>Use the <code>slice</code> method of arrays</strong></p>
<p>We can use the <a href=""https://tc39.es/ecma262/#sec-array.prototype.slice"" rel=""noreferrer""><code>slice</code></a> method of arrays, which like the other methods mentioned above is &quot;intentionally generic&quot; and so can be used with array-like objects, like this:</p>
<pre><code>const trueArray = Array.prototype.slice.call(arrayLikeObject);
</code></pre>
<p>So for instance, if we want to convert a <code>NodeList</code> into a true array, we could do this:</p>
<pre><code>const divs = Array.prototype.slice.call(document.querySelectorAll(&quot;div&quot;));
</code></pre>
<p>(If you still have to handle IE8 [ouch], will fail; IE8 didn't let you use host-provided objects as <code>this</code> like that.)</p>
</li>
</ol>
<h3>Caveat for host-provided objects</h3>
<p>If you use <code>Array.prototype</code> functions with <em>host-provided</em> array-like objects (for example, DOM collections and such provided by the browser rather than the JavaScript engine), obsolete browsers like IE8 didn't necessarily handle that way, so if you have to support them, be sure to test in your target environments. But it's not an issue with vaguely-modern browsers. (For non-browser environments, naturally it'll depend on the environment.)</p>
"
"40023889","1","<p>The problem with most solutions here is that they rewind the stack. This can be a big problem in some cases.In this example I show how to use iterators in different way to simulate <strong><em>real sleep</em></strong></p>

<p>In this example the generator is calling  it's own <code>next()</code> so once it's going, it's on his own.</p>

<pre><code>var h=a();
h.next().value.r=h; //that's how U run it, best I came up with

//sleep without breaking stack !!!
function *a(){
    var obj= {};

    console.log(""going to sleep....2s"")

    setTimeout(function(){obj.r.next();},2000)  
     yield obj;

    console.log(""woke up"");
    console.log(""going to sleep no 2....2s"")
    setTimeout(function(){obj.r.next();},2000)  
     yield obj;

     console.log(""woke up"");
    console.log(""going to sleep no 3....2s"")

     setTimeout(function(){obj.r.next();},2000) 
     yield obj;

    console.log(""done"");

}
</code></pre>
"
"20690490","1671","<p><strong>Edited on 2016 October</strong></p>
<ul>
<li>Do it simple, intuitive and explicit (<a href=""https://en.wikipedia.org/wiki/Occam%27s_razor"" rel=""noreferrer"">Occam's razor</a>)</li>
<li>Do it immutable (original array stay unchanged)</li>
<li>Do it with standard JavaScript functions, if your browser doesn't support them - <strong>use polyfill</strong></li>
</ul>
<p>In this code example I use <strong>&quot;array.filter(...)&quot;</strong> function to remove unwanted items from an array. This function doesn't change the original array and creates a new one. If your browser doesn't support this function (e.g. Internet Explorer before version 9, or Firefox before version 1.5), consider using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Polyfill"" rel=""noreferrer""><strong>the filter polyfill from Mozilla</strong></a>.</p>
<h2>Removing item (ECMA-262 Edition 5 code aka oldstyle JavaScript)</h2>
<pre><code>var value = 3

var arr = [1, 2, 3, 4, 5, 3]

arr = arr.filter(function(item) {
    return item !== value
})

console.log(arr)
// [ 1, 2, 4, 5 ]
</code></pre>
<h2>Removing item (ECMAScript 6 code)</h2>
<pre><code>let value = 3

let arr = [1, 2, 3, 4, 5, 3]

arr = arr.filter(item =&gt; item !== value)

console.log(arr)
// [ 1, 2, 4, 5 ]
</code></pre>
<p><strong>IMPORTANT</strong> ECMAScript 6 &quot;() =&gt; {}&quot; arrow function syntax is not supported in Internet Explorer at all, Chrome before 45 version, Firefox before 22 version, and Safari before 10 version. To use ECMAScript 6 syntax in old browsers you can use <a href=""http://babeljs.io"" rel=""noreferrer"">BabelJS</a>.</p>
<hr />
<h2>Removing multiple items (ECMAScript 7 code)</h2>
<p>An additional advantage of this method is that you can remove multiple items</p>
<pre><code>let forDeletion = [2, 3, 5]

let arr = [1, 2, 3, 4, 5, 3]

arr = arr.filter(item =&gt; !forDeletion.includes(item))
// !!! Read below about array.includes(...) support !!!

console.log(arr)
// [ 1, 4 ]
</code></pre>
<p><strong>IMPORTANT</strong> &quot;array.includes(...)&quot; function is not supported in Internet Explorer at all, Chrome before 47 version, Firefox before 43 version, Safari before 9 version, and Edge before 14 version so <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Polyfill"" rel=""noreferrer""><strong>here is polyfill from Mozilla</strong></a>.</p>
<h2>Removing multiple items (in the future, maybe)</h2>
<p>If the <a href=""https://github.com/tc39/proposal-bind-operator"" rel=""noreferrer"">&quot;This-Binding Syntax&quot;</a> proposal is ever accepted, you'll be able to do this:</p>
<pre><code>// array-lib.js

export function remove(...forDeletion) {
    return this.filter(item =&gt; !forDeletion.includes(item))
}

// main.js

import { remove } from './array-lib.js'

let arr = [1, 2, 3, 4, 5, 3]

// :: This-Binding Syntax Proposal
// using &quot;remove&quot; function as &quot;virtual method&quot;
// without extending Array.prototype
arr = arr::remove(2, 3, 5)

console.log(arr)
// [ 1, 4 ]
</code></pre>
<p><a href=""https://babeljs.io/repl/#?babili=false&amp;evaluate=true&amp;lineWrap=false&amp;presets=es2015%2Creact%2Cstage-0%2Cstage-2&amp;targets=&amp;browsers=chrome%20%3E%2050&amp;builtIns=false&amp;code=%20%20%20%20function%20remove(...forDeletion)%20%7B%0A%20%20%20%20%20%20%20%20return%20this.filter(item%20%3D%3E%20!forDeletion.includes(item))%0A%20%20%20%20%7D%0A%0A%20%20%20%20let%20arr%20%3D%20%5B1%2C%202%2C%203%2C%204%2C%205%2C%203%5D%0A%0A%20%20%20%20%2F%2F%20%3A%3A%20This-Binding%20Syntax%20Proposal%0A%20%20%20%20%2F%2F%20using%20remove%20function%20as%20%22virtual%20method%22%0A%20%20%20%20arr%20%3D%20arr%3A%3Aremove(2%2C%203%2C%205)%0A%0A%20%20%20%20console.log(arr)%0A%20%20%20%20%2F%2F%20%5B%201%2C%204%20%5D"" rel=""noreferrer""><strong>Try it yourself in BabelJS :)</strong></a></p>
<p><strong>Reference</strong></p>
<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"" rel=""noreferrer"">Array.prototype.includes</a></li>
<li><a href=""https://vanslaars.io/post/create-pipe-function/"" rel=""noreferrer"">Functional composition</a></li>
</ul>
"
"40036128","0","<p>At server side, you can use the <a href=""https://www.npmjs.com/package/deasync"" rel=""nofollow"">deasync</a> <code>sleep()</code> method, which is natively implemented in <em>C</em> so it can effectively implement a <em>wait</em> effect without blocking the <em>event-loop</em> or putting your CPU at 100% of load.</p>

<p>Example:</p>

<pre><code>#!/usr/bin/env node

// Requires `npm install --save deasync`
var sleep = require(""deasync"").sleep;

sleep(5000);

console.log (""Hello World!!"");
</code></pre>

<p>But, if you need a <em>pure</em> javascript function (for example, to run it at client-side by a browser), I'm sorry to say that I think your <code>pausecomp()</code> function is the only way to approach it and, more than that:</p>

<ol>
<li><p>That pauses not only your function but the whole event loop. So no other events will be attended.</p></li>
<li><p>It puts your cpu at 100% load.</p></li>
</ol>

<p>So, if you need it for a browser script and doesn't want those terrible effects, I must say you should rethink your function in a way:</p>

<p>a). You can recall it (or call a <code>do_the_rest()</code> function) at a timeout. The easier way if you are not expecting any result from your function.</p>

<p>b). Or, if you need to wait for a result, then you should move to using promises (or a callback hell, of course ;-)).</p>

<p>No result expected example:</p>

<pre><code>function myFunc() {

    console.log (""Do some things"");

    setTimeout(function doTheRest(){
        console.log (""Do more things..."");
    }, 5000);

    // Returns undefined.
};


myFunc();
</code></pre>

<p>Example returning a promise (notice it alters your function usage):</p>

<pre><code>function myFunc(someString) {

    return new Promise(function(resolve, reject) {

        var result = [someString];
        result.push(""Do some things"");

        setTimeout(function(){
            result.push(""Do more things..."");
            resolve(result.join(""\n""));
        }, 5000);

    });

};


// But notice that this approach affect to the function usage...
// (It returns a promise, not actual data):
myFunc(""Hello!!"").then(function(data){
    console.log(data);
}).catch(function(err){
    console.error(err);
});
</code></pre>
"
"20759804","6","<p>For replacing all kind of characters, try this code:</p>

<pre><code>Suppose we have need to send "" and \ in my string, then we will convert it "" to \"" and \ to \\
</code></pre>

<p>So this method will solve this issue.</p>

<pre><code>String.prototype.replaceAll = function (find, replace) {
     var str = this;
     return str.replace(new RegExp(find.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&amp;'), 'g'), replace);
 };

var message = $('#message').val();
             message = message.replaceAll('\\', '\\\\'); /*it will replace \ to \\ */
             message = message.replaceAll('""', '\\""');   /*it will replace "" to \\""*/
</code></pre>

<p>I was using Ajax, and I had the need to send parameters in JSON format. Then my method is looking like this:</p>

<pre><code> function sendMessage(source, messageID, toProfileID, userProfileID) {

     if (validateTextBox()) {
         var message = $('#message').val();
         message = message.replaceAll('\\', '\\\\');
         message = message.replaceAll('""', '\\""');
         $.ajax({
             type: ""POST"",
             async: ""false"",
             contentType: ""application/json; charset=utf-8"",
             url: ""services/WebService1.asmx/SendMessage"",
             data: '{""source"":""' + source + '"",""messageID"":""' + messageID + '"",""toProfileID"":""' + toProfileID + '"",""userProfileID"":""' + userProfileID + '"",""message"":""' + message + '""}',
             dataType: ""json"",
             success: function (data) {
                 loadMessageAfterSend(toProfileID, userProfileID);
                 $(""#&lt;%=PanelMessageDelete.ClientID%&gt;"").hide();
                 $(""#message"").val("""");
                 $(""#delMessageContainer"").show();
                 $(""#msgPanel"").show();
             },
             error: function (result) {
                 alert(""message sending failed"");
             }
         });
     }
     else {
         alert(""Please type message in message box."");
         $(""#message"").focus();

     }
 }

 String.prototype.replaceAll = function (find, replace) {
     var str = this;
     return str.replace(new RegExp(find.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&amp;'), 'g'), replace);
 };
</code></pre>
"
"20979806","2","<p>Try this:</p>

<pre><code>String.prototype.replaceAll = function (sfind, sreplace) {
    var str = this;

    while (str.indexOf(sfind) &gt; -1) {
        str = str.replace(sfind, sreplace);
    }

    return str;
};
</code></pre>
"
"21160506","42","<p>I'm pretty new to JavaScript and needed this functionality. I merely wrote this:</p>

<pre><code>function removeFromArray(array, item, index) {
  while((index = array.indexOf(item)) &gt; -1) {
    array.splice(index, 1);
  }
}
</code></pre>

<p>Then when I want to use it:</p>

<pre><code>//Set-up some dummy data
var dummyObj = {name:""meow""};
var dummyArray = [dummyObj, ""item1"", ""item1"", ""item2""];

//Remove the dummy data
removeFromArray(dummyArray, dummyObj);
removeFromArray(dummyArray, ""item2"");
</code></pre>

<p>Output - As expected.
[""item1"", ""item1""]</p>

<p>You may have different needs than I, so you can easily modify it to suit them. I hope this helps someone.</p>
"
"21408685","20","<p>Based on all the answers which were mainly correct and taking into account the best practices suggested (especially not using Array.prototype directly), I came up with the below code:</p>

<pre><code>function arrayWithout(arr, values) {
  var isArray = function(canBeArray) {
    if (Array.isArray) {
      return Array.isArray(canBeArray);
    }
    return Object.prototype.toString.call(canBeArray) === '[object Array]';
  };

  var excludedValues = (isArray(values)) ? values : [].slice.call(arguments, 1);
  var arrCopy = arr.slice(0);

  for (var i = arrCopy.length - 1; i &gt;= 0; i--) {
    if (excludedValues.indexOf(arrCopy[i]) &gt; -1) {
      arrCopy.splice(i, 1);
    }
  }

  return arrCopy;
}
</code></pre>

<p>Reviewing the above function, despite the fact that it works fine, I realised there could be some performance improvement. Also using ES6 instead of ES5 is a much better approach. To that end, this is the improved code:</p>

<pre><code>const arrayWithoutFastest = (() =&gt; {
  const isArray = canBeArray =&gt; ('isArray' in Array) 
    ? Array.isArray(canBeArray) 
    : Object.prototype.toString.call(canBeArray) === '[object Array]';

  let mapIncludes = (map, key) =&gt; map.has(key);
  let objectIncludes = (obj, key) =&gt; key in obj;
  let includes;

  function arrayWithoutFastest(arr, ...thisArgs) {
    let withoutValues = isArray(thisArgs[0]) ? thisArgs[0] : thisArgs;

    if (typeof Map !== 'undefined') {
      withoutValues = withoutValues.reduce((map, value) =&gt; map.set(value, value), new Map());
      includes = mapIncludes;
    } else {
      withoutValues = withoutValues.reduce((map, value) =&gt; { map[value] = value; return map; } , {}); 
      includes = objectIncludes;
    }

    const arrCopy = [];
    const length = arr.length;

    for (let i = 0; i &lt; length; i++) {
      // If value is not in exclude list
      if (!includes(withoutValues, arr[i])) {
        arrCopy.push(arr[i]);
      }
    }

    return arrCopy;
  }

  return arrayWithoutFastest;  
})();
</code></pre>

<p>How to use:</p>

<pre><code>const arr = [1,2,3,4,5,""name"", false];

arrayWithoutFastest(arr, 1); // will return array [2,3,4,5,""name"", false]
arrayWithoutFastest(arr, 'name'); // will return [2,3,4,5, false]
arrayWithoutFastest(arr, false); // will return [2,3,4,5]
arrayWithoutFastest(arr,[1,2]); // will return [3,4,5,""name"", false];
arrayWithoutFastest(arr, {bar: ""foo""}); // will return the same array (new copy)
</code></pre>

<p>I am currently writing a blog post in which I have benchmarked several solutions for Array without problem and compared the time it takes to run. I will update this answer with the link once I finish that post. Just to let you know, I have compared the above against lodash's without and in case the browser supports <code>Map</code>, it beats lodash! Notice that I am not using <code>Array.prototype.indexOf</code> or <code>Array.prototype.includes</code> as wrapping the exlcudeValues in a <code>Map</code> or <code>Object</code> makes querying faster!</p>
"
"12830454","3499","<p>If the value is a text type:</p>
<pre><code>parseFloat(&quot;123.456&quot;).toFixed(2);
</code></pre>
<p>If the value is a number:</p>
<pre><code>var numb = 123.23454;
numb = numb.toFixed(2);
</code></pre>
<p>There is a downside that values like 1.5 will give &quot;1.50&quot; as the output. A fix suggested by @minitech:</p>
<pre><code>var numb = 1.5;
numb = +numb.toFixed(2);
// Note the plus sign that drops any &quot;extra&quot; zeroes at the end.
// It changes the result (which is a string) into a number again (think &quot;0 + foo&quot;),
// which means that it uses only as many digits as necessary.
</code></pre>
<p>It seems like <code>Math.round</code> is a better solution. <strong>But it is not!</strong> In some cases it will <strong>NOT</strong> round correctly:</p>
<pre><code>Math.round(1.005 * 1000)/1000 // Returns 1 instead of expected 1.01!
</code></pre>
<p>toFixed() will also <strong>NOT</strong> round correctly in some cases (tested in Chrome v.55.0.2883.87)!</p>
<p>Examples:</p>
<pre><code>parseFloat(&quot;1.555&quot;).toFixed(2); // Returns 1.55 instead of 1.56.
parseFloat(&quot;1.5550&quot;).toFixed(2); // Returns 1.55 instead of 1.56.
// However, it will return correct result if you round 1.5551.
parseFloat(&quot;1.5551&quot;).toFixed(2); // Returns 1.56 as expected.

1.3555.toFixed(3) // Returns 1.355 instead of expected 1.356.
// However, it will return correct result if you round 1.35551.
1.35551.toFixed(2); // Returns 1.36 as expected.
</code></pre>
<p>I guess, this is because 1.555 is actually something like float 1.55499994 behind the scenes.</p>
<p><strong>Solution 1</strong> is to use a script with required rounding algorithm, for example:</p>
<pre><code>function roundNumber(num, scale) {
  if(!(&quot;&quot; + num).includes(&quot;e&quot;)) {
    return +(Math.round(num + &quot;e+&quot; + scale)  + &quot;e-&quot; + scale);
  } else {
    var arr = (&quot;&quot; + num).split(&quot;e&quot;);
    var sig = &quot;&quot;
    if(+arr[1] + scale &gt; 0) {
      sig = &quot;+&quot;;
    }
    return +(Math.round(+arr[0] + &quot;e&quot; + sig + (+arr[1] + scale)) + &quot;e-&quot; + scale);
  }
}
</code></pre>
<p><a href=""https://plnkr.co/edit/uau8BlS1cqbvWPCHJeOy?p=preview"" rel=""noreferrer"">https://plnkr.co/edit/uau8BlS1cqbvWPCHJeOy?p=preview</a></p>
<p><strong>NOTE:</strong> This is not a universal solution for everyone. There are several different rounding algorithms, your implementation can be different, depends on your requirements. <a href=""https://en.wikipedia.org/wiki/Rounding"" rel=""noreferrer"">https://en.wikipedia.org/wiki/Rounding</a></p>
<p><strong>Solution 2</strong> is to avoid front end calculations and pull rounded values from the backend server.</p>
<p><strong>Edit:</strong> Another possible solution, which is not a bullet proof also.</p>
<pre><code>Math.round((num + Number.EPSILON) * 100) / 100
</code></pre>
<p>In some cases, when you round number like 1.3549999999999998 it will return incorrect result. Should be 1.35 but result is 1.36.</p>
"
"9329496","547","<p><strong>Note</strong>: This answer is hopelessly out-of-date. For a more modern approach, look at <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"" rel=""noreferrer"">the methods available on an array</a>. Methods of interest might be:</p>

<ul>
<li>forEach</li>
<li>map</li>
<li>filter</li>
<li>zip</li>
<li>reduce</li>
<li>every</li>
<li>some</li>
</ul>

<hr>

<p>The standard way to iterate an array in <a href=""http://en.wikipedia.org/wiki/JavaScript"" rel=""noreferrer"">JavaScript</a> is a vanilla <code>for</code>-loop:</p>

<pre><code>var length = arr.length,
    element = null;
for (var i = 0; i &lt; length; i++) {
  element = arr[i];
  // Do something with element
}
</code></pre>

<p>Note, however, that this approach is only good if you have a dense array, and each index is occupied by an element. If the array is sparse, then you can run into performance problems with this approach, since you will iterate over a lot of indices that do not <em>really</em> exist in the array. In this case, a <code>for .. in</code>-loop might be a better idea. <strong>However</strong>, you must use the appropriate safeguards to ensure that only the desired properties of the array (that is, the array elements) are acted upon, since the <code>for..in</code>-loop will also be enumerated in legacy browsers, or if the additional properties are defined as <code>enumerable</code>.</p>

<p>In <a href=""https://en.wikipedia.org/wiki/ECMAScript#ECMAScript.2C_5th_Edition"" rel=""noreferrer"">ECMAScript 5</a> there will be a forEach method on the array prototype, but it is not supported in legacy browsers. So to be able to use it consistently you must either have an environment that supports it (for example, <a href=""http://en.wikipedia.org/wiki/Node.js"" rel=""noreferrer"">Node.js</a> for server side JavaScript), or use a ""Polyfill"". The Polyfill for this functionality is, however, trivial and since it makes the code easier to read, it is a good polyfill to include.</p>
"
"40567028","23","<p>I personally like the simple:</p>

<pre><code>function sleep(seconds){
    var waitUntil = new Date().getTime() + seconds*1000;
    while(new Date().getTime() &lt; waitUntil) true;
}
</code></pre>

<p>then:</p>

<pre><code>sleep(2); // Sleeps for 2 seconds
</code></pre>

<p>I'm using it all the time to create fake load time while creating scripts in P5js</p>
"
"21531501","23","<p>I know there are a lot of answers already, but many of them seem to over complicate the problem.  Here is a simple, recursive way of removing all instances of a key - calls self until index isn't found.  Yes, it only works in browsers with <code>indexOf</code>, but it's simple and can be easily polyfilled.</p>

<p><strong>Stand-alone function</strong></p>

<pre><code>function removeAll(array, key){
    var index = array.indexOf(key);

    if(index === -1) return;

    array.splice(index, 1);
    removeAll(array,key);
}
</code></pre>

<p><strong>Prototype method</strong></p>

<pre><code>Array.prototype.removeAll = function(key){
    var index = this.indexOf(key);

    if(index === -1) return;

    this.splice(index, 1);
    this.removeAll(key);
}
</code></pre>
"
"13083424","6","

<p>This function converts the querystring to a JSON-like object, it also handles value-less and multi-value parameters:</p>

<pre class=""lang-js prettyprint-override""><code>""use strict"";
function getQuerystringData(name) {
    var data = { };
    var parameters = window.location.search.substring(1).split(""&amp;"");
    for (var i = 0, j = parameters.length; i &lt; j; i++) {
        var parameter = parameters[i].split(""="");
        var parameterName = decodeURIComponent(parameter[0]);
        var parameterValue = typeof parameter[1] === ""undefined"" ? parameter[1] : decodeURIComponent(parameter[1]);
        var dataType = typeof data[parameterName];
        if (dataType === ""undefined"") {
            data[parameterName] = parameterValue;
        } else if (dataType === ""array"") {
            data[parameterName].push(parameterValue);
        } else {
            data[parameterName] = [data[parameterName]];
            data[parameterName].push(parameterValue);
        }
    }
    return typeof name === ""string"" ? data[name] : data;
}
</code></pre>

<p>We perform a check for <code>undefined</code> on <code>parameter[1]</code> because <code>decodeURIComponent</code> returns the string ""undefined"" if the variable is <code>undefined</code>, and that's wrong.</p>

<p>Usage:</p>

<pre class=""lang-js prettyprint-override""><code>""use strict"";
var data = getQuerystringData();
var parameterValue = getQuerystringData(""parameterName"");
</code></pre>
"
"41280243","2","<p>This will do you the trick.</p>

<pre><code>var reloadAfter = 10; //seconds
var intervalId = setTimeout(function() {
    //code you want to execute after the time waiting
}, reloadAfter * 1000); // 60000 = 60 sec = 1 min
</code></pre>
"
"21688894","102","<p>You can do it easily with the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"" rel=""noreferrer"">filter</a> method:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function remove(arrOriginal, elementToRemove){
    return arrOriginal.filter(function(el){return el !== elementToRemove});
}
console.log(remove([1, 2, 1, 0, 3, 1, 4], 1));</code></pre>
</div>
</div>
</p>
<p>This removes all elements from the array and also works faster than a combination of <code>slice</code> and <code>indexOf</code>.</p>
"
"26135702","13","<p>If one needs to detect not only empty but also blank strings, I'll add to Goral's answer:</p>

<pre><code>function isEmpty(s){
    return !s.length;    
}

function isBlank(s){
    return isEmpty(s.trim());    
}
</code></pre>
"
"22396258","17","<p>The <code>@import</code> syntax for achieving CSS-like JavaScript importing is possible using a tool such as Mixture via their special <code>.mix</code> file type (see <a href=""http://docs.mixture.io/preprocessors#mix"" rel=""nofollow noreferrer"">here</a>). I assume the application does this via one of above-mentioned methods.</p>
<p>From the Mixture documentation on <code>.mix</code> files:</p>
<blockquote>
<p>Mix files are simply .js or .css files with .mix. in the file name. A
mix file simply     extends the functionality of a normal style or
script file and allows you to import and combine.</p>
</blockquote>
<p>Here's an example <code>.mix</code> file that combines multiple <code>.js</code> files into one:</p>
<pre><code>// scripts-global.mix.js
// Plugins - Global

@import &quot;global-plugins/headroom.js&quot;;
@import &quot;global-plugins/retina-1.1.0.js&quot;;
@import &quot;global-plugins/isotope.js&quot;;
@import &quot;global-plugins/jquery.fitvids.js&quot;;
</code></pre>
<p>Mixture outputs this as <code>scripts-global.js</code> and also as a minified version (<code>scripts-global.min.js</code>).</p>
<p>Note: I'm not in any way affiliated with Mixture, other than using it as a front-end development tool. I came across this question upon seeing a <code>.mix</code> JavaScript file in action (in one of the Mixture boilerplates) and being a bit confused by it (&quot;you can do this?&quot; I thought to myself). Then I realized that it was an application-specific file type (somewhat disappointing, agreed). Nevertheless, figured the knowledge might be helpful for others.</p>
<p><strong>Note:</strong> Mixture was discontinued on 2016/07/26 (after being open sourced on 2015/04/12).</p>
"
"9329551","27","<p>There isn't any <code>for each</code> loop in native <a href=""http://en.wikipedia.org/wiki/JavaScript"" rel=""noreferrer"">JavaScript</a>. You can either use libraries to get this functionality (I recommend <a href=""http://en.wikipedia.org/wiki/Underscore.js"" rel=""noreferrer"">Underscore.js</a>), use a simple <code>for</code> in loop.</p>

<pre><code>for (var instance in objects) {
   ...
}
</code></pre>

<p>However, note that there may be reasons to use an even simpler <code>for</code> loop (see Stack Overflow question <em><a href=""https://stackoverflow.com/questions/500504"">Why is using “for…in” with array iteration such a bad idea?</a></em>)</p>

<pre><code>var instance;
for (var i=0; i &lt; objects.length; i++) {
    var instance = objects[i];
    ...
}
</code></pre>
"
"20276808","43","<p>Here is a time-delay redirection. You can set the delay time to whatever you want:</p>

<pre><code>&lt;!doctype html&gt;
&lt;html lang=""en""&gt;

&lt;head&gt;
    &lt;meta charset=""UTF-8""&gt;
    &lt;title&gt;Your Document Title&lt;/title&gt;
    &lt;script type=""text/javascript""&gt;
        function delayer(delay) {
            onLoad = setTimeout('window.location.href = ""http://www.google.com/""', delay);
        }
    &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;script&gt;
        delayer(8000)
    &lt;/script&gt;
    &lt;div&gt;You will be redirected in 8 seconds!&lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
"
"17652575","6","<p>Don't assume that the variable you check is a string. Don't assume that if this var has a length, then it's a string.</p>

<p>The thing is: think carefully about what your app must do and can accept. Build something robust.</p>

<p>If your method / function should only process a non empty string then test if the argument is a non empty string and don't do some 'trick'.</p>

<p>As an example of something that will explode if you follow some advices here not carefully.</p>

<pre><code>
var getLastChar = function (str) {
 if (str.length > 0)
   return str.charAt(str.length - 1)
}

getLastChar('hello')
=> ""o""

getLastChar([0,1,2,3])
=> TypeError: Object [object Array] has no method 'charAt'
</code>
</pre>

<p>So, I'd stick with</p>

<pre><code>
if (myVar === '')
  ...
</code>
</pre>
"
"22529246","7","<p>I like this version of splice, removing an element by its value using <code>$.inArray</code>:</p>

<pre><code>$(document).ready(function(){
    var arr = [""C#"",""Ruby"",""PHP"",""C"",""C++""];
    var itemtoRemove = ""PHP"";
    arr.splice($.inArray(itemtoRemove, arr),1);
});
</code></pre>
"
"14193950","659","<p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes"" rel=""noreferrer"">There is a <code>String.prototype.includes</code> in ES6</a>:</p>
<pre><code>&quot;potato&quot;.includes(&quot;to&quot;);
&gt; true
</code></pre>
<p>Note that this <a href=""https://caniuse.com/?v=1#feat=es6-string-includes"" rel=""noreferrer"">does not work in Internet Explorer or some other old browsers</a> with no or incomplete ES6 support. To make it work in old browsers, you may wish to use a transpiler like <a href=""https://babeljs.io/"" rel=""noreferrer"">Babel</a>, a shim library like <a href=""https://github.com/paulmillr/es6-shim"" rel=""noreferrer"">es6-shim</a>, or this <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes#Polyfill"" rel=""noreferrer"">polyfill from MDN</a>:</p>
<pre><code>if (!String.prototype.includes) {
  String.prototype.includes = function(search, start) {
    'use strict';
    if (typeof start !== 'number') {
      start = 0;
    }

    if (start + search.length &gt; this.length) {
      return false;
    } else {
      return this.indexOf(search, start) !== -1;
    }
  };
}
</code></pre>
"
"14310305","7","<p>It can be done using Java's sleep method. I've tested it in FF and IE and it doesn't lock the computer, chew up resources, or cause endless server hits. Seems like a clean solution to me.</p>

<p>First you have to get Java loaded up on the page and make its methods available. To do that, I did this:</p>

<pre><code>&lt;html&gt;
&lt;head&gt;

&lt;script type=""text/javascript""&gt;

  function load() {
    var appletRef = document.getElementById(""app"");
    window.java = appletRef.Packages.java;
  } // endfunction

&lt;/script&gt;

&lt;body onLoad=""load()""&gt;

&lt;embed id=""app"" code=""java.applet.Applet"" type=""application/x-java-applet"" MAYSCRIPT=""true"" width=""0"" height=""0"" /&gt;
</code></pre>

<p>Then, all you have to do when you want a painless pause in your JS is:</p>

<pre><code>java.lang.Thread.sleep(xxx)
</code></pre>

<p>Where xxx is time in milliseconds. In my case (by way of justification), this was part of back-end order fulfillment at a very small company and I needed to print an invoice that had to be loaded from the server. I did it by loading the invoice (as a webpage) into an iFrame and then printing the iFrame. Of course, I had to wait until the page was fully loaded before I could print, so the JS had to pause. I accomplished this by having the invoice page (in the iFrame) change a hidden form field on the parent page with the onLoad event.  And the code on the parent page to print the invoice looked like this (irrelevant parts cut for clarity):</p>

<pre><code>var isReady = eval('document.batchForm.ready');
isReady.value=0;

frames['rpc_frame'].location.href=url;

while (isReady.value==0) {
  java.lang.Thread.sleep(250);
} // endwhile

window.frames['rpc_frame'].focus();
window.frames['rpc_frame'].print();
</code></pre>

<p>So the user pushes the button, the script loads the invoice page, then waits, checking every quarter second to see if the invoice page is finished loading, then pops up the print dialog for the user to send it to the printer.  QED.</p>
"
"9329586","92","<p>Some <a href=""http://en.wikipedia.org/wiki/C_%28programming_language%29"" rel=""noreferrer"">C</a>-style languages use <code>foreach</code> to loop through enumerations. In JavaScript this is done with the <a href=""https://developer.mozilla.org/en/JavaScript/Reference/Statements/for...in"" rel=""noreferrer""><code>for..in</code> loop structure</a>:</p>

<pre><code>var index,
    value;
for (index in obj) {
    value = obj[index];
}
</code></pre>

<p>There is a catch. <code>for..in</code> will loop through each of the object's enumerable members, and the members on its prototype. To avoid reading values that are inherited through the object's prototype, simply check if the property belongs to the object:</p>

<pre><code>for (i in obj) {
    if (obj.hasOwnProperty(i)) {
        //do stuff
    }
}
</code></pre>

<p>Additionally, <a href=""https://en.wikipedia.org/wiki/ECMAScript#ECMAScript.2C_5th_Edition"" rel=""noreferrer"">ECMAScript 5</a> has added a <a href=""https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach"" rel=""noreferrer""><code>forEach</code></a> method to <code>Array.prototype</code> which can be used to enumerate over an array using a calback (the polyfill is in the docs so you can still use it for older browsers):</p>

<pre><code>arr.forEach(function (val, index, theArray) {
    //do stuff
});
</code></pre>

<p>It's important to note that <code>Array.prototype.forEach</code> doesn't break when the callback returns <code>false</code>. <a href=""http://en.wikipedia.org/wiki/JQuery"" rel=""noreferrer"">jQuery</a> and <a href=""http://en.wikipedia.org/wiki/Underscore.js"" rel=""noreferrer"">Underscore.js</a> provide their own variations on <code>each</code> to provide loops that can be short-circuited.</p>
"
"22870785","26","<p>This is the <strong>fastest</strong> version that <em>doesn't use regular expressions</em>.</p>

<p><a href=""http://jsperf.com/replace-all-vs-split-join/10"" rel=""noreferrer"">Revised jsperf</a></p>

<pre><code>replaceAll = function(string, omit, place, prevstring) {
  if (prevstring &amp;&amp; string === prevstring)
    return string;
  prevstring = string.replace(omit, place);
  return replaceAll(prevstring, omit, place, string)
}
</code></pre>

<p>It is almost <strong>twice</strong> as fast as the split and join method.</p>

<p>As pointed out in a comment here, this will not work if your <code>omit</code> variable contains <code>place</code>, as in: <code>replaceAll(""string"", ""s"", ""ss"")</code>, because it will always be able to replace another occurrence of the word.</p>

<p>There is another jsperf with variants on my recursive replace that go even faster (<a href=""http://jsperf.com/replace-all-vs-split-join/12"" rel=""noreferrer"">http://jsperf.com/replace-all-vs-split-join/12</a>)!</p>

<ul>
<li>Update July 27th 2017: It looks like RegExp now has the fastest performance in the recently released Chrome 59.</li>
</ul>
"
"20491497","20","<p>You can use it like in the following code where <code>getRequestToForwardPage</code> is the request mapping (<a href=""http://en.wikipedia.org/wiki/Uniform_Resource_Locator"" rel=""nofollow noreferrer"">URL</a>). You can also use your URL.</p>

<pre><code>function savePopUp(){
    $.blockUI();
    $.ajax({
        url:""GuestHouseProcessor?roomType=""+$(""#roomType"").val(),
        data: $(""#popForm"").serialize(),
        dataType: ""json"",
        error: (function() {
            alert(""Server Error"");
            $.unblockUI();
    }),
    success: function(map) {
        $(""#layer1"").hide();
        $.unblockUI();
        window.location = ""getRequestToForwardPage"";
    }
});
</code></pre>

<p>This is for the same context of the application.</p>

<p>If you want to use only jquery specific code then following code may help:</p>

<pre><code> $(location).attr('href',""http://www.google.com"");
 $jq(window).attr(""location"",""http://www.google.com"");
 $(location).prop('href',""http://www.google.com""); 
</code></pre>
"
"14515902","4","<p><em><strong>This the most simple and small function JavaScript to get int ans String parameter value from URL</em></strong></p>

<pre><code>/* THIS FUNCTION IS TO FETCH INT PARAMETER VALUES */

function getParameterint(param) {
            var val = document.URL;
            var url = val.substr(val.indexOf(param))  
            var n=parseInt(url.replace(param+""="",""""));
            alert(n); 
}
getParameteraint(""page"");
getParameteraint(""pagee"");

/*THIS FUNCTION IS TO FETCH STRING PARAMETER*/
function getParameterstr(param) {
            var val = document.URL;
            var url = val.substr(val.indexOf(param))  
            var n=url.replace(param+""="","""");
            alert(n); 
}
getParameterstr(""str"");
</code></pre>

<p><strong>Source And DEMO :</strong> <a href=""http://bloggerplugnplay.blogspot.in/2012/08/how-to-get-url-parameter-in-javascript.html"" rel=""nofollow"">http://bloggerplugnplay.blogspot.in/2012/08/how-to-get-url-parameter-in-javascript.html</a></p>
"
"9329601","259","<p>If you’re using the <a href=""http://jquery.com/"" rel=""noreferrer""><strong>jQuery</strong></a> library, you can use <a href=""http://api.jquery.com/jQuery.each/"" rel=""noreferrer""><strong>jQuery.each</strong></a>:</p>



<pre class=""lang-js prettyprint-override""><code>$.each(yourArray, function(index, value) {
  // do your stuff here
});
</code></pre>

<p><strong>EDIT :</strong> </p>

<p>As per question, user want code in javascript instead of jquery so the edit is</p>

<pre class=""lang-js prettyprint-override""><code>var length = yourArray.length;   
for (var i = 0; i &lt; length; i++) {
  // Do something with yourArray[i].
}
</code></pre>
"
"43210888","0","<p>I have had this question for a long time and the answer I needed was not exactly what has been provided here. This wait function causes a synchronous wait that does not tie up the cpu. waitForIt makes an ajax request to anywhere and sets the async flag to false. waitF does the same with a frame and waitD does the same with a div. Ajax takes about 100 ms, frame is about 25, and div is about 1. The wait function leverages all of these depending on how much time you give it. If it didn't wait long enough then do it again. I need this when dealing with multiple asynchronous loading elements. Basically for 'wait until this element exists'. You can play with it here <a href=""https://jsfiddle.net/h2vm29ue/"" rel=""nofollow noreferrer"">https://jsfiddle.net/h2vm29ue/</a> It just leverages the things that the browser naturally waits for. Longer version <a href=""https://jsfiddle.net/5cov1p0z/32/"" rel=""nofollow noreferrer"">https://jsfiddle.net/5cov1p0z/32/</a> is more precise.</p>

<pre><code> function waitForIt() {
     var start = new Date();
     var xhttp = new XMLHttpRequest();
     xhttp.onreadystatechange = function() {
         if (this.readyState == 4 &amp;&amp; this.status == 200) {
            //doesn't matter
         }
     };
     xhttp.open(""GET"", ""WaitForIt"", false);
     xhttp.send();
     var end = new Date();
 }
 //



 function waitF() {
     var start = new Date();
     var ifram = document.createElement('iframe');
     ifram.id = 'ifram';
     ifram.src = '';
     var div = document.createElement('div');
     div.id = 'timer';
     document.body.appendChild(div);
     document.getElementById('timer').appendChild(ifram);
     document.getElementById('timer').removeChild(ifram);
     document.body.removeChild(div);
     var end = new Date();
     return (end - start);
 }


 function waitD() {
     var start = new Date();
     var div = document.createElement('div');
     div.id = 'timer';
     document.body.appendChild(div);
     div.click();
     document.body.removeChild(div);
     var end = new Date();
     return (end - start);
 }

 function wait(time) {
     var start = new Date();
     var end = new Date();
     while ((end - start &lt; time)) {

         if ((time - (end - start)) &gt;= 200) {
             waitForIt();
         } else {
             if ((time - (end - start)) &gt;= 50) {
                 waitF();
             } else {
                 waitD();
             }

         }
         end = new Date();
     }
     return (end - start);
 }
</code></pre>
"
"17606289","2466","<p>For the sake of completeness, I got to thinking about which method I should use to do this. There are basically two ways to do this as suggested by the other answers on this page.</p>

<p><strong>Note:</strong> In general, extending the built-in prototypes in JavaScript is generally not recommended. I am providing as extensions on the String prototype simply for purposes of illustration, showing different implementations of a hypothetical standard method on the <code>String</code> built-in prototype.</p>

<hr>

<h3>Regular Expression Based Implementation</h3>

<pre><code>String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.replace(new RegExp(search, 'g'), replacement);
};
</code></pre>

<h3>Split and Join (Functional) Implementation</h3>

<pre><code>String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.split(search).join(replacement);
};
</code></pre>

<hr>

<p>Not knowing too much about how regular expressions work behind the scenes in terms of efficiency, I tended to lean toward the split and join implementation in the past without thinking about performance. When I did wonder which was more efficient, and by what margin, I used it as an excuse to find out.</p>

<p>On my Chrome Windows&nbsp;8 machine, <strong>the regular expression based implementation is the fastest</strong>, with the <strong>split and join implementation being 53% slower</strong>. Meaning the regular expressions are twice as fast for the lorem ipsum input I used.</p>

<p>Check out this <a href=""http://jsben.ch/#/LFfWA"" rel=""noreferrer""><strong>benchmark</strong></a> running these two implementations against each other.</p>

<hr>

<p>As noted in the comment below by @ThomasLeduc and others, there could be an issue with the regular expression-based implementation if <code>search</code> contains certain characters which are reserved as <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters"" rel=""noreferrer"">special characters in regular expressions</a>. The implementation assumes that the caller will escape the string beforehand or will only pass strings that are without the characters in the table in <em><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters"" rel=""noreferrer"">Regular Expressions</a></em> (MDN).</p>

<p>MDN also provides an implementation to escape our strings. It would be nice if this was also standardized as <code>RegExp.escape(str)</code>, but alas, it does not exist:</p>

<pre><code>function escapeRegExp(str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, ""\\$&amp;""); // $&amp; means the whole matched string
}
</code></pre>

<p>We could call <code>escapeRegExp</code> within our <code>String.prototype.replaceAll</code> implementation, however, I'm not sure how much this will affect the performance (potentially even for strings for which the escape is not needed, like all alphanumeric strings).</p>
"
"14725238","25","<pre><code>function GetQueryStringParams(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&amp;');

    for (var i = 0; i &lt; sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}​
</code></pre>

<p>And this is how you can use this function assuming the URL is</p>

<blockquote>
  <p><code>http://dummy.com/?stringtext=jquery&amp;stringword=jquerybyexample</code></p>
</blockquote>

<pre><code>var tech = GetQueryStringParams('stringtext');
var blog = GetQueryStringParams('stringword');
</code></pre>
"
"15976557","12","<p>I wrote a simple module that automates the job of importing/including module scripts in JavaScript. For detailed explanation of the code, refer to the blog post <em><a href=""http://stamat.wordpress.com/2013/04/12/javascript-require-import-include-modules/"" rel=""noreferrer"">JavaScript require / import / include modules</a></em>.</p>

<pre><code>// ----- USAGE -----

require('ivar.util.string');
require('ivar.net.*');
require('ivar/util/array.js');
require('http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js');

ready(function(){
    //Do something when required scripts are loaded
});

    //--------------------

var _rmod = _rmod || {}; //Require module namespace
_rmod.LOADED = false;
_rmod.on_ready_fn_stack = [];
_rmod.libpath = '';
_rmod.imported = {};
_rmod.loading = {
    scripts: {},
    length: 0
};

_rmod.findScriptPath = function(script_name) {
    var script_elems = document.getElementsByTagName('script');
    for (var i = 0; i &lt; script_elems.length; i++) {
        if (script_elems[i].src.endsWith(script_name)) {
            var href = window.location.href;
            href = href.substring(0, href.lastIndexOf('/'));
            var url = script_elems[i].src.substring(0, script_elems[i].length - script_name.length);
            return url.substring(href.length+1, url.length);
        }
    }
    return '';
};

_rmod.libpath = _rmod.findScriptPath('script.js'); //Path of your main script used to mark
                                                   //the root directory of your library, any library.


_rmod.injectScript = function(script_name, uri, callback, prepare) {

    if(!prepare)
        prepare(script_name, uri);

    var script_elem = document.createElement('script');
    script_elem.type = 'text/javascript';
    script_elem.title = script_name;
    script_elem.src = uri;
    script_elem.async = true;
    script_elem.defer = false;

    if(!callback)
        script_elem.onload = function() {
            callback(script_name, uri);
        };
    document.getElementsByTagName('head')[0].appendChild(script_elem);
};

_rmod.requirePrepare = function(script_name, uri) {
    _rmod.loading.scripts[script_name] = uri;
    _rmod.loading.length++;
};

_rmod.requireCallback = function(script_name, uri) {
    _rmod.loading.length--;
    delete _rmod.loading.scripts[script_name];
    _rmod.imported[script_name] = uri;

    if(_rmod.loading.length == 0)
        _rmod.onReady();
};

_rmod.onReady = function() {
    if (!_rmod.LOADED) {
        for (var i = 0; i &lt; _rmod.on_ready_fn_stack.length; i++){
            _rmod.on_ready_fn_stack[i]();
        });
        _rmod.LOADED = true;
    }
};

_.rmod = namespaceToUri = function(script_name, url) {
    var np = script_name.split('.');
    if (np.getLast() === '*') {
        np.pop();
        np.push('_all');
    }

    if(!url)
        url = '';

    script_name = np.join('.');
    return  url + np.join('/')+'.js';
};

//You can rename based on your liking. I chose require, but it
//can be called include or anything else that is easy for you
//to remember or write, except ""import"", because it is reserved
//for future use.
var require = function(script_name) {
    var uri = '';
    if (script_name.indexOf('/') &gt; -1) {
        uri = script_name;
        var lastSlash = uri.lastIndexOf('/');
        script_name = uri.substring(lastSlash+1, uri.length);
    } 
    else {
        uri = _rmod.namespaceToUri(script_name, ivar._private.libpath);
    }

    if (!_rmod.loading.scripts.hasOwnProperty(script_name)
     &amp;&amp; !_rmod.imported.hasOwnProperty(script_name)) {
        _rmod.injectScript(script_name, uri,
            _rmod.requireCallback,
                _rmod.requirePrepare);
    }
};

var ready = function(fn) {
    _rmod.on_ready_fn_stack.push(fn);
};
</code></pre>
"
"43280904","2","<p>A function to sleep, using a synchronous call to let the OS do it.
Use any OS sleep command you like. It is not busy waiting in the sense of using CPU time.</p>

<p>I chose ping on a non-existant address.</p>

<pre><code>const cp = require('child_process');

function sleep(ms)
{ 
    try{cp.execSync('ping 192.0.2.0 -n 1 -w '+ms);}
    catch(err){}
}
</code></pre>

<p>A test to verify it works</p>

<pre><code>console.log(Date.now());
console.log(Date.now());
sleep(10000);
console.log(Date.now());
console.log(Date.now());
</code></pre>

<p>And some test results.</p>

<pre><code>1491575275136
1491575275157
</code></pre>

<p>(and after 10 seconds)</p>

<pre><code>1491575285075
1491575285076
</code></pre>
"
"23427665","108","<p>This provides a predicate instead of a value.</p>
<p><strong>NOTE:</strong> it will update the given array, and return the affected rows.</p>
<h2>Usage</h2>
<pre><code>var removed = helper.removeOne(arr, row =&gt; row.id === 5 );

var removed = helper.remove(arr, row =&gt; row.name.startsWith('BMW'));
</code></pre>
<h2>Definition</h2>
<pre class=""lang-js prettyprint-override""><code>var helper = {
 // Remove and return the first occurrence

 removeOne: function(array, predicate) {
  for (var i = 0; i &lt; array.length; i++) {
   if (predicate(array[i])) {
    return array.splice(i, 1);
   }
  }
 },

 // Remove and return all occurrences

 remove: function(array, predicate) {
  var removed = [];

  for (var i = 0; i &lt; array.length; ) {
   if (predicate(array[i])) {
    removed.push(array.splice(i, 1));
    continue;
   }
   i++;
  }
  return removed;
 },
};
</code></pre>
"
"14810325","45","<p>From <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URLUtils/search#Get_the_value_of_a_single_search_param"">the MDN</a>:</p>

<pre><code>function loadPageVar (sVar) {
  return unescape(window.location.search.replace(new RegExp(""^(?:.*[&amp;\\?]"" + escape(sVar).replace(/[\.\+\*]/g, ""\\$&amp;"") + ""(?:\\=([^&amp;]*))?)?.*$"", ""i""), ""$1""));
}

alert(loadPageVar(""name""));
</code></pre>
"
"14884254","34","<p>I needed an object from the query string, and I hate lots of code. It may not be the most robust in the universe, but it's just a few lines of code.</p>

<pre><code>var q = {};
location.href.split('?')[1].split('&amp;').forEach(function(i){
    q[i.split('=')[0]]=i.split('=')[1];
});
</code></pre>

<p>A URL like <code>this.htm?hello=world&amp;foo=bar</code> will create:</p>

<pre><code>{hello:'world', foo:'bar'}
</code></pre>
"
"15457506","4","<p>I believe this to be an accurate and concise way to achieve this (modified from <a href=""http://css-tricks.com/snippets/javascript/get-url-variables/"" rel=""nofollow"">http://css-tricks.com/snippets/javascript/get-url-variables/</a>):</p>

<pre class=""lang-js prettyprint-override""><code>function getQueryVariable(variable) {

    var query = window.location.search.substring(1),            // Remove the ? from the query string.
        vars = query.split(""&amp;"");                                // Split all values by ampersand.

    for (var i = 0; i &lt; vars.length; i++) {                     // Loop through them...
        var pair = vars[i].split(""="");                          // Split the name from the value.
        if (pair[0] == variable) {                              // Once the requested value is found...
            return ( pair[1] == undefined ) ? null : pair[1];   // Return null if there is no value (no equals sign), otherwise return the value.
        }
    }

    return undefined;                                           // Wasn't found.

}
</code></pre>
"
"9793452","61","<p>I decided to post an answer on how to do that exact same thing without jQuery. Just because I'm a rebel.</p>

<pre><code>var ageCheckbox = document.getElementById('isAgeSelected');
var ageInput = document.getElementById('txtAge');

// Just because of IE &lt;333
ageCheckbox.onchange = function() {
    // Check if the checkbox is checked, and show/hide the text field.
    ageInput.hidden = this.checked ? false : true;
};
</code></pre>

<p>First you get both elements by their ID. Then you assign the checkboxe's <code>onchange</code> event a function that checks whether the checkbox got checked and sets the <code>hidden</code> property of the age text field appropriately. In that example using the ternary operator.</p>

<p>Here is a <a href=""http://jsfiddle.net/mainerror/cjSkC/"" rel=""noreferrer"">fiddle</a> for you to test it.</p>

<p><strong>Addendum</strong></p>

<p>If cross-browser compatibility is an issue then I propose to set the CSS <code>display</code> property to <em>none</em> and <em>inline</em>.</p>

<pre><code>elem.style.display = this.checked ? 'inline' : 'none';
</code></pre>

<p>Slower but cross-browser compatible.</p>
"
"15694751","18","<p>A very lightweight jQuery method: </p>

<pre><code>var qs = window.location.search.replace('?','').split('&amp;'),
    request = {};
$.each(qs, function(i,v) {
    var initial, pair = v.split('=');
    if(initial = request[pair[0]]){
        if(!$.isArray(initial)) {
            request[pair[0]] = [initial]
        }
        request[pair[0]].push(pair[1]);
    } else {
        request[pair[0]] = pair[1];
    }
    return;
});
console.log(request);
</code></pre>

<p>And to alert, for example ?q</p>

<pre><code>alert(request.q)
</code></pre>
"
"25836438","4","<p>If using a library is an option for you then you will get the benefits of the testing and community support that goes with a library function. For example, the <a href=""http://stringjs.com/"" rel=""nofollow"">string.js</a> library has a replaceAll() function that does what you're looking for:</p>

<pre><code>// Include a reference to the string.js library and call it (for example) S.
str = S(str).replaceAll('abc', '').s;
</code></pre>
"
"46457573","1","<p>To keep the main thread busy for some milliseconds:</p>

<pre><code>function wait(ms) {
  const start = performance.now();
  while(performance.now() - start &lt; ms);
}
</code></pre>
"
"46616110","8","<p>You can easily add it to native <strong>String</strong> object in <strong>JavaScript</strong> and reuse it over and over...<br>
Something simple like below code can do the job for you if you want to check <code>''</code> empty strings:</p>

<pre><code>String.prototype.isEmpty = String.prototype.isEmpty || function() {
  return !(!!this.length);
}
</code></pre>

<p>Otherwise if you'd like to check both <code>''</code> empty string and <code>'   '</code> with space, you can do that by just adding <code>trim()</code>, something like the code below:</p>

<pre><code>String.prototype.isEmpty = String.prototype.isEmpty || function() {
   return !(!!this.trim().length);
}
</code></pre>

<p>and you can call it this way:</p>

<pre><code>''.isEmpty(); //return true
'alireza'.isEmpty(); //return false
</code></pre>
"
"47891308","-2","<p>It is now also possible to use the native module util to promisify regular sync functions.</p>

<pre><code>const { promisify } = require('util')
const sleep = promisify(setTimeout)

module.exports = () =&gt; {
  await someAsyncFunction()
  await sleep(2000)
  console.log('2 seconds later...')
}
</code></pre>
"
"49231174","11","<p>Meanwhile we can have one function that checks for all 'empties' like <strong>null, undefined, '', ' ', {}, []</strong>.
So I just wrote this.</p>

<pre><code>var isEmpty = function(data) {
    if(typeof(data) === 'object'){
        if(JSON.stringify(data) === '{}' || JSON.stringify(data) === '[]'){
            return true;
        }else if(!data){
            return true;
        }
        return false;
    }else if(typeof(data) === 'string'){
        if(!data.trim()){
            return true;
        }
        return false;
    }else if(typeof(data) === 'undefined'){
        return true;
    }else{
        return false;
    }
}
</code></pre>

<p>Use cases and results.</p>

<pre><code>console.log(isEmpty()); // true
console.log(isEmpty(null)); // true
console.log(isEmpty('')); // true
console.log(isEmpty('  ')); // true
console.log(isEmpty(undefined)); // true
console.log(isEmpty({})); // true
console.log(isEmpty([])); // true
console.log(isEmpty(0)); // false
console.log(isEmpty('Hey')); // false
</code></pre>
"
"51118887","7","<p><em>Since Node 7.6</em>, you can combine the  <code>promisify</code> function from the utils module with <code>setTimeout</code>. </p>

<pre><code>const sleep = require('util').promisify(setTimeout)
</code></pre>

<h2>General Usage</h2>

<pre><code>async function main() {
    console.time(""Slept for"")
    await sleep(3000)
    console.timeEnd(""Slept for"")
}

main()
</code></pre>

<h2>Question Usage</h2>

<pre><code>async function asyncGenerator() {
    while (goOn) {
      var fileList = await listFiles(nextPageToken);
      await sleep(3000)
      var parents = await requestParents(fileList);
    }
  }
</code></pre>
"
"52401441","-1","<p>I had a similar problem, having to wait for control existence and checking in intervals.
Since there is no real sleep, wait or pause in JavaScript and using await / async is not supported properly in Internet Explorer, I made a solution using setTimeOut and injecting the function in case of successfully finding the element.
Here is the complete sample code, so everyone can reproduce and use it for their own project:</p>

<pre><code>&lt;html&gt;
&lt;head&gt;
    &lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
    &lt;script type=""text/javascript""&gt;
        var ElementSearchStatus = {
            None: 0,
            Found: 1,
            NotFound: 2,
            Timeout: 3
        };

        var maxTimeout = 5;
        var timeoutMiliseconds = 1000;

        function waitForElement(elementId, count, timeout, onSuccessFunction) {
            ++count;
            var elementSearchStatus = existsElement(elementId, count, timeout);
            if (elementSearchStatus == ElementSearchStatus.None) {
                window.setTimeout(waitForElement, timeoutMiliseconds, elementId, count, timeout, onSuccessFunction);
            }
            else {
                if (elementSearchStatus == ElementSearchStatus.Found) {
                    onSuccessFunction();
                }
            }
        }

        function existsElement(elementId, count, timeout) {
            var foundElements = $(""#"" + elementId);
            if (foundElements.length &gt; 0 || count &gt; timeout) {
                if (foundElements.length &gt; 0) {
                    console.log(elementId + "" found"");
                    return ElementSearchStatus.Found;
                }
                else {
                    console.log(""Search for "" + elementId + "" timed out after "" + count + "" tries."");
                    return ElementSearchStatus.Timeout;
                }
            }
            else {
                console.log(""waiting for "" + elementId + "" after "" + count + "" of "" + timeout);
                return ElementSearchStatus.None;
            }
        }

        function main() {
            waitForElement(""StartButton"", 0, maxTimeout, function () {
                console.log(""found StartButton!"");
                DoOtherStuff(""StartButton2"")
            });
        }

        function DoOtherStuff(elementId) {
            waitForElement(elementId, 0, maxTimeout, function () {
                console.log(""found "" + elementId);
                DoOtherStuff(""StartButton3"");
            });
        }
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;button type=""button"" id=""StartButton"" onclick=""main();""&gt;Start Test&lt;/button&gt;
    &lt;button type=""button"" id=""StartButton2"" onclick=""alert('Hey ya Start Button 2');""&gt;Show alert&lt;/button&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
"
"52667550","-1","<p>A very simple way to do do sleep, that WILL be compatible with anything that runs Javascript... This code has been tested with something like 500 entries, CPU and memory usage still not visible on my web browsers.</p>

<p>Here one function that wait until the node becomes visible... </p>

<p>This function creates a new context <code>function () {}</code> to avoid recursion.  We placed a code that does the same as the caller code inside this new context.  We use the function <code>Timeout</code> to call our function after a few time second.   </p>

<pre><code>var get_hyper = function (node , maxcount , only_relation) {
    if (node.offsetParent === null) {
            // node is hidden
            setTimeout(function () { get_hyper(node , maxcount , only_relation)}
                      ,1000);
            return;
    };

    // Enter here the code that wait that that the node is visible
    // before getting executed.

};
</code></pre>
"
"54145189","2","<p>I prefer this <em>functional style</em> <strong>one liner</strong> <code>sleep</code> function:</p>
<pre class=""lang-js prettyprint-override""><code>const sleep = (ms) =&gt; new Promise((res) =&gt; setTimeout(res, ms, ms));

// usage
async function main() {
  console.log(&quot;before&quot;);
  const t = await sleep(10_000); /* 10 sec */
  console.log(&quot;after &quot; + t);
}
main();
</code></pre>
"
"55393977","0","<p>The problem with using an actual sleep function is that JavaScript is single-threaded and a sleep function will pretty much make your browser tab hang for that duration.</p>
"
"26107132","19","<pre><code>function replaceAll(str, find, replace) {
  var i = str.indexOf(find);
  if (i &gt; -1){
    str = str.replace(find, replace); 
    i = i + replace.length;
    var st2 = str.substring(i);
    if(st2.indexOf(find) &gt; -1){
      str = str.substring(0,i) + replaceAll(st2, find, replace);
    }       
  }
  return str;
}
</code></pre>
"
"26509484","8","<p>Removing the value with index and splice!</p>

<pre><code>function removeArrValue(arr,value) {
    var index = arr.indexOf(value);
    if (index &gt; -1) {
        arr.splice(index, 1);
    }
    return arr;
}
</code></pre>
"
"21600238","96","<p><strong># HTML Page Redirect Using jQuery/JavaScript Method</strong></p>
<p>Try this example code:</p>
<pre><code>function YourJavaScriptFunction()
{
    var i = $('#login').val();
    if (i == 'login')
        window.location = &quot;Login.php&quot;;
    else
        window.location = &quot;Logout.php&quot;;
}
</code></pre>
<p>If you want to give a complete URL as <strong><code>window.location = &quot;www.google.co.in&quot;;</code></strong>.</p>
"
"14772229","7","<p>You can use this</p>

<pre><code>&lt;script&gt;
function my_curr_date() {      
    var currentDate = new Date()
    var day = currentDate.getDate();
    var month = currentDate.getMonth() + 1;
    var year = currentDate.getFullYear();
    var my_date = month+""-""+day+""-""+year;
    document.getElementById(""dateField"").value=my_date;    
}
&lt;/script&gt;
</code></pre>

<p>The HTML is</p>

<pre><code>&lt;body onload='return my_curr_date();'&gt;
    &lt;input type='text' name='dateField' id='dateField' value='' /&gt;
&lt;/body&gt;
</code></pre>
"
"10167931","1139","<p>Yes, assuming your implementation includes the <a href=""http://www.ecma-international.org/ecma-262/6.0/#sec-for-in-and-for-of-statements"" rel=""noreferrer""><code>for</code>...<code>of</code></a> feature introduced in <a href=""http://www.ecma-international.org/ecma-262/6.0/"" rel=""noreferrer"">ECMAScript 2015</a> (the ""Harmony"" release)... which is a pretty safe assumption these days.</p>

<p>It works like this:</p>

<pre><code>// REQUIRES ECMASCRIPT 2015+
var s, myStringArray = [""Hello"", ""World""];
for (s of myStringArray) {
  // ... do something with s ...
}
</code></pre>

<p>Or better yet, since ECMAScript 2015 also provides block-scoped variables:</p>

<pre><code>// REQUIRES ECMASCRIPT 2015+
const myStringArray = [""Hello"", ""World""];
for (const s of myStringArray) {
  // ... do something with s ...
}
// s is no longer defined here
</code></pre>

<p>(The variable <code>s</code> is different on each iteration, but can still be declared <code>const</code> inside the loop body as long as it isn't modified there.)</p>

<p>A note on sparse arrays: an array in JavaScript may not actually store as many items as reported by its <code>length</code>; that reported number is simply one greater than the highest index at which a value is stored. If the array holds fewer elements than indicated by its length, its said to be <em>sparse</em>. For example, it's perfectly legitimate to have an array with items only at indexes 3, 12, and 247; the <code>length</code> of such an array is reported as 248, though it is only actually storing 3 values.  If you try to access an item at any other index, the array will appear to have the <code>undefined</code> value there. So when you want to ""loop through"" an array, you have a question to answer: do you want to loop over the full range indicated by its length and process <code>undefined</code>s for any missing elements, or do you only want to process the elements actually present? There are plenty of applications for both approaches; it just depends on what you're using the array for.</p>

<p>If you iterate over an array with <code>for</code>..<code>of</code>, the body of the loop is executed <code>length</code> times, and the loop control variable is set to <code>undefined</code> for any items not actually present in the array. Depending on the details of your ""do something with"" code, that behavior may be what you want, but if not, you should use a different approach.</p>

<p>Of course, some developers have no choice but to use a different approach anyway, because for whatever reason they're targeting a version of JavaScript that doesn't yet support <code>for</code>...<code>of</code>.</p>

<p>As long as your JavaScript implementation is compliant with the <em>previous</em> edition of the ECMAScript specification (which rules out, for example, versions of Internet Explorer before 9), then you can use the <a href=""http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.foreach"" rel=""noreferrer""><code>Array#forEach</code></a> iterator method instead of a loop. In that case, you pass a function to be called on each item in the array:</p>

<pre><code>var myStringArray = [ ""Hello"", ""World"" ];
myStringArray.forEach( function(s) { 
     // ... do something with s ...
} );
</code></pre>

<p>Unlike <code>for</code>...<code>of</code>, <code>.forEach</code> only calls the function for elements that are actually present in the array. If passed our hypothetical array with three elements and a length of 248, it will only call the function three times, not 248 times. It also distinguishes between missing elements and elements that are actually set to <code>undefined</code>; for the latter, it will still call the function, passing <code>undefined</code> as the argument. If this is how you want to handle sparse arrays, <code>.forEach</code> may be the way to go even if your interpreter supports <code>for</code>...<code>of</code>.</p>

<p>The final option, which works in <em>all</em> versions of JavaScript, is <a href=""http://www.ecma-international.org/ecma-262/6.0/#sec-for-statement"" rel=""noreferrer"">an explicit counting loop</a>. You simply count from 0 up to one less than the length and use the counter as an index. The basic loop looks like this:</p>

<pre><code>var i, s, myStringArray = [ ""Hello"", ""World"" ], len = myStringArray.length;
for (i=0; i&lt;len; ++i) {
  s = myStringArray[i];
  // ... do something with s ...
}
</code></pre>

<p>One advantage of this approach is that you can choose how to handle sparse arrays; the above code will run the body of the loop the full <code>length</code> times, with <code>s</code> set to <code>undefined</code> for any missing elements, just like <code>for</code>..<code>of</code>. If you instead want to handle only the actually-present elements of a sparse array, like <code>.forEach</code>, you can add a simple <code>in</code> test on the index:</p>

<pre><code>var i, s, myStringArray = [ ""Hello"", ""World"" ], len = myStringArray.length;
for (i=0; i&lt;len; ++i) {
  if (i in myStringArray) {
    s = myStringArray[i];
    // ... do something with s ...
  }
}
</code></pre>

<p>Assigning the length value to the local variable (as opposed to including the full <code>myStringArray.length</code> expression in the loop condition) can make a significant difference in performance since it skips a property lookup each time through; using Rhino on my machine, the speedup is 43%. </p>

<p>You may see the length caching done in the loop initialization clause, like this:</p>

<pre><code>var i, len, myStringArray = [ ""Hello"", ""World"" ];
for (len = myStringArray.length, i=0; i&lt;len; ++i) {
</code></pre>

<p>The explicit counting loop also means you have access to the index of each value, should you want it. The index is also passed as an extra parameter to the function you pass to <code>forEach</code>, so you can access it that way as well:</p>

<pre><code>myStringArray.forEach( function(s, i) {
   // ... do something with s and i ...
});
</code></pre>

<p><code>for</code>...<code>of</code> doesn't give you the index associated with each object, but as long as the object you're iterating over is actually an <code>Array</code> (<code>for</code>..<code>of</code> works for other iterable types which may not have this method), you can use the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries"" rel=""noreferrer"">Array#entries</a> method to change it to an array of [index, item] pairs, and then iterate over that:</p>

<pre><code>for (const [i, s] of myStringArray.entries()) {
  // ... do something with s and i ...
}
</code></pre>

<p>The <code>for</code>...<code>in</code> syntax mentioned by others is for looping over an object's properties; since an Array in JavaScript is just an object with numeric property names (and an automatically-updated <code>length</code> property), you can theoretically loop over an Array with it.  But the problem is that it doesn't restrict itself to the numeric property values (remember that even methods are actually just properties whose value is a closure), nor is it guaranteed to iterate over those in numeric order. Therefore, the <code>for</code>...<code>in</code> syntax should <em>not</em> be used for looping through Arrays. </p>
"
"10183130","28","<p>I would thoroughly recommend making use of the <a href=""http://documentcloud.github.com/underscore"" rel=""nofollow noreferrer"">Underscore.js</a> library. It provides you with various functions that you can use to iterate over arrays/collections.</p>
<p>For instance:</p>
<pre><code>_.each([1, 2, 3], function(num){ alert(num); });
=&gt; alerts each number in turn...
</code></pre>
"
"27729485","17","<p>In case you are using <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/basic_usage"" rel=""noreferrer"">Web Workers</a> and want to include additional scripts in the scope of the worker, the other answers provided about adding scripts to the <code>head</code> tag, etc. will not work for you.</p>

<p>Fortunately, <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/basic_usage#Importing_scripts_and_libraries"" rel=""noreferrer"">Web Workers have their own <code>importScripts</code> function</a> which is a global function in the scope of the Web Worker, native to the browser itself as it <a href=""https://html.spec.whatwg.org/multipage/workers.html#importing-scripts-and-libraries"" rel=""noreferrer"">is part of the specification</a>.</p>

<p>Alternatively, <a href=""https://stackoverflow.com/a/10939737/1676444"">as the second highest voted answer to your question highlights</a>, <a href=""http://www.requirejs.org/"" rel=""noreferrer"">RequireJS</a> can also handle including scripts inside a Web Worker (likely calling <code>importScripts</code> itself, but with a few other useful features).</p>
"
"22459894","84","<p>You can use <code>push</code> and <code>apply</code> function to append two arrays.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var array1 = [11, 32, 75];
var array2 = [99, 67, 34];

Array.prototype.push.apply(array1, array2);
console.log(array1);</code></pre>
</div>
</div>
</p>

<p>It will append <code>array2</code> to <code>array1</code>. Now <code>array1</code> contains <code>[11, 32, 75, 99, 67, 34]</code>.
This code is much simpler than writing <code>for</code> loops to copy each and every items in the array.</p>
"
"23119889","1","<p>Here's an easy way to do it in an onchange function:</p>

<p><code>event.target.options[event.target.selectedIndex].dataset.name</code></p>
"
"23215494","1","<pre><code>(function() { var d = new Date(); return new Date(d - d % 86400000); })()
</code></pre>
"
"27891634","10","<p>There are a lot of potential answers for this question. My answer is obviously based on a number of them. This is what I ended up with after reading through all the answers.</p>
<p>The problem with <code>$.getScript</code> and really any other solution that requires a callback when loading is complete is that if you have multiple files that use it and depend on each other you no longer have a way to know when all scripts have been loaded (once they are nested in multiple files).</p>
<h3>Example:</h3>
<p>file3.js</p>
<pre><code>var f3obj = &quot;file3&quot;;

// Define other stuff
</code></pre>
<p>file2.js:</p>
<pre><code>var f2obj = &quot;file2&quot;;
$.getScript(&quot;file3.js&quot;, function(){

    alert(f3obj);

    // Use anything defined in file3.
});
</code></pre>
<p>file1.js:</p>
<pre><code>$.getScript(&quot;file2.js&quot;, function(){
    alert(f3obj); //This will probably fail because file3 is only guaranteed to have loaded inside the callback in file2.
    alert(f2obj);

    // Use anything defined in the loaded script...
});
</code></pre>
<p>You are right when you say that you could specify Ajax to run synchronously or use <a href=""http://en.wikipedia.org/wiki/XMLHttpRequest"" rel=""nofollow noreferrer"">XMLHttpRequest</a>, but the current trend appears to be to deprecate synchronous requests, so you may not get full browser support now or in the future.</p>
<p>You could try to use <code>$.when</code> to check an array of deferred objects, but now you are doing this in every file and file2 will be considered loaded as soon as the <code>$.when</code> is executed not when the callback is executed, so file1 still continues execution before file3 is loaded. This really still has the same problem.</p>
<p>I decided to go backwards instead of forwards. Thank you <code>document.writeln</code>. I know it's taboo, but as long as it is used correctly this works well. You end up with code that can be debugged easily, shows in the DOM correctly and can ensure the order the dependencies are loaded correctly.</p>
<p>You can of course use $ (&quot;body&quot;).append(), but then you can no longer debug correctly any more.</p>
<p>NOTE: You must use this only while the page is loading, otherwise you get a blank screen. In other words, <strong>always place this before / outside of document.ready</strong>. I have not tested using this after the page is loaded in a click event or anything like that, but I am pretty sure it'll fail.</p>
<p>I liked the idea of extending jQuery, but obviously you don't need to.</p>
<p>Before calling <code>document.writeln</code>, it checks to make sure the script has not already been loading by evaluating all the script elements.</p>
<p>I assume that a script is not fully executed until its <code>document.ready</code> event has been executed. (I know using <code>document.ready</code> is not required, but many people use it, and handling this is a safeguard.)</p>
<p>When the additional files are loaded the <code>document.ready</code> callbacks will get executed in the wrong order. To address this when a script is actually loaded, the script that imported it is re-imported itself and execution halted. This causes the originating file to now have its <code>document.ready</code> callback executed after any from any scripts that it imports.</p>
<p>Instead of this approach you could attempt to modify the jQuery <code>readyList</code>, but this seemed like a worse solution.</p>
<p>Solution:</p>
<pre><code>$.extend(true,
{
    import_js : function(scriptpath, reAddLast)
    {
        if (typeof reAddLast === &quot;undefined&quot; || reAddLast === null)
        {
            reAddLast = true; // Default this value to true. It is not used by the end user, only to facilitate recursion correctly.
        }

        var found = false;
        if (reAddLast == true) // If we are re-adding the originating script we do not care if it has already been added.
        {
            found = $('script').filter(function () {
                return ($(this).attr('src') == scriptpath);
            }).length != 0; // jQuery to check if the script already exists. (replace it with straight JavaScript if you don't like jQuery.
        }

        if (found == false) {

            var callingScriptPath = $('script').last().attr(&quot;src&quot;); // Get the script that is currently loading. Again this creates a limitation where this should not be used in a button, and only before document.ready.

            document.writeln(&quot;&lt;script type='text/javascript' src='&quot; + scriptpath + &quot;'&gt;&lt;/script&gt;&quot;); // Add the script to the document using writeln

            if (reAddLast)
            {
                $.import_js(callingScriptPath, false); // Call itself with the originating script to fix the order.
                throw 'Readding script to correct order: ' + scriptpath + ' &lt; ' + callingScriptPath; // This halts execution of the originating script since it is getting reloaded. If you put a try / catch around the call to $.import_js you results will vary.
            }
            return true;
        }
        return false;
    }
});
</code></pre>
<p>Usage:</p>
<p>File3:</p>
<pre><code>var f3obj = &quot;file3&quot;;

// Define other stuff
$(function(){
    f3obj = &quot;file3docready&quot;;
});
</code></pre>
<p>File2:</p>
<pre><code>$.import_js('js/file3.js');
var f2obj = &quot;file2&quot;;
$(function(){
    f2obj = &quot;file2docready&quot;;
});
</code></pre>
<p>File1:</p>
<pre><code>$.import_js('js/file2.js');

// Use objects from file2 or file3
alert(f3obj); // &quot;file3&quot;
alert(f2obj); // &quot;file2&quot;

$(function(){
    // Use objects from file2 or file3 some more.
    alert(f3obj); //&quot;file3docready&quot;
    alert(f2obj); //&quot;file2docready&quot;
});
</code></pre>
"
"56406126","16","<p><strong>2019 Update using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait"" rel=""noreferrer"">Atomics.wait</a></strong></p>

<p>Should work in Node 9.3 or higher.</p>

<p>I needed a pretty accurate timer in Node.js and it works great for that.
However it seems like there is extremely limited support in browsers.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let ms = 10000;
Atomics.wait(new Int32Array(new SharedArrayBuffer(4)), 0, 0, ms);</code></pre>
</div>
</div>
</p>

<p>Ran a few 10 second timer benchmarks.</p>

<p>With setTimeout I get a error of up to 7000 microseconds. (7ms)</p>

<p>With Atomics my error seems to stay under 600 microseconds. (0.6ms)</p>

<p><strong>2020 Update: In Summary</strong>
</p>

<pre><code>function sleep(millis){ // need help of a server-side page
  let netMillis=Math.max(millis-5,0); //assuming 5ms overhead
  let xhr=new XMLHttpRequest();
  xhr.open('GET','/sleep.jsp?millis='+netMillis+'&amp;rand='+Math.random(), false);
  try{
    xhr.send();
  }catch(e){
  }
}
function sleepAsync(millis){ // use only in async function
  let netMillis=Math.max(millis-1,0); // assuming 1ms overhead
  return new Promise((resolve)=&gt;{
    setTimeout(resolve, netMillis);
  });
}
function sleepSync(millis){ // use only in worker thread, currently Chrome-only
  Atomics.wait(new Int32Array(new SharedArrayBuffer(4)), 0, 0, millis);
}

function sleepTest(){
  console.time('sleep');
  sleep(1000);
  console.timeEnd('sleep');
}
async function sleepAsyncTest(){
  console.time('sleepAsync');
  await sleepAsync(1000);
  console.timeEnd('sleepAsync');
}
function sleepSyncTest(){ 
  let source=`${sleepSync.toString()}
    console.time('sleepSync');
    sleepSync(1000);
    console.timeEnd('sleepSync');`;
  let src='data:text/javascript,'+encodeURIComponent(source);
  console.log(src);
  var worker=new Worker(src);
}
</code></pre>

<p>of which the a server-side page, e.g. <code>sleep.jsp</code>, looks like</p>

<pre class=""lang-jsp prettyprint-override""><code>&lt;%
try{
  Thread.sleep(Long.parseLong(request.getParameter(""millis"")));
}catch(InterruptedException e){}
%&gt;
</code></pre>
"
"28389515","11","<p>Keep it nice, short, simple, and maintainable! :]</p>
<pre><code>// Third-party plugins / script (don't forget the full path is necessary)
var FULL_PATH = '', s =
[
    FULL_PATH + 'plugins/script.js'      // Script example
    FULL_PATH + 'plugins/jquery.1.2.js', // jQuery Library
    FULL_PATH + 'plugins/crypto-js/hmac-sha1.js',      // CryptoJS
    FULL_PATH + 'plugins/crypto-js/enc-base64-min.js'  // CryptoJS
];

function load(url)
{
    var ajax = new XMLHttpRequest();
    ajax.open('GET', url, false);
    ajax.onreadystatechange = function ()
    {
        var script = ajax.response || ajax.responseText;
        if (ajax.readyState === 4)
        {
            switch(ajax.status)
            {
                case 200:
                    eval.apply( window, [script] );
                    console.log(&quot;library loaded: &quot;, url);
                    break;
                default:
                    console.log(&quot;ERROR: library not loaded: &quot;, url);
            }
        }
    };
    ajax.send(null);
}

// Initialize a single load
load('plugins/script.js');

// Initialize a full load of scripts
if (s.length &gt; 0)
{
    for (i = 0; i &lt; s.length; i++)
    {
        load(s[i]);
    }
}
</code></pre>
<p>This code is simply a short functional example that <em>could</em> require additional feature functionality for full support on any (or given) platform.</p>
"
"56771739","33","<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>  await new Promise(resolve =&gt; setTimeout(resolve, 2000));</code></pre>
</div>
</div>
</p>

<p>make sure your calling function is async </p>

<p>verified and working fine</p>
"
"29535421","39","<p>If you have complex objects in the array you can use filters? 
In situations where $.inArray or array.splice is not as easy to use. Especially if the objects are perhaps shallow in the array.</p>

<p>E.g. if you have an object with an Id field and you want the object removed from an array:</p>

<pre><code>this.array = this.array.filter(function(element, i) {
    return element.id !== idToRemove;
});
</code></pre>
"
"15988938","27","<p>The problem with the top answer on that question is that it's not-supported parameters placed after #, but sometimes it's needed to get this value also.</p>

<p>I modified the answer to let it parse a full query string with a hash sign also:</p>

<pre><code>var getQueryStringData = function(name) {
    var result = null;
    var regexS = ""[\\?&amp;#]"" + name + ""=([^&amp;#]*)"";
    var regex = new RegExp(regexS);
    var results = regex.exec('?' + window.location.href.split('?')[1]);
    if (results != null) {
        result = decodeURIComponent(results[1].replace(/\+/g, "" ""));
    }
    return result;
};
</code></pre>
"
"25537534","176","<p><strong>Before I start, jQuery is a JavaScript library used for DOM manipulation. So you should not be using jQuery for a page redirect.</strong></p>

<p>A quote from Jquery.com:</p>

<blockquote>
  <p>While jQuery might run without major issues in older browser versions,
  we do not actively test jQuery in them and generally do not fix bugs
  that may appear in them.</p>
</blockquote>

<p>It was found here:
<a href=""https://jquery.com/browser-support/"" rel=""noreferrer"">https://jquery.com/browser-support/</a></p>

<p>So jQuery is not an end-all and be-all solution for backwards compatibility.</p>

<p>The following solution using raw JavaScript works in all browsers and have been standard for a long time so you don't need any libraries for cross browser support.</p>

<p>This page will redirect to <strong><a href=""http://www.google.com"" rel=""noreferrer"">Google</a></strong> after 3000 milliseconds</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;example&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;You will be redirected to google shortly.&lt;/p&gt;
        &lt;script&gt;
            setTimeout(function(){
                window.location.href=""http://www.google.com""; // The URL that will be redirected too.
            }, 3000); // The bigger the number the longer the delay.
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Different options are as follows:</p>

<pre><code>window.location.href=""url""; // Simulates normal navigation to a new page
window.location.replace(""url""); // Removes current URL from history and replaces it with a new URL
window.location.assign(""url""); // Adds new URL to the history stack and redirects to the new URL

window.history.back(); // Simulates a back button click
window.history.go(-1); // Simulates a back button click
window.history.back(-1); // Simulates a back button click
window.navigate(""page.html""); // Same as window.location=""url""
</code></pre>

<p>When using replace, the back button will not go back to the redirect page, as if it was never in the history. If you want the user to be able to go back to the redirect page then use <code>window.location.href</code> or <code>window.location.assign</code>. If you do use an option that lets the user go back to the redirect page, remember that when you enter the redirect page it will redirect you back. So put that into consideration when picking an option for your redirect. Under conditions where the page is only redirecting when an action is done by the user then having the page in the back button history will be okay. But if the page auto redirects then you should use replace so that the user can use the back button without getting forced back to the page the redirect sends.</p>

<p>You can also use meta data to run a page redirect as followed.</p>

<p><strong>META Refresh</strong></p>

<pre><code>&lt;meta http-equiv=""refresh"" content=""0;url=http://evil.com/"" /&gt;
</code></pre>

<p><strong>META Location</strong></p>

<pre><code>&lt;meta http-equiv=""location"" content=""URL=http://evil.com"" /&gt;
</code></pre>

<p><strong>BASE Hijacking</strong></p>

<pre><code>&lt;base href=""http://evil.com/"" /&gt;
</code></pre>

<p>Many more methods to redirect your unsuspecting client to a page they may not wish to go can be found on this page (not one of them is reliant on jQuery):</p>

<blockquote>
  <p><a href=""https://code.google.com/p/html5security/wiki/RedirectionMethods"" rel=""noreferrer"">https://code.google.com/p/html5security/wiki/RedirectionMethods</a></p>
</blockquote>

<p>I would also like to point out, people don't like to be randomly redirected. Only redirect people when absolutely needed. If you start redirecting people randomly they will never go to your site again.</p>

<p>The next paragraph is hypothetical:</p>

<p>You also may get reported as a malicious site. If that happens then when people click on a link to your site the users browser may warn them that your site is malicious. What may also happen is search engines may start dropping your rating if people are reporting a bad experience on your site.</p>

<p>Please review Google Webmaster Guidelines about redirects:
<a href=""https://support.google.com/webmasters/answer/2721217?hl=en&amp;ref_topic=6001971"" rel=""noreferrer"">https://support.google.com/webmasters/answer/2721217?hl=en&amp;ref_topic=6001971</a></p>

<p>Here is a fun little page that kicks you out of the page.</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Go Away&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Go Away&lt;/h1&gt;
        &lt;script&gt;
            setTimeout(function(){
                window.history.back();
            }, 3000);
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>If you combine the two page examples together you would have an infant loop of rerouting that will guarantee that your user will never want to use your site ever again.</p>
"
"25717627","15","<p>Here is the code to redirect to some other page with a timeout of 10 seconds.</p>

<pre><code>&lt;script&gt;
    function Redirect()
    {
        window.location=""http://www.adarshkr.com"";
    }

    document.write(""You will be redirected to a new page in 10 seconds."");
    setTimeout('Redirect()', 10000);
&lt;/script&gt;
</code></pre>

<p>You can also do it like this, on click of a button using location.assign:</p>

<pre><code>&lt;input type=""button"" value=""Load new document"" onclick=""newPage()""&gt;
&lt;script&gt;
    function newPage() {
        window.location.assign(""http://www.adarshkr.com"")
    }
&lt;/script&gt;
</code></pre>
"
"25791785","25","<p>Use the jQuery function:</p>

<pre><code>$.extend({
  redirectPost: function(location, args) {
    var form = '';
    $.each(args, function(key, value) {
      form += '&lt;input type=""hidden"" name=""' + key + '"" value=""' + value + '""&gt;';
    });
    $('&lt;form action=""' + location + '"" method=""POST""&gt;' + form + '&lt;/form&gt;').appendTo($(document.body)).submit();
  }
});
</code></pre>

<p>In your code you use it like this:</p>

<pre><code>$.redirectPost(""addPhotos.php"", {pimreference:  $(""#pimreference"").val(), tag: $(""#tag"").val()});
</code></pre>
"
"12995510","21","<p>If you're using the jQuery library, consider using 
<a href=""http://api.jquery.com/jQuery.each/"" rel=""noreferrer"">http://api.jquery.com/jQuery.each/</a></p>

<p>From the documentation:</p>

<blockquote>
  <p><strong><code>jQuery.each( collection, callback(indexInArray, valueOfElement) )</code></strong> </p>
  
  <p><strong>Returns:</strong> <em>Object</em></p>
  
  <p><strong>Description:</strong> <em>A generic iterator function, which can be used to
  seamlessly iterate over both objects and arrays. Arrays and array-like
  objects with a length property (such as a function's arguments object)
  are iterated by numeric index, from 0 to length-1. Other objects are
  iterated via their named properties.</em></p>
  
  <p>The <code>$.each()</code> function is not the same as <code>$(selector).each()</code>, which is
  used to iterate, exclusively, over a jQuery object. The <code>$.each()</code>
  function can be used to iterate over any collection, whether it is a
  map (JavaScript object) or an array. In the case of an array, the
  callback is passed an array index and a corresponding array value each
  time. (The value can also be accessed through the <code>this</code> keyword, but
  Javascript will always wrap the <code>this</code> value as an <code>Object</code> even if it is
  a simple string or number value.) The method returns its first
  argument, the object that was iterated.</p>
</blockquote>
"
"16600410","4","<p>If you do not wish to use a JavaScript library you can use the JavaScript string functions to parse <code>window.location</code>. Keep this code in an external .js file and you can use it over and over again in different projects.</p>

<pre><code>// Example - window.location = ""index.htm?name=bob"";

var value = getParameterValue(""name"");

alert(""name = "" + value);

function getParameterValue(param)
{
    var url = window.location;
    var parts = url.split('?');
    var params = parts[1].split('&amp;');
    var val = """";

    for ( var i=0; i&lt;params.length; i++)
    {
        var paramNameVal = params[i].split('=');

        if ( paramNameVal[0] == param )
        {
            val = paramNameVal[1];
        }
    }
    return val;
}
</code></pre>
"
"13022066","38","<p>Here is a way to do it without jQuery</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function addOrAttachListener(el, type, listener, useCapture) {
  if (el.addEventListener) {
    el.addEventListener(type, listener, useCapture);
  } else if (el.attachEvent) {
    el.attachEvent(""on"" + type, listener);
  }
};

addOrAttachListener(window, ""load"", function() {
  var cbElem = document.getElementById(""cb"");
  var rcbElem = document.getElementById(""rcb"");
  addOrAttachListener(cbElem, ""click"", function() {
    rcbElem.checked = cbElem.checked;
  }, false);
}, false);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;label&gt;Click Me!
  &lt;input id=""cb"" type=""checkbox"" /&gt;
&lt;/label&gt;
&lt;label&gt;Reflection:
  &lt;input id=""rcb"" type=""checkbox"" /&gt;
&lt;/label&gt;</code></pre>
</div>
</div>
</p>
"
"13795253","28","<p>The top answer didn't do it for me. This did though:</p>

<pre><code>&lt;script type=""text/javascript""&gt;
    $(document).ready(function(){

        $(""#li_13"").click(function(){
            if($(""#agree"").attr('checked')){
                $(""#saveForm"").fadeIn();
            }
            else
            {
                $(""#saveForm"").fadeOut();
            }
        });
    });
&lt;/script&gt;
</code></pre>

<p>Basically when the element #li_13 is clicked, it checks if the element # agree (which is the checkbox) is checked by using the <code>.attr('checked')</code> function. If it is then fadeIn the #saveForm element, and if not fadeOut the saveForm element.</p>
"
"17141819","3","<p>Here is a function I came up with to do ""round up"". I used double Math.round to compensate for JavaScript's inaccurate multiplying, so 1.005 will be correctly rounded as 1.01.</p>

<pre><code>function myRound(number, decimalplaces){
    if(decimalplaces &gt; 0){
        var multiply1 = Math.pow(10,(decimalplaces + 4));
        var divide1 = Math.pow(10, decimalplaces);
        return Math.round(Math.round(number * multiply1)/10000 )/divide1;
    }
    if(decimalplaces &lt; 0){
        var divide2 = Math.pow(10, Math.abs(decimalplaces));
        var multiply2 = Math.pow(10, Math.abs(decimalplaces));
        return Math.round(Math.round(number / divide2) * multiply2);
    }
    return Math.round(number);
}
</code></pre>
"
"17438012","3","<p>I wrote the following set of functions for myself. Maybe it will help you too.</p>

<pre><code>function float_exponent(number) {
    exponent = 1;
    while (number &lt; 1.0) {
        exponent += 1
        number *= 10
    }
    return exponent;
}
function format_float(number, extra_precision) {
    precision = float_exponent(number) + (extra_precision || 0)
    return number.toFixed(precision).split(/\.?0+$/)[0]
}
</code></pre>

<p>Usage:</p>

<pre><code>format_float(1.01); // 1
format_float(1.06); // 1.1
format_float(0.126); // 0.13
format_float(0.000189); // 0.00019
</code></pre>

<p>For you case:</p>

<pre><code>format_float(10, 1); // 10
format_float(9.1, 1); // 9.1
format_float(1.77777, 1); // 1.78
</code></pre>
"
"17567046","2","<p>See this <a href=""http://www.darlesson.com/jquery/querystring/"" rel=""nofollow"">post</a> or use this:</p>

<pre><code>&lt;script type=""text/javascript"" language=""javascript""&gt;
    $(document).ready(function()
    {
        var urlParams = {};
        (function ()
        {
            var match,
            pl= /\+/g,  // Regular expression for replacing addition symbol with a space
            search = /([^&amp;=]+)=?([^&amp;]*)/g,
            decode = function (s) { return decodeURIComponent(s.replace(pl, "" "")); },
            query  = window.location.search.substring(1);

            while (match = search.exec(query))
                urlParams[decode(match[1])] = decode(match[2]);
        })();

        if (urlParams[""q1""] === 1)
        {
            return 1;
        }
    });
&lt;/script&gt;
</code></pre>
"
"30947489","32","<p>Replacing single quotes:</p>

<pre><code>function JavaScriptEncode(text){
    text = text.replace(/'/g,'&amp;apos;')
    // More encode here if required

    return text;
}
</code></pre>
"
"17810898","3","<p>Use:</p>

<pre><code>  $(document).ready(function () {
      var urlParams = {};
      (function () {
          var match,
          pl = /\+/g, // Regex for replacing addition symbol with a space
              search = /([^&amp;=]+)=?([^&amp;]*)/g,
              decode = function (s) {
                  return decodeURIComponent(s.replace(pl, "" ""));
              },
              query = window.location.search.substring(1);

          while (match = search.exec(query))
              urlParams[decode(match[1])] = decode(match[2]);
      })();
      if (urlParams[""q1""] === 1) {
          return 1;
      }
</code></pre>

<p>Please check and let me know your comments. Also refer to <em><a href=""http://jquerybyexample.blogspot.com/2012/05/how-to-get-querystring-value-using.html"" rel=""nofollow"">How to get querystring value using jQuery</a></em>.</p>
"
"15059200","10","<p>This was my workaround:</p>

<pre><code>$('#vcGoButton').click(function () {
    var buttonStatus = $('#vcChangeLocation').prop('checked');
    console.log(""Status is "" + buttonStatus);
    if (buttonStatus) {
        var address = $('#vcNewLocation').val();
        var cabNumber = $('#vcVehicleNumber').val();
        $.get('postCabLocation.php',
              {address: address, cabNumber: cabNumber},
              function(data) {
                  console.log(""Changed vehicle "" + cabNumber + "" location to "" + address );
              });
    }
    else {
        console.log(""VC go button clicked, but no location action"");
    }
});
</code></pre>
"
"15116335","12","<p><strong>Here's the complete answer</strong>
using jQuery</p>

<p>I test it and it works 100% :D</p>

<pre><code>    // when the button (select_unit_button) is clicked it returns all the checed checkboxes values 
    $(""#select_unit_button"").on(""click"", function(e){

             var arr = [];

             $(':checkbox:checked').each(function(i){
                 arr[i] = $(this).val(); // u can get id or anything else
             });

              //console.log(arr); // u can test it using this in google chrome
    });
</code></pre>
"
"18194090","14","<p>Here is a prototype method:</p>

<pre><code>Number.prototype.round = function(places){
    places = Math.pow(10, places); 
    return Math.round(this * places)/places;
}

var yournum = 10.55555;
yournum = yournum.round(2);
</code></pre>
"
"18195920","4","<pre><code>var getUrlParameters = function (name, url) {
    if (!name) {
        return undefined;
    }

    name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
    url = url || location.search;

    var regex = new RegExp('[\\?&amp;#]' + name + '=?([^&amp;#]*)', 'gi'), result, resultList = [];

    while (result = regex.exec(url)) {
        resultList.push(decodeURIComponent(result[1].replace(/\+/g, ' ')));
    }

    return resultList.length ? resultList.length === 1 ? resultList[0] : resultList : undefined;
};
</code></pre>
"
"59547575","43","<h2>Performance</h2>

<p>I perform tests on <a href=""https://en.wikipedia.org/wiki/MacOS_High_Sierra"" rel=""noreferrer"">macOS v10.13.6</a> (High Sierra) for 18 chosen solutions. Solutions works slightly different (for corner-case input data) which was presented in the snippet below.</p>

<p><strong>Conclusions</strong></p>

<ul>
<li>the simple solutions based on <code>!str</code>,<code>==</code>,<code>===</code> and <code>length</code> are fast for all browsers (A,B,C,G,I,J)</li>
<li>the solutions based on the regular expression (<code>test</code>,<code>replace</code>) and <code>charAt</code> are slowest for all browsers (H,L,M,P)</li>
<li>the solutions marked as fastest was fastest only for one test run - but in many runs it changes inside 'fast' solutions group</li>
</ul>

<p><a href=""https://i.stack.imgur.com/bFeGV.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/bFeGV.png"" alt=""Enter image description here""></a></p>

<h2>Details</h2>

<p>In the below snippet I compare results of chosen 18 methods by use different input parameters</p>

<ul>
<li><code>""""</code> <code>""a""</code> <code>"" ""</code>- empty string, string with letter and string with space</li>
<li><code>[]</code> <code>{}</code> <code>f</code>- array, object and function</li>
<li><code>0</code> <code>1</code> <code>NaN</code> <code>Infinity</code> - numbers</li>
<li><code>true</code> <code>false</code> - Boolean</li>
<li><code>null</code> <code>undefined</code></li>
</ul>

<p>Not all tested methods support all input cases.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function A(str) {
  let r=1;
  if (!str)
    r=0;
  return r;
}

function B(str) {
  let r=1;
  if (str == """")
    r=0;
  return r;
}

function C(str) {
  let r=1;
  if (str === """")
    r=0;
  return r;
}

function D(str) {
  let r=1;
  if(!str || 0 === str.length)
    r=0;
  return r;
}

function E(str) {
  let r=1;
  if(!str || /^\s*$/.test(str))
    r=0;
  return r;
}

function F(str) {
  let r=1;
  if(!Boolean(str))
    r=0;
  return r;
}

function G(str) {
  let r=1;
  if(! ((typeof str != 'undefined') &amp;&amp; str) )
    r=0;
  return r;
}

function H(str) {
  let r=1;
  if(!/\S/.test(str))
    r=0;
  return r;
}

function I(str) {
  let r=1;
  if (!str.length)
    r=0;
  return r;
}

function J(str) {
  let r=1;
  if(str.length &lt;= 0)
    r=0;
  return r;
}

function K(str) {
  let r=1;
  if(str.length === 0 || !str.trim())
    r=0;
  return r;
}

function L(str) {
  let r=1;
  if ( str.replace(/\s/g,"""") == """")
    r=0;
  return r;
}

function M(str) {
  let r=1;
  if((/^\s*$/).test(str))
    r=0;
  return r;
}


function N(str) {
  let r=1;
  if(!str || !str.trim().length)
    r=0;
  return r;
}

function O(str) {
  let r=1;
  if(!str || !str.trim())
    r=0;
  return r;
}

function P(str) {
  let r=1;
  if(!str.charAt(0))
    r=0;
  return r;
}

function Q(str) {
  let r=1;
  if(!str || (str.trim()==''))
    r=0;
  return r;
}

function R(str) {
  let r=1;
  if (typeof str == 'undefined' ||
      !str ||
      str.length === 0 ||
      str === """" ||
      !/[^\s]/.test(str) ||
      /^\s*$/.test(str) ||
      str.replace(/\s/g,"""") === """")

    r=0;
  return r;
}




// --- TEST ---

console.log(                  '   """"  ""a""  "" "" [] {} 0 1 NaN Infinity f true false null undefined ');
let log1 = (s,f)=&gt; console.log(`${s}: ${f("""")}   ${f(""a"")}    ${f("" "")}   ${f([])}  ${f({})}  ${f(0)} ${f(1)} ${f(NaN)}   ${f(Infinity)}        ${f(f)} ${f(true)}    ${f(false)}     ${f(null)}    ${f(undefined)}`);
let log2 = (s,f)=&gt; console.log(`${s}: ${f("""")}   ${f(""a"")}    ${f("" "")}   ${f([])}  ${f({})}  ${f(0)} ${f(1)} ${f(NaN)}   ${f(Infinity)}        ${f(f)} ${f(true)}    ${f(false)}`);
let log3 = (s,f)=&gt; console.log(`${s}: ${f("""")}   ${f(""a"")}    ${f("" "")}`);

log1('A', A);
log1('B', B);
log1('C', C);
log1('D', D);
log1('E', E);
log1('F', F);
log1('G', G);
log1('H', H);

log2('I', I);
log2('J', J);

log3('K', K);
log3('L', L);
log3('M', M);
log3('N', N);
log3('O', O);
log3('P', P);
log3('Q', Q);
log3('R', R);</code></pre>
</div>
</div>
</p>

<p>And then for all methods I perform speed test case <code>str = """"</code> for browsers Chrome v78.0.0, Safari v13.0.4, and Firefox v71.0.0 - you can run tests on your machine <a href=""https://jsperf.com/empty-string-checking/1"" rel=""noreferrer"">here</a></p>

<p><a href=""https://i.stack.imgur.com/IxaPG.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/IxaPG.png"" alt=""Enter image description here""></a></p>
"
"18358056","533","<p>You can use</p>

<pre><code>function roundToTwo(num) {    
    return +(Math.round(num + ""e+2"")  + ""e-2"");
}
</code></pre>

<p>I found this over on <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round"" rel=""noreferrer"">MDN</a>. Their way avoids the problem with 1.005 that was <a href=""https://stackoverflow.com/questions/11832914/round-up-to-2-decimal-places-in-javascript#comment24719818_11832950"">mentioned</a>.</p>

<pre><code>roundToTwo(1.005)
1.01
roundToTwo(10)
10
roundToTwo(1.7777777)
1.78
roundToTwo(9.1)
9.1
roundToTwo(1234.5678)
1234.57
</code></pre>
"
"18671460","7","<p>I used this code (JavaScript) to get the what is passed through the URL:</p>

<pre><code>function getUrlVars() {
            var vars = {};
            var parts = window.location.href.replace(/[?&amp;]+([^=&amp;]+)=([^&amp;]*)/gi, function(m,key,value) {
                vars[key] = value;
            });
            return vars;
        }
</code></pre>

<p>Then to assign the value to a variable, you only have to specify which parameter you want to get, ie if the URL is <code>example.com/?I=1&amp;p=2&amp;f=3</code></p>

<p>You can do this to get the values:</p>

<pre><code>var getI = getUrlVars()[""I""];
var getP = getUrlVars()[""p""];
var getF = getUrlVars()[""f""];
</code></pre>

<p>then the values would be:</p>

<pre><code>getI = 1, getP = 2 and getF = 3
</code></pre>
"
"31282622","48","<p>Here's the generalized version of how Facebook does it for their ubiquitous Like button:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script&gt;
  var firstScript = document.getElementsByTagName('script')[0],
      js = document.createElement('script');
  js.src = 'https://cdnjs.cloudflare.com/ajax/libs/Snowstorm/20131208/snowstorm-min.js';
  js.onload = function () {
    // do stuff with your dynamically loaded script
    snowStorm.snowColor = '#99ccff';
  };
  firstScript.parentNode.insertBefore(js, firstScript);
&lt;/script&gt;</code></pre>
</div>
</div>
</p>

<p>If it works for Facebook, it will work for you.</p>

<p>The reason why we look for the first <code>script</code> element instead of <code>head</code> or <code>body</code> is because some browsers don't create one if missing, but we're guaranteed to have a <code>script</code> element - this one. Read more at <a href=""http://www.jspatterns.com/the-ridiculous-case-of-adding-a-script-element/"">http://www.jspatterns.com/the-ridiculous-case-of-adding-a-script-element/</a>.</p>
"
"18671891","4","<p>There are many solutions to retrieve URI query values, I prefer this one because it's short and works great:</p>

<pre><code>function get(name){
   if(name=(new RegExp('[?&amp;]'+encodeURIComponent(name)+'=([^&amp;]*)')).exec(location.search))
      return decodeURIComponent(name[1]);
}
</code></pre>
"
"27660935","88","<p><strong>Original question:</strong> ""How to redirect using jQuery?"", hence the answer implements jQuery >> Complimentary usage case.</p>

<hr>

<p>To just redirect to a page with JavaScript:</p>

<pre><code>window.location.href = ""/contact/"";
</code></pre>

<p>Or if you need a delay:</p>

<pre><code>setTimeout(function () {
  window.location.href = ""/contact/"";
}, 2000);   // Time in milliseconds
</code></pre>

<p>jQuery allows you to select elements from a web page with ease. You can find anything you want on a page and then use jQuery to add special effects, react to user actions, or show and hide content inside or outside the element you have selected. All these tasks start with knowing <a href=""http://learn.jquery.com/using-jquery-core/selecting-elements/"" rel=""noreferrer"">how to select an element or an event</a>.</p>

<pre><code>$('a,img').on('click',function(e){
  e.preventDefault();
  $(this).animate({
    opacity: 0 //Put some CSS animation here
  }, 500);
  setTimeout(function(){
    // OK, finished jQuery staff, let's go redirect
    window.location.href = ""/contact/"";
  },500);
});
</code></pre>

<p>Imagine someone wrote a script/plugin with 10000 lines of code. With jQuery you can connect to this code with just a line or two.</p>
"
"18792024","4","<p>This is very simple method to get parameter value(query string)</p>

<p>Use <code>gV(para_name)</code> function to retrieve its value</p>

<pre><code>var a=window.location.search;
a=a.replace(a.charAt(0),""""); //Removes '?'
a=a.split(""&amp;"");

function gV(x){
 for(i=0;i&lt;a.length;i++){
  var b=a[i].substr(0,a[i].indexOf(""=""));
  if(x==b){
   return a[i].substr(a[i].indexOf(""="")+1,a[i].length)}
</code></pre>
"
"60330980","1","<p>If you really want to block the main thread altogether and keep the event loop from pulling from the event queue, here's a nice way to do that without creating any functions, new Date objects or leaking any variables. I know there's a million answers to this silly question already but I didn't see anyone using this exact solution. This is modern browser only.</p>

<p>WARNING: This is not something you would ever put into production, it is just helpful for understanding the browser event loop. It is probably not even useful for any testing. It is not like a normal system sleep function because the javascript runtime is still doing work every cycle. </p>

<pre class=""lang-js prettyprint-override""><code>for (let e = performance.now() + 2000; performance.now() &lt; e; ) {}
</code></pre>

<p>Used here, the setTimeout callback won't be called until at least 2 seconds later even though it enters the event queue almost instantly:</p>

<pre class=""lang-js prettyprint-override""><code>setTimeout(function() {
  console.log(""timeout finished"");
}, 0);

for (let e = performance.now() + 2000; performance.now() &lt; e; ) {}
console.log(""haha wait for me first"");
</code></pre>

<p>You will experience a ~2 second pause then see</p>

<pre><code>haha wait for me first
timeout finished
</code></pre>

<p>The benefit of using performance.now() over Date.now() is that that the Date object is</p>

<blockquote>
  <p>subject to both clock skew and adjustment of the system clock. The
  value of time may not always be monotonically increasing and
  subsequent values may either decrease or remain the same.
  <a href=""https://www.w3.org/TR/hr-time-2/#introduction"" rel=""nofollow noreferrer"">*</a></p>
</blockquote>

<p>In general performance.now() is more suited to measuring differences in time at high accuracy.</p>

<p>Using a <code>for</code> loop has the benefit of letting you set variables local to the block before running. This allows you to do the addition math outside the loop while still being a 'one-liner'. This should hopefully minimize the CPU load of this hot cycle burn.</p>
"
"28034516","3","<p>I think this is an old question but the easiest way would be the following:</p>

<pre><code>var date = new Date();
var TimeStamp = date.toLocaleString();

function CurrentTime(){
  alert(TimeStamp);
}
</code></pre>

<p>This will grab the current time, pass it to a string based on location and then you can call the function CurrentTime to display the time.  This would be, to me, the most effective way to get a time stamp for something.</p>
"
"60531023","1","<p>Using Typescript?</p>

<p>Here's a quick <code>sleep()</code> implementation that can be awaited.  This is as similar as possible to the top answer.  It's functionally equivalent except <code>ms</code> is typed as <code>number</code> for typescript.</p>

<pre class=""lang-js prettyprint-override""><code>const sleep = (ms: number) =&gt;
  new Promise((resolve) =&gt; setTimeout(resolve, ms));

async function demo() {
  console.log('Taking a break for 2s (2000ms)...');
  await sleep(2000);
  console.log('Two seconds later');
}

demo();
</code></pre>

<h3>This is it. <code>await sleep(&lt;duration&gt;)</code>.</h3>

<p>Note that,</p>

<ol>
<li><code>await</code> can only be executed in functions prefixed with the <code>async</code> keyword, or at the <a href=""https://developers.google.com/web/updates/2017/08/devtools-release-notes#await"" rel=""nofollow noreferrer"">top level</a> of your script in some environments (e.g. the Chrome DevTools console, or Runkit).</li>
<li><code>await</code> only pauses the current <code>async</code> function</li>
</ol>
"
"61545673","6","<p>Could do something like this. A sleep method that all functions can inherit:
<div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>Function.prototype.sleep = function(delay, ...args) {
    setTimeout(() =&gt; this(...args), delay)
}

console.log.sleep(2000, 'Hello world!')</code></pre>
</div>
</div>
</p>
"
"31552759","21","<p>I had a simple issue, but I was baffled by responses to this question.</p>

<p>I had to use a variable (myVar1) defined in one JavaScript file (myvariables.js) in another JavaScript file (main.js).</p>

<p>For this I did as below:</p>

<p>Loaded the JavaScript code in the HTML file, in the correct order, myvariables.js first, then main.js:</p>

<pre><code>&lt;html&gt;
    &lt;body onload=""bodyReady();"" &gt;

        &lt;script src=""myvariables.js"" &gt; &lt;/script&gt;
        &lt;script src=""main.js"" &gt; &lt;/script&gt;

        &lt;!-- Some other code --&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>File: myvariables.js</p>

<pre><code>var myVar1 = ""I am variable from myvariables.js"";
</code></pre>

<p>File: main.js</p>

<pre><code>// ...
function bodyReady() {
    // ...
    alert (myVar1);    // This shows ""I am variable from myvariables.js"", which I needed
    // ...
}
// ...
</code></pre>

<p>As you saw, I had use a variable in one JavaScript file in another JavaScript file, but I didn't need to include one in another. I just needed to ensure that the first JavaScript file loaded before the second JavaScript file, and, the first JavaScript file's variables are accessible in the second JavaScript file, automatically.</p>

<p>This saved my day. I hope this helps.</p>
"
"63558697","8","<pre><code>if ((str?.trim()?.length || 0) &gt; 0) {
   // str must not be any of:
   // undefined
   // null
   // &quot;&quot;
   // &quot; &quot; or just whitespace
}
</code></pre>
<p><strong>Update:</strong>
Since this answer is getting popular I thought I'd write a function form too:</p>
<pre><code>const isNotNilOrWhitespace = input =&gt; (input?.trim()?.length || 0) &gt; 0;

const isNilOrWhitespace = input =&gt; (input?.trim()?.length || 0) === 0;
</code></pre>
"
"31604044","27","<p>If your intention to load the JavaScript file is <strong>using the functions from the imported/included file</strong>, you can also define a global object and set the functions as object items. For instance:</p>

<h3>global.js</h3>

<pre><code>A = {};
</code></pre>

<h3>file1.js</h3>

<pre><code>A.func1 = function() {
  console.log(""func1"");
}
</code></pre>

<h3>file2.js</h3>

<pre><code>A.func2 = function() {
  console.log(""func2"");
}
</code></pre>

<h3>main.js</h3>

<pre><code>A.func1();
A.func2();
</code></pre>

<p>You just need to be careful when you are including scripts in an HTML file. The order should be as in below:</p>

<pre><code>&lt;head&gt;
  &lt;script type=""text/javascript"" src=""global.js""&gt;&lt;/script&gt;
  &lt;script type=""text/javascript"" src=""file1.js""&gt;&lt;/script&gt;
  &lt;script type=""text/javascript"" src=""file2.js""&gt;&lt;/script&gt;
  &lt;script type=""text/javascript"" src=""main.js""&gt;&lt;/script&gt;
&lt;/head&gt;
</code></pre>
"
"19722641","171","<p>MarkG's answer is the correct one.  Here's a generic extension for any number of decimal places.</p>

<pre><code>Number.prototype.round = function(places) {
  return +(Math.round(this + ""e+"" + places)  + ""e-"" + places);
}
</code></pre>

<p>Usage:</p>

<pre><code>var n = 1.7777;    
n.round(2); // 1.78
</code></pre>

<p>Unit test:</p>

<pre><code>it.only('should round floats to 2 places', function() {

  var cases = [
    { n: 10,      e: 10,    p:2 },
    { n: 1.7777,  e: 1.78,  p:2 },
    { n: 1.005,   e: 1.01,  p:2 },
    { n: 1.005,   e: 1,     p:0 },
    { n: 1.77777, e: 1.8,   p:1 }
  ]

  cases.forEach(function(testCase) {
    var r = testCase.n.round(testCase.p);
    assert.equal(r, testCase.e, 'didn\'t get right number');
  });
})
</code></pre>
"
"20099782","5","<p>If you have <a href=""https://en.wikipedia.org/wiki/Underscore.js"" rel=""nofollow"">Underscore.js</a> or <a href=""http://lodash.com/docs#zipObject"" rel=""nofollow"">lodash</a>, a quick and dirty way to get this done is:</p>

<pre><code>_.object(window.location.search.slice(1).split('&amp;').map(function (val) { return val.split('='); }));
</code></pre>
"
"15171167","17","<p>Include jQuery from the local file system. I used Google's <a href=""http://en.wikipedia.org/wiki/Content_delivery_network"" rel=""noreferrer"">CDN</a>, and there are also many CDNs to choose from.</p>

<pre><code>&lt;script src=""//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js""&gt;&lt;/script&gt;
</code></pre>

<p>The code will execute as soon as a checkbox inside <code>mycheck</code> class is clicked. If the current clicked checkbox is checked then it will disable all others and enable the current one. If the current one is unchecked, it will again enable all checkboxes for rechecking.</p>

<pre><code>&lt;script type=""text/javascript""&gt;
    $(document).ready(function() {

        var checkbox_selector = '.mycheck input[type=checkbox]';

        $(checkbox_selector).click(function() {
            if ($($(this)).is(':checked')) {

                // Disable all checkboxes
                $(checkbox_selector).attr('disabled', 'disabled');

                // Enable current one
                $($(this)).removeAttr('disabled');
            }
            else {
                // If unchecked open all checkbox
                $(checkbox_selector).removeAttr('disabled');
            }
        });
    });
&lt;/script&gt;
</code></pre>

<p>Simple form to test</p>

<pre><code>&lt;form method=""post"" action=""""&gt;
    &lt;div class=""mycheck""&gt;
        &lt;input type=""checkbox"" value=""1"" /&gt; Television
        &lt;input type=""checkbox"" value=""2"" /&gt; Computer
        &lt;input type=""checkbox"" value=""3"" /&gt; Laptop
        &lt;input type=""checkbox"" value=""4"" /&gt; Camera
        &lt;input type=""checkbox"" value=""5"" /&gt; Music Systems
    &lt;/div&gt;
&lt;/form&gt;
</code></pre>

<p>Output screen:</p>

<p><img src=""https://i.stack.imgur.com/SM7V9.png"" alt=""Enter image description here""></p>
"
"33718996","5","<p>The following method will remove all entries of a given value from an array without creating a new array and with only one iteration which is <em>superfast</em>. And it works in ancient <a href=""https://en.wikipedia.org/wiki/Internet_Explorer_5"" rel=""noreferrer"">Internet&nbsp;Explorer 5.5</a> browser:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function removeFromArray(arr, removeValue) {
  for (var i = 0, k = 0, len = arr.length &gt;&gt;&gt; 0; i &lt; len; i++) {
    if (k &gt; 0)
      arr[i - k] = arr[i];

    if (arr[i] === removeValue)
      k++;
  }

  for (; k--;)
    arr.pop();
}

var a = [0, 1, 0, 2, 0, 3];

document.getElementById('code').innerHTML =
  'Initial array [' + a.join(', ') + ']';
//Initial array [0, 1, 0, 2, 0, 3]

removeFromArray(a, 0);

document.getElementById('code').innerHTML +=
  '&lt;br&gt;Resulting array [' + a.join(', ') + ']';
//Resulting array [1, 2, 3]</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;code id=""code""&gt;&lt;/code&gt;</code></pre>
</div>
</div>
</p>
"
"34755893","6","<p>I use <strong>p</strong> to store the result from the previous recursion replacement:</p>

<pre><code>function replaceAll(s, m, r, p) {
    return s === p || r.contains(m) ? s : replaceAll(s.replace(m, r), m, r, s);
}
</code></pre>

<p>It will replace all occurrences in the string <strong>s</strong> until it is possible:</p>

<pre><code>replaceAll('abbbbb', 'ab', 'a') → 'abbbb' → 'abbb' → 'abb' → 'ab' → 'a'
</code></pre>

<p>To avoid infinite loop I check if the replacement <strong>r</strong> contains a match <strong>m</strong>:</p>

<pre><code>replaceAll('abbbbb', 'a', 'ab') → 'abbbbb'
</code></pre>
"
"35080385","8","<p>By my solution you can remove one or more than one item in an array thanks to pure JavaScript. There is no need for another JavaScript library.</p>

<pre><code>var myArray = [1,2,3,4,5]; // First array

var removeItem = function(array,value) {  // My clear function
    if(Array.isArray(value)) {  // For multi remove
        for(var i = array.length - 1; i &gt;= 0; i--) {
            for(var j = value.length - 1; j &gt;= 0; j--) {
                if(array[i] === value[j]) {
                    array.splice(i, 1);
                };
            }
        }
    }
    else { // For single remove
        for(var i = array.length - 1; i &gt;= 0; i--) {
            if(array[i] === value) {
                array.splice(i, 1);
            }
        }
    }
}

removeItem(myArray,[1,4]); // myArray will be [2,3,5]
</code></pre>
"
"35408958","7","<p>You can simply use below method</p>

<pre><code>/**
 * Replace all the occerencess of $find by $replace in $originalString
 * @param  {originalString} input - Raw string.
 * @param  {find} input - Target key word or regex that need to be replaced.
 * @param  {replace} input - Replacement key word
 * @return {String}       Output string
 */
function replaceAll(originalString, find, replace) {
  return originalString.replace(new RegExp(find, 'g'), replace);
};
</code></pre>
"
"35429122","7","<p>The following function works for me:</p>

<pre><code>String.prototype.replaceAllOccurence = function(str1, str2, ignore)
{
    return this.replace(new RegExp(str1.replace(/([\/\,\!\\\^\$\{\}\[\]\(\)\.\*\+\?\|\&lt;\&gt;\-\&amp;])/g,""\\$&amp;""),(ignore?""gi"":""g"")),(typeof(str2)==""string"")?str2.replace(/\$/g,""$$$$""):str2);
} ;
</code></pre>

<p>Now call the functions like this:</p>

<pre><code>""you could be a Project Manager someday, if you work like this."".replaceAllOccurence (""you"", ""I"");
</code></pre>

<p>Simply copy and paste this code in your browser console to TEST.</p>
"
"35791028","4","<p>Here is the working code with prototype:</p>

<pre><code>String.prototype.replaceAll = function(find, replace) {
    var str = this;
    return str.replace(new RegExp(find.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, ""\\$1""), 'g'), replace);
};
</code></pre>
"
"21152762","249","<h1><em>tl;dr</em></h1>

<p>A quick, <strong>complete solution</strong>, which handles <strong>multivalued keys</strong> and <strong>encoded characters</strong>.</p>

<pre><code>var qd = {};
if (location.search) location.search.substr(1).split(""&amp;"").forEach(function(item) {var s = item.split(""=""), k = s[0], v = s[1] &amp;&amp; decodeURIComponent(s[1]); (qd[k] = qd[k] || []).push(v)})

//using ES6   (23 characters cooler)
var qd = {};
if (location.search) location.search.substr(1).split`&amp;`.forEach(item =&gt; {let [k,v] = item.split`=`; v = v &amp;&amp; decodeURIComponent(v); (qd[k] = qd[k] || []).push(v)})
</code></pre>

Multi-lined:

<pre><code>var qd = {};
if (location.search) location.search.substr(1).split(""&amp;"").forEach(function(item) {
    var s = item.split(""=""),
        k = s[0],
        v = s[1] &amp;&amp; decodeURIComponent(s[1]); //  null-coalescing / short-circuit
    //(k in qd) ? qd[k].push(v) : qd[k] = [v]
    (qd[k] = qd[k] || []).push(v) // null-coalescing / short-circuit
})
</code></pre>

<p>What is all this code...<br>
<em><a href=""https://stackoverflow.com/q/476436/985454"">""null-coalescing""</a>, <a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Short-Circuit_Evaluation"" rel=""noreferrer"">short-circuit evaluation</a><br>
ES6 <a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"" rel=""noreferrer"">Destructuring assignments</a>, <a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions"" rel=""noreferrer"">Arrow functions</a>, <a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals"" rel=""noreferrer"">Template strings</a></em></p>

Example:

<pre><code>""?a=1&amp;b=0&amp;c=3&amp;d&amp;e&amp;a=5&amp;a=t%20e%20x%20t&amp;e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dståle%26car%3Dsaab""
&gt; qd
a: [""1"", ""5"", ""t e x t""]
b: [""0""]
c: [""3""]
d: [undefined]
e: [undefined, ""http://w3schools.com/my test.asp?name=ståle&amp;car=saab""]

&gt; qd.a[1]    // ""5""
&gt; qd[""a""][1] // ""5""
</code></pre>

<p><br></p>

<hr>

<h1>Read more... about the Vanilla JavaScript solution.</h1>

<p><em>To access different parts of a URL use <code>location.(search|hash)</code></em></p>

<h2>Easiest (dummy) solution</h2>

<pre><code>var queryDict = {};
location.search.substr(1).split(""&amp;"").forEach(function(item) {queryDict[item.split(""="")[0]] = item.split(""="")[1]})
</code></pre>

<ul>
<li>Handles <b>empty keys</b> correctly.</li>
<li>Overrides <b>multi-keys</b> with <b>last</b> value found.</li>
</ul>

<pre><code>""?a=1&amp;b=0&amp;c=3&amp;d&amp;e&amp;a=5""
&gt; queryDict
a: ""5""
b: ""0""
c: ""3""
d: undefined
e: undefined
</code></pre>

<h2>Multi-valued keys</h2>

<p>Simple key check <code>(item in dict) ? dict.item.push(val) : dict.item = [val]</code></p>

<pre><code>var qd = {};
location.search.substr(1).split(""&amp;"").forEach(function(item) {(item.split(""="")[0] in qd) ? qd[item.split(""="")[0]].push(item.split(""="")[1]) : qd[item.split(""="")[0]] = [item.split(""="")[1]]})
</code></pre>

<ul>
<li>Now returns <b>arrays</b> instead.</li>
<li>Access values by <code>qd.key[index]</code> or <code>qd[key][index]</code></li>
</ul>

<pre><code>&gt; qd
a: [""1"", ""5""]
b: [""0""]
c: [""3""]
d: [undefined]
e: [undefined]
</code></pre>

<h2>Encoded characters?</h2>

<p>Use <code>decodeURIComponent()</code> for the second <em>or both</em> splits.</p>

<pre><code>var qd = {};
location.search.substr(1).split(""&amp;"").forEach(function(item) {var k = item.split(""="")[0], v = decodeURIComponent(item.split(""="")[1]); (k in qd) ? qd[k].push(v) : qd[k] = [v]})
</code></pre>

Example:

<pre><code>""?a=1&amp;b=0&amp;c=3&amp;d&amp;e&amp;a=5&amp;a=t%20e%20x%20t&amp;e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dståle%26car%3Dsaab""
&gt; qd
a: [""1"", ""5"", ""t e x t""]
b: [""0""]
c: [""3""]
d: [""undefined""]  // decodeURIComponent(undefined) returns ""undefined"" !!!*
e: [""undefined"", ""http://w3schools.com/my test.asp?name=ståle&amp;car=saab""]
</code></pre>

<p><br>
<hr></p>

<h1>From comments</h1>

<p><strong>*!!!</strong> Please note, that <code>decodeURIComponent(undefined)</code> returns string <code>""undefined""</code>. The solution lies in a simple usage of <a href=""https://stackoverflow.com/a/476445/985454""><code>&amp;&amp;</code></a>, which ensures that <code>decodeURIComponent()</code> is not called on undefined values. <em>(See the ""complete solution"" at the top.)</em></p>

<pre><code>v = v &amp;&amp; decodeURIComponent(v);
</code></pre>

<p><br>
If the querystring is empty (<code>location.search == """"</code>), the result is somewhat misleading <code>qd == {"""": undefined}</code>. It is suggested to check the querystring before launching the parsing function likeso:</p>

<pre><code>if (location.search) location.search.substr(1).split(""&amp;"").forEach(...)
</code></pre>
"
"36540678","9","<p><strong>Vanilla JavaScript (ES5.1) – <em>in place</em> edition</strong></p>

<p><em>Browser support: <a href=""http://en.wikipedia.org/wiki/Internet_Explorer_9"" rel=""noreferrer"">Internet&nbsp;Explorer&nbsp;9</a> or later (<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf#Browser_compatibility"" rel=""noreferrer"">detailed browser support</a>)</em></p>

<pre><code>/**
 * Removes all occurences of the item from the array.
 *
 * Modifies the array “in place”, i.e. the array passed as an argument
 * is modified as opposed to creating a new array. Also returns the modified
 * array for your convenience.
 */
function removeInPlace(array, item) {
    var foundIndex, fromIndex;

    // Look for the item (the item can have multiple indices)
    fromIndex = array.length - 1;
    foundIndex = array.lastIndexOf(item, fromIndex);

    while (foundIndex !== -1) {
        // Remove the item (in place)
        array.splice(foundIndex, 1);

        // Bookkeeping
        fromIndex = foundIndex - 1;
        foundIndex = array.lastIndexOf(item, fromIndex);
    }

    // Return the modified array
    return array;
}
</code></pre>

<p><strong>Vanilla JavaScript (ES5.1) – <em>immutable</em> edition</strong></p>

<p><em>Browser support: Same as vanilla JavaScript in place edition</em></p>

<pre><code>/**
 * Removes all occurences of the item from the array.
 *
 * Returns a new array with all the items of the original array except
 * the specified item.
 */
function remove(array, item) {
    var arrayCopy;

    arrayCopy = array.slice();

    return removeInPlace(arrayCopy, item);
}
</code></pre>

<p><strong>Vanilla ES6 – <em>immutable</em> edition</strong></p>

<p><em>Browser support: Chrome 46, Edge 12, Firefox 16, Opera 37, Safari 8 (<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator#Browser_compatibility"" rel=""noreferrer"">detailed browser support</a>)</em></p>

<pre><code>/**
 * Removes all occurences of the item from the array.
 *
 * Returns a new array with all the items of the original array except
 * the specified item.
 */
function remove(array, item) {
    // Copy the array
    array = [...array];

    // Look for the item (the item can have multiple indices)
    let fromIndex = array.length - 1;
    let foundIndex = array.lastIndexOf(item, fromIndex);

    while (foundIndex !== -1) {
        // Remove the item by generating a new array without it
        array = [
            ...array.slice(0, foundIndex),
            ...array.slice(foundIndex + 1),
        ];

        // Bookkeeping
        fromIndex = foundIndex - 1;
        foundIndex = array.lastIndexOf(item, fromIndex)
    }

    // Return the new array
    return array;
}
</code></pre>
"
"36555927","4","<pre><code>function replaceAll(str, find, replace) {
    var $r="""";
    while($r!=str){ 
        $r = str;
        str = str.replace(find, replace);
    }
    return str;
}
</code></pre>
"
"28434935","2","<p>This is my current favorite, because it's both flexible and modular. It's a collection of (at least) three simple functions:</p>

<pre><code>/**
 * Returns an array with date / time information
 * Starts with year at index 0 up to index 6 for milliseconds
 * 
 * @param {Date} date   date object. If falsy, will take current time.
 * @returns {[]}
 */
getDateArray = function(date) {
    date = date || new Date();
    return [
        date.getFullYear(),
        exports.pad(date.getMonth()+1, 2),
        exports.pad(date.getDate(), 2),
        exports.pad(date.getHours(), 2),
        exports.pad(date.getMinutes(), 2),
        exports.pad(date.getSeconds(), 2),
        exports.pad(date.getMilliseconds(), 2)
    ];
};
</code></pre>

<p>Here's the pad function:</p>

<pre><code> /**
 * Pad a number with n digits
 *
 * @param {number} number   number to pad
 * @param {number} digits   number of total digits
 * @returns {string}
 */
exports.pad = function pad(number, digits) {
    return new Array(Math.max(digits - String(number).length + 1, 0)).join(0) + number;
};
</code></pre>

<p>Finally I can either build my date string by hand, or use a simple functions to do it for me:</p>

<pre><code>/**
 * Returns nicely formatted date-time
 * @example 2015-02-10 16:01:12
 *
 * @param {object} date
 * @returns {string}
 */
exports.niceDate = function(date) {
    var d = exports.getDateArray(date);
    return d[0] + '-' + d[1] + '-' + d[2] + ' ' + d[3] + ':' + d[4] + ':' + d[5];
};

/**
 * Returns a formatted date-time, optimized for machines
 * @example 2015-02-10_16-00-08
 *
 * @param {object} date
 * @returns {string}
 */
exports.roboDate = function(date) {
    var d = exports.getDateArray(date);
    return d[0] + '-' + d[1] + '-' + d[2] + '_' + d[3] + '-' + d[4] + '-' + d[5];
};
</code></pre>
"
"15914908","36","<p>A <strong>forEach</strong> implementation (<a href=""http://jsfiddle.net/nmoliveira/zNsyB/"" rel=""noreferrer"">see in jsFiddle</a>):</p>

<pre><code>function forEach(list,callback) {
  var length = list.length;
  for (var n = 0; n &lt; length; n++) {
    callback.call(list[n]);
  }
}

var myArray = ['hello','world'];

forEach(
  myArray,
  function(){
    alert(this); // do something
  }
);
</code></pre>
"
"37093205","13","<p>I think many of the JavaScript instructions are not well thought out for functional programming. Splice returns the deleted element where most of the time you need the reduced array. This is bad.</p>

<p>Imagine you are doing a recursive call and have to pass an array with one less item, probably without the current indexed item. Or imagine you are doing another recursive call and has to pass an array with an element pushed.</p>

<p>In neither of these cases you can do <code>myRecursiveFunction(myArr.push(c))</code> or <code>myRecursiveFunction(myArr.splice(i,1))</code>. The first idiot will in fact pass the length of the array and the second idiot will pass the deleted element as a parameter.</p>

<p>So what I do in fact... For deleting an array element and passing the resulting to a function as a parameter at the same time I do as follows</p>

<pre><code>myRecursiveFunction(myArr.slice(0,i).concat(a.slice(i+1)))
</code></pre>

<p>When it comes to push that's more silly... I do like,</p>

<pre><code>myRecursiveFunction((myArr.push(c),myArr))
</code></pre>

<p>I believe in a proper functional language a method mutating the object it's called upon must return a reference to the very object as a result.</p>
"
"37358787","2","<pre><code>Array.prototype.remove = function(x) {
    var y=this.slice(x+1);
    var z=[];
    for(i=0;i&lt;=x-1;i++) {
        z[z.length] = this[i];
    }

    for(i=0;i&lt;y.length;i++){
        z[z.length]=y[i];
    }

    return z;
}
</code></pre>
"
"37425858","8","<p>I basically do it like the following, creating a new element and attach that to head:</p>

<pre><code>var x = document.createElement('script');
x.src = 'http://example.com/test.js';
document.getElementsByTagName(""head"")[0].appendChild(x);
</code></pre>

<p>In <a href=""http://en.wikipedia.org/wiki/JQuery"" rel=""noreferrer"">jQuery</a>:</p>

<pre><code>// jQuery
$.getScript('/path/to/imported/script.js', function()
{
    // Script is now loaded and executed.
    // Put your dependent JavaScript code here.
});
</code></pre>
"
"64668950","0","<p>I think the question is great and points out important perspectives and considerations.</p>
<p>With that said, I think the core of the question is in the intention and understanding what developer (you) wants to have controlled.</p>
<p>First, the name <code>sleep</code> is an overloaded naming choice. I.e., &quot;what&quot; is going to be &quot;slept&quot;; and &quot;what&quot; as a developer am I in control of?</p>
<blockquote>
<p>In any language-engine, running on any OS process, on any bare-metal-or-hosted system the &quot;developer&quot; is NOT in control <em>(owner)</em> of the OS-shared-resource CPU core(s) [and/or threads] unless they are the writing the OS/Process system itself. <em>CPUs are a time-shared resource, and the currency of work-execution progress are the &quot;cycles&quot; allocated amongst all work to be performed on the system.</em></p>
</blockquote>
<p>As an app/service developer, it is best to consider that I am in control of a workflow-activity-stream managed by a os-process/language-engine. On some systems that means I control a native-os-thread <em>(which likely shares CPU cores)</em>, on others it means I control an <strong>async-continuation-workflow chain/tree</strong>.</p>
<p><strong>In the case of JavaScript, it is the &quot;latter&quot;.</strong></p>
<p>So when &quot;sleep&quot; is desired, I am intending to cause my workflow to be &quot;delayed&quot; from execution for some period of time, before it proceeds to execute the next &quot;step&quot; (phase/activity/task) in its workflow.</p>
<p>This is &quot;appropriately&quot; saying that as a developer it is easiest to <em>(think in terms of)</em> model work as a linear-code flow; resorting to compositions of workflows to scale as needed.</p>
<blockquote>
<p>Today, in JavaScript, we have the option to design such linear work flows using efficient multi-tasking 1980s actor based continuation architectures <em><strong>(relabeled as modern Futures/Promises/then/await etc)</strong></em>.</p>
</blockquote>
<p>With that in mind, my answer is <strong>not</strong> contributing a <strong>new</strong> technical solution, but rather focusing on the <strong>intent</strong> and the <strong>design</strong> <em>perspective</em> within the question itself.</p>
<p>I suggest that any answer begins with thinking about the above concepts and then choosing a NAME (other than <code>sleep</code>) that reminds and suggests what the intention is.</p>
<blockquote>
<p>Workflow</p>
<ul>
<li>Choice 1: <code>delayWorkForMs(nMsToDelay)</code></li>
<li>Choice 2: <code>delayAsyncSequenceForMs(msPeriod)</code></li>
</ul>
</blockquote>
<pre><code>async delayAsyncSequenceForMs(msPeriod) {
  await new Promise(resolve =&gt; setTimeout(resolve, msPeriod));
}
</code></pre>
<blockquote>
<p>Keep in mind that any <code>async</code> <em>function</em> <em>always</em> returns a <code>Promise</code>, and <code>await</code> may only be used within an <code>async</code> <em>function</em>.<br>
<em>(lol, you might ask yourself why...)</em>.<br></p>
<ul>
<li>Consideration 1: <strong>do-not</strong> use &quot;loops&quot; to BURN UP cpu-cycles.<br></li>
<li>Consideration 2: In the JavaScript model, when inside a non-async function you cannot &quot;delay&quot; (wait for) an &quot;async&quot; workflow's execution <em>(unless you are doing bad things needlessly burning cpu cycles)</em>. You can only &quot;delay&quot; code-steps within an &quot;async&quot; function.<br>
Internally, an &quot;async&quot; function is modelled as a collection of entry-point/continuations at each <code>await</code> <em>keyword</em>. If you are familiar with the backtick interpolation model, you can &quot;think of await&quot; as being conceptually modelled similarly to writing a backquote string like:</li>
</ul>
</blockquote>
<pre><code>  // Conceptualizing, using an interpolation example to illustrate
  // how to think about &quot;await&quot; and &quot;async&quot; functions
  `code${await then-restart-point}more-code${await then-restart-point}`
</code></pre>
"
"38071922","7","<p>Use <a href=""http://api.jquery.com/jquery.grep/"" rel=""noreferrer"">jQuery.grep()</a>:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var y = [1, 2, 3, 9, 4]
var removeItem = 9;

y = jQuery.grep(y, function(value) {
  return value != removeItem;
});
console.log(y)</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
"
"21181015","2","<p>Doing this reliably is more involved than one may think at first.</p>
<ol>
<li><code>location.search</code>, which is used in other answers, is brittle and should be avoided - for example, it returns empty if someone screws up and puts a <code>#fragment</code> identifier before the <code>?query</code> string.</li>
<li>There are a number of ways URLs get automatically escaped in the browser, which makes <code>decodeURIComponent</code> pretty much mandatory, in my opinion.</li>
<li>Many query strings are generated from user input, which means assumptions about the URL content are very bad. Including very basic things like that each key is unique or even has a value.</li>
</ol>
<p>To solve this, here is a configurable API with a healthy dose of <a href=""http://en.wikipedia.org/wiki/Defensive_programming"" rel=""nofollow noreferrer"" title=""Wiki article on programming with less assumptions."">defensive programming</a>. Note that it can be made half the size if you are willing to hardcode some of the variables, or if the input can never include <code>hasOwnProperty</code>, etc.</p>
<p><strong>Version 1:</strong> Returns a data object with names and values for each parameter. It effectively de-duplicates them and always respects the first one found from left-to-right.</p>
<pre><code>function getQueryData(url, paramKey, pairKey, missingValue, decode) {

    var query, queryStart, fragStart, pairKeyStart, i, len, name, value, result;

    if (!url || typeof url !== 'string') {
        url = location.href; // more robust than location.search, which is flaky
    }
    if (!paramKey || typeof paramKey !== 'string') {
        paramKey = '&amp;';
    }
    if (!pairKey || typeof pairKey !== 'string') {
        pairKey = '=';
    }
    // when you do not explicitly tell the API...
    if (arguments.length &lt; 5) {
        // it will unescape parameter keys and values by default...
        decode = true;
    }

    queryStart = url.indexOf('?');
    if (queryStart &gt;= 0) {
        // grab everything after the very first ? question mark...
        query = url.substring(queryStart + 1);
    } else {
        // assume the input is already parameter data...
        query = url;
    }
    // remove fragment identifiers...
    fragStart = query.indexOf('#');
    if (fragStart &gt;= 0) {
        // remove everything after the first # hash mark...
        query = query.substring(0, fragStart);
    }
    // make sure at this point we have enough material to do something useful...
    if (query.indexOf(paramKey) &gt;= 0 || query.indexOf(pairKey) &gt;= 0) {
        // we no longer need the whole query, so get the parameters...
        query = query.split(paramKey);
        result = {};
        // loop through the parameters...
        for (i = 0, len = query.length; i &lt; len; i = i + 1) {
            pairKeyStart = query[i].indexOf(pairKey);
            if (pairKeyStart &gt;= 0) {
                name = query[i].substring(0, pairKeyStart);
            } else {
                name = query[i];
            }
            // only continue for non-empty names that we have not seen before...
            if (name &amp;&amp; !Object.prototype.hasOwnProperty.call(result, name)) {
                if (decode) {
                    // unescape characters with special meaning like ? and #
                    name = decodeURIComponent(name);
                }
                if (pairKeyStart &gt;= 0) {
                    value = query[i].substring(pairKeyStart + 1);
                    if (value) {
                        if (decode) {
                            value = decodeURIComponent(value);
                        }
                    } else {
                        value = missingValue;
                    }
                } else {
                    value = missingValue;
                }
                result[name] = value;
            }
        }
        return result;
    }
}
</code></pre>
<p><strong>Version 2:</strong> Returns a data map object with two identical length arrays, one for names and one for values, with an index for each parameter. This one supports duplicate names and intentionally does not de-duplicate them, because that is probably why you would want to use this format.</p>
<pre class=""lang-js prettyprint-override""><code>function getQueryData(url, paramKey, pairKey, missingValue, decode) {

    var query, queryStart, fragStart, pairKeyStart, i, len, name, value, result;

    if (!url || typeof url !== 'string') {
          url = location.href; // more robust than location.search, which is flaky
    }
        if (!paramKey || typeof paramKey !== 'string') {
            paramKey = '&amp;';
        }
        if (!pairKey || typeof pairKey !== 'string') {
            pairKey = '=';
        }
        // when you do not explicitly tell the API...
        if (arguments.length &lt; 5) {
            // it will unescape parameter keys and values by default...
            decode = true;
        }

        queryStart = url.indexOf('?');
        if (queryStart &gt;= 0) {
            // grab everything after the very first ? question mark...
            query = url.substring(queryStart + 1);
        } else {
            // assume the input is already parameter data...
            query = url;
        }
        // remove fragment identifiers...
        fragStart = query.indexOf('#');
        if (fragStart &gt;= 0) {
            // remove everything after the first # hash mark...
            query = query.substring(0, fragStart);
        }
        // make sure at this point we have enough material to do something useful...
        if (query.indexOf(paramKey) &gt;= 0 || query.indexOf(pairKey) &gt;= 0) {
            // we no longer need the whole query, so get the parameters...
            query = query.split(paramKey);
            result = {
                names: [],
                values: []
            };
            // loop through the parameters...
            for (i = 0, len = query.length; i &lt; len; i = i + 1) {
                pairKeyStart = query[i].indexOf(pairKey);
                if (pairKeyStart &gt;= 0) {
                    name = query[i].substring(0, pairKeyStart);
                } else {
                    name = query[i];
                }
                // only continue for non-empty names...
                if (name) {
                    if (decode) {
                        // unescape characters with special meaning like ? and #
                        name = decodeURIComponent(name);
                    }
                    if (pairKeyStart &gt;= 0) {
                        value = query[i].substring(pairKeyStart + 1);
                        if (value) {
                            if (decode) {
                                value = decodeURIComponent(value);
                            }
                        } else {
                            value = missingValue;
                        }
                    } else {
                        value = missingValue;
                    }
                    result.names.push(name);
                    result.values.push(value);
                }
           }
           return result;
       }
   }
</code></pre>
"
"38817619","6","<p>I have the requirement to asynchronously load an array of JavaScript files and at the final make a callback. Basically my best approach is the following:</p>

<pre><code>// Load a JavaScript file from other JavaScript file
function loadScript(urlPack, callback) {
    var url = urlPack.shift();
    var subCallback;

    if (urlPack.length == 0) subCallback = callback;
    else subCallback = function () {
        console.log(""Log script: "" + new Date().getTime());
        loadScript(urlPack, callback);
    }

    // Adding the script tag to the head as suggested before
    var head = document.getElementsByTagName('head')[0];
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = url;

    // Then bind the event to the callback function.
    // There are several events for cross browser compatibility.
    script.onreadystatechange = subCallback;
    script.onload = subCallback;

    // Fire the loading
    head.appendChild(script);
}
</code></pre>

<p>Example:</p>

<pre><code>loadScript(
[
    ""js/DataTable/jquery.dataTables.js"",
    ""js/DataTable/dataTables.bootstrap.js"",
    ""js/DataTable/dataTables.buttons.min.js"",
    ""js/DataTable/dataTables.colReorder.min.js"",
    ""js/DataTable/dataTables.fixedHeader.min.js"",
    ""js/DataTable/buttons.bootstrap.min.js"",
    ""js/DataTable/buttons.colVis.min.js"",
    ""js/DataTable/buttons.html5.min.js""
], function() { gpLoad(params); });
</code></pre>

<p>The second script will not load until the first is completely loaded, and so...</p>

<p>Results:</p>

<p><a href=""https://i.stack.imgur.com/6Y3vU.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/6Y3vU.png"" alt=""Result""></a></p>
"
"21248243","2","<p>This will parse variables <strong>AND</strong> arrays from a URL string. It uses neither <em>regex</em> or any external library.</p>

<pre><code>function url2json(url) {
   var obj={};
   function arr_vals(arr){
      if (arr.indexOf(',') &gt; 1){
         var vals = arr.slice(1, -1).split(',');
         var arr = [];
         for (var i = 0; i &lt; vals.length; i++)
            arr[i]=vals[i];
         return arr;
      }
      else
         return arr.slice(1, -1);
   }
   function eval_var(avar){
      if (!avar[1])
          obj[avar[0]] = '';
      else
      if (avar[1].indexOf('[') == 0)
         obj[avar[0]] = arr_vals(avar[1]);
      else
         obj[avar[0]] = avar[1];
   }
   if (url.indexOf('?') &gt; -1){
      var params = url.split('?')[1];
      if(params.indexOf('&amp;') &gt; 2){
         var vars = params.split('&amp;');
         for (var i in vars)
            eval_var(vars[i].split('='));
      }
      else
         eval_var(params.split('='));
   }
   return obj;
}
</code></pre>

<p>Example:</p>

<pre><code>var url = ""http://www.x.com?luckyNums=[31,21,6]&amp;name=John&amp;favFoods=[pizza]&amp;noVal""
console.log(url2json(url));
</code></pre>

<p>Output:</p>

<pre><code>[object]
   noVal: """"
   favFoods: ""pizza""
   name:     ""John""
   luckyNums:
      0: ""31""
      1: ""21""
      2: ""6""
</code></pre>
"
"64704021","5","<p>Lots of useful information here, but in my opinion, one of the most important elements was not addressed.</p>
<p><code>null</code>, <code>undefined</code>, and <code>&quot;&quot;</code> are all <em>falsy</em>.</p>
<p>When evaluating for an empty string, it's often because you need to replace it with something else.</p>
<p>In which case, you can expect the following behavior.</p>
<pre><code>var a = &quot;&quot;
var b = null
var c = undefined

console.log(a || &quot;falsy string provided&quot;) // prints -&gt;&quot;falsy string provided&quot;
console.log(b || &quot;falsy string provided&quot;) // prints -&gt;&quot;falsy string provided&quot;
console.log(c || &quot;falsy string provided&quot;) // prints -&gt;&quot;falsy string provided&quot;
</code></pre>
<p>With that in mind, a method or function that can return whether or not a string is <code>&quot;&quot;</code>, <code>null</code>, or <code>undefined</code> (an invalid string) versus a valid string is as simple as this:</p>
<pre><code>const validStr = (str) =&gt; str ? true : false

validStr(undefined) // returns false
validStr(null) // returns false
validStr(&quot;&quot;) // returns false
validStr(&quot;My String&quot;) // returns true
</code></pre>
<p>I hope that's helpful.</p>
"
"21277220","1","<p>This will work... You need to call this function where you need get the parameter by passing its name...</p>

<pre><code>function getParameterByName(name)
{
  name = name.replace(/[\[]/,""\\\["").replace(/[\]]/,""\\\]"");
  var regexS = ""[\\?&amp;]""+name+""=([^&amp;#]*)"";
  var regex = new RegExp( regexS );
  var results = regex.exec( window.location.href );
  alert(results[1]);
  if (results == null)
    return """";
  else
    return results[1];
}
</code></pre>
"
"21323513","23","<p>MarkG and Lavamantis offered a much better solution than the one that has been accepted. It's a shame they don't get more upvotes!</p>

<p>Here is the function I use to solve the floating point decimals issues <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round#Example%3a_Decimal_rounding"">also based on MDN</a>. It is even more generic (but less concise) than Lavamantis's solution:</p>

<pre><code>function round(value, exp) {
  if (typeof exp === 'undefined' || +exp === 0)
    return Math.round(value);

  value = +value;
  exp  = +exp;

  if (isNaN(value) || !(typeof exp === 'number' &amp;&amp; exp % 1 === 0))
    return NaN;

  // Shift
  value = value.toString().split('e');
  value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp)));

  // Shift back
  value = value.toString().split('e');
  return +(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp));
}
</code></pre>

<p>Use it with:</p>

<pre><code>round(10.8034, 2);      // Returns 10.8
round(1.275, 2);        // Returns 1.28
round(1.27499, 2);      // Returns 1.27
round(1.2345678e+2, 2); // Returns 123.46
</code></pre>

<p>Compared to Lavamantis's solution, we can do...</p>

<pre><code>round(1234.5678, -2); // Returns 1200
round(""123.45"");      // Returns 123
</code></pre>
"
"64762041","4","<h3>ONE-LINER using <strong>Promises</strong></h3>
<pre class=""lang-js prettyprint-override""><code>const sleep = t =&gt; new Promise(s =&gt; setTimeout(s, t));
</code></pre>
<p><strong>DEMO</strong></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const sleep = t =&gt; new Promise(s =&gt; setTimeout(s, t));
// usage
async function demo() {
    // count down
    let i = 6;
    while (i--) {
        await sleep(1000);
        console.log(i);
    }
    // sum of numbers 0 to 5 using by delay of 1 second
    const sum = await [...Array(6).keys()].reduce(async (a, b) =&gt; {
        a = await a;
        await sleep(1000);
        const result = a + b;
        console.log(`${a} + ${b} = ${result}`);
        return result;
    }, Promise.resolve(0));
    console.log(""sum"", sum);
}
demo();</code></pre>
</div>
</div>
</p>
"
"65310295","0","<p>This function has worked well for me, assuring that it's both a string and not empty:</p>
<p><code>isNonBlankString = function(s) { return ((typeof s === 'string' || s instanceof String) &amp;&amp; s !== ''); }</code></p>
"
"66128073","1","<p>If you want code that is usable on all browsers, then use <a href=""https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout"" rel=""nofollow noreferrer""><strong><code>setTimeout()</code></strong></a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout"" rel=""nofollow noreferrer""><strong><code>clearTimeout()</code></strong></a>.  If you're reading this far into answers, you'll probably notice that the accepted answer breaks all JavaScript compilation in <em>Internet Explorer 11</em>, and after using this solution, it seems that <em>5% of users approximately still use this actively-developed browser and require support.</em></p>
<p>This has broken almost everything.  There are known reports of arrow functions breaking IE11 functionality for the software of <a href=""https://www.drupal.org/project/simple_recaptcha/issues/3183646"" rel=""nofollow noreferrer"">Drupal</a>, <a href=""https://wordpress.org/support/topic/issues-on-ie11/"" rel=""nofollow noreferrer"">WordPress</a>, <a href=""https://github.com/aws-amplify/amplify-js/issues/5582"" rel=""nofollow noreferrer"">Amazon AWS</a>, <a href=""https://www.ibm.com/support/pages/apar/IJ25464"" rel=""nofollow noreferrer"">IBM</a>, and there's even a dedicated discussion to it on <a href=""https://stackoverflow.com/q/40216015/2430549"">StackOverflow</a>.</p>
<p>Just check it out...</p>
<p><a href=""https://i.stack.imgur.com/dHVqR.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/dHVqR.jpg"" alt=""Browser Compatibility Chart - Arrow Function Expressions"" /></a></p>
<p><a href=""https://i.stack.imgur.com/0voVQ.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/0voVQ.jpg"" alt=""Browser Compatibility Chart - setTimeout"" /></a></p>
<p>Use <code>setTimeout()</code> and <code>clearTimeout()</code>, and that will do the trick for all browsers...</p>
<p><a href=""https://jsbin.com/gazogeteci/1/edit?html,js,console,output"" rel=""nofollow noreferrer""><strong>Working JSBin Demo</strong></a></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var timeout;

function sleep(delay) {
        if(timeout) {
            clearTimeout(timeout);
        }
        timeout = setTimeout(function() {
            myFunction();
        }, delay);
}
  
console.log(""sleep for 1 second"");
sleep(1000);

function myFunction() {
  console.log(""slept for 1 second!"");
}</code></pre>
</div>
</div>
</p>
"
"21350778","10","<p><strong>Get all querystring parameters including checkbox values (arrays).</strong></p>

<p>Considering the correct &amp; normal use of GET parameters, the things I see it's missing, on most functions, is the support for arrays and removing the hash data.</p>

<p>So I wrote this function:</p>

<pre><code>function qs(a){
 if(!a)return {};
 a=a.split('#')[0].split('&amp;');
 var b=a.length,c={},d,k,v;
 while(b--){
  d=a[b].split('=');
  k=d[0].replace('[]',''),v=decodeURIComponent(d[1]||'');
  c[k]?typeof c[k]==='string'?(c[k]=[v,c[k]]):(c[k].unshift(v)):c[k]=v;
 }
 return c
}
</code></pre>

<p>Using shorthand operators &amp; while-- loop, the performance should be very good to.</p>

<p><strong>Support:</strong></p>

<ol>
<li>Empty values (<em>key= / key</em>)</li>
<li>Key value (<em>key=value</em>)</li>
<li>Arrays (<em>key[]=value</em>)</li>
<li>Hash (<em>the hash tag is split out</em>)</li>
</ol>

<p><strong>Notes:</strong></p>

<p>It does not support object arrays (key[key]=value)</p>

<p>If the space is + it remains a +.</p>

<p>Add <code>.replace(/\+/g, "" "")</code> if you need.</p>

<p><strong>Usage:</strong></p>

<pre><code>qs('array[]=1&amp;array[]=2&amp;key=value&amp;empty=&amp;empty2#hash')
</code></pre>

<p><strong>Return:</strong></p>

<pre><code>{
    ""empty"": """",
    ""key"": ""value"",
    ""array"": [
        ""1"",
        ""2""
    ]
}
</code></pre>

<p><strong>Demo:</strong></p>

<p><a href=""http://jsfiddle.net/ZQMrt/1/"" rel=""nofollow"">http://jsfiddle.net/ZQMrt/1/</a></p>

<p><strong>Info</strong></p>

<p>If you don't understand something or you can't read the function just ask. I'm happy to explain what I did here.</p>

<p><em>If you think the function is unreadable and unmaintainable I'm happy to rewrite the function for you, but consider that shorthand &amp; bitwise operators are always faster than a standard syntax (maybe read about shorthands and bitwise operators in the ECMA-262 book or use your favorite search engine). Rewriting the code in a standard readable syntax means performance loss.</em></p>
"
"38923942","8","<p>I made a fairly efficient extension to the base JavaScript array:</p>

<pre><code>Array.prototype.drop = function(k) {
  var valueIndex = this.indexOf(k);
  while(valueIndex &gt; -1) {
    this.removeAt(valueIndex);
    valueIndex = this.indexOf(k);
  }
};
</code></pre>
"
"21451323","4","<p>A simple solution with plain JavaScript and <a href=""http://en.wikipedia.org/wiki/Regular_expression"" rel=""nofollow"">regular expressions</a>:</p>

<pre><code>alert(getQueryString(""p2""));

function getQueryString (Param) {
    return decodeURI(""http://www.example.com/?p1=p11&amp;p2=p2222"".replace(new RegExp(""^(?:.*[&amp;?]"" + encodeURI(Param).replace(/[.+*]/g, ""$&amp;"") + ""(?:=([^&amp;]*))?)?.*$"", ""i""), ""$1""));
}
</code></pre>

<p><a href=""http://jsfiddle.net/QeLF3/"" rel=""nofollow"">JsFiddle</a></p>
"
"21736323","2","<p>This didn't work for me, I want to match <code>?b</code> as the <code>b</code> parameter is present, and not match <code>?return</code> as the <code>r</code> parameter, here is <a href=""https://gist.github.com/Dorian/833b37d2c7b168b7e94c"" rel=""nofollow"">my solution</a>.</p>

<pre><code>window.query_param = function(name) {
  var param_value, params;

  params = location.search.replace(/^\?/, '');
  params = _.map(params.split('&amp;'), function(s) {
    return s.split('=');
  });

  param_value = _.select(params, function(s) {
    return s.first === name;
  })[0];

  if (param_value) {
    return decodeURIComponent(param_value[1] || '');
  } else {
    return null;
  }
};
</code></pre>
"
"21789628","2","<p>The shortest possible expression in terms of size to obtain a query object seems to be:</p>

<pre><code>var params = {};
location.search.substr(1).replace(/([^&amp;=]*)=([^&amp;]*)&amp;?/g,
  function () { params[decodeURIComponent(arguments[1])] = decodeURIComponent(arguments[2]); });
</code></pre>

<p>You can make use of the <code>A</code> element to parse a URI from a string into its <code>location</code>-like components (to get rid of <code>#...</code>, for example):</p>

<pre><code>var a = document.createElement('a');
a.href = url;
// Parse a.search.substr(1)... as above
</code></pre>
"
"30387561","9","<p>The previous answers still leave room for improvement because of the possibilities, the intuitiveness of the code, and the use of <code>id</code> versus <code>name</code>. One can get a read-out of three data of a selected option -- its index number, its value and its text. This simple, cross-browser code does all three:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=""utf-8""&gt;
    &lt;title&gt;Demo GetSelectOptionData&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form name=""demoForm""&gt;
        &lt;select name=""demoSelect"" onchange=""showData()""&gt;
            &lt;option value=""zilch""&gt;Select:&lt;/option&gt;
            &lt;option value=""A""&gt;Option 1&lt;/option&gt;
            &lt;option value=""B""&gt;Option 2&lt;/option&gt;
            &lt;option value=""C""&gt;Option 3&lt;/option&gt;
        &lt;/select&gt;
    &lt;/form&gt;

    &lt;p id=""firstP""&gt;&amp;nbsp;&lt;/p&gt;
    &lt;p id=""secondP""&gt;&amp;nbsp;&lt;/p&gt;
    &lt;p id=""thirdP""&gt;&amp;nbsp;&lt;/p&gt;

    &lt;script&gt;
    function showData() {
        var theSelect = demoForm.demoSelect;
        var firstP = document.getElementById('firstP');
        var secondP = document.getElementById('secondP');
        var thirdP = document.getElementById('thirdP');
        firstP.innerHTML = ('This option\'s index number is: ' + theSelect.selectedIndex + ' (Javascript index numbers start at 0)');
        secondP.innerHTML = ('Its value is: ' + theSelect[theSelect.selectedIndex].value);
        thirdP.innerHTML = ('Its text is: ' + theSelect[theSelect.selectedIndex].text);
    }
     &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Live demo: <a href=""http://jsbin.com/jiwena/1/edit?html,output"" rel=""nofollow noreferrer"">http://jsbin.com/jiwena/1/edit?html,output</a> .</p>

<p><code>id</code> should be used for make-up purposes. For functional form purposes, <code>name</code> is still valid, also in HTML5, and should still be used. Lastly, mind the use of square versus round brackets in certain places. As was explained before, only (older versions of) Internet&nbsp;Explorer will accept round ones in all places.</p>
"
"39854041","6","<h1>Here is maybe another way!</h1>
<p>In Node.js you can do that just like the following code shows!</p>
<p><strong>sub.js</strong></p>
<pre class=""lang-js prettyprint-override""><code>    module.exports = {
      log: function(string) {
        if(console) console.log(string);
      }
      mylog: function(){
        console.log('just for log test!');
      }
    }
</code></pre>
<p><strong>main.js</strong></p>
<pre class=""lang-js prettyprint-override""><code>    const mylog = require('./sub');

    mylog.log('Hurray, it works! :)');
    mylog.mylog();

</code></pre>
<h2>refs</h2>
<p><a href=""http://requirejs.org/docs/node.html"" rel=""nofollow noreferrer"">http://requirejs.org/docs/node.html</a></p>
"
"40061754","2","<p>This can be solved using regular expressions and the flag <code>g</code>, which means to not stop after finding the first match. Really, regular expressions are life savers!</p>

<pre><code>function replaceAll(string, pattern, replacement) {
    return string.replace(new RegExp(pattern, ""g""), replacement);
}

// or if you want myString.replaceAll(""abc"", """");

String.prototype.replaceAll = function(pattern, replacement) {
    return this.replace(new RegExp(pattern, ""g""), replacement);
};
</code></pre>
"
"23050534","1","<p>Quick, easy, and fast:</p>

<p><strong>The function:</strong></p>

<pre><code>function getUrlVar() {
    var result = {};
    var location = window.location.href.split('#');
    var parts = location[0].replace(/[?&amp;]+([^=&amp;]+)=([^&amp;]*)/gi, function(m,key,value) {
        result [key] = value;
    });
    return result;
}
</code></pre>

<p><strong>Usage:</strong></p>

<pre><code>var varRequest = getUrlVar()[""theUrlVarName""];
</code></pre>
"
"23117113","2","<p>Here is <code>String</code> prototype implementation:</p>

<pre><code>String.prototype.getParam = function( str ){
    str = str.replace(/[\[]/,""\\\["").replace(/[\]]/,""\\\]"");
    var regex = new RegExp( ""[\\?&amp;]*""+str+""=([^&amp;#]*)"" );    
    var results = regex.exec( this );
    if( results == null ){
        return """";
    } else {
        return results[1];
    }
}
</code></pre>

<p>Example call:</p>

<pre><code>var status = str.getParam(""status"")
</code></pre>

<p><code>str</code> can be a query string or url</p>
"
"67606348","0","<h2>2021+ Update</h2>
<p>If you are looking for an alternative to:</p>
<pre class=""lang-js prettyprint-override""><code>let sleep = ms =&gt; new Promise(res=&gt;setTimeout(res,ms));
</code></pre>
<p>Then use this:</p>
<pre><code>let sleep = async ms =&gt; void await Atomics.waitAsync(new Int32Array(new SharedArrayBuffer(4)), 0, 0, ms).value;
</code></pre>
<p>Note, that as of when this question is posted, it is a Stage 3 proposal. Also, it may require your site to be cross-origin isolated. To see if it works in your browser, (on Stack Overflow) try this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let sleep = async ms =&gt; void await Atomics.waitAsync(new Int32Array(new SharedArrayBuffer(4)), 0, 0, ms).value;

void async function() {
  console.log(1);
  await sleep(2000);
  console.log(2);
}()</code></pre>
</div>
</div>
</p>
"
"67692044","1","<blockquote>
<p>What is the JavaScript version of sleep()?</p>
</blockquote>
<p>This has already been answered in <a href=""https://stackoverflow.com/a/39914235"">the currently accepted answer</a>:</p>
<pre class=""lang-js prettyprint-override""><code>await new Promise(r =&gt; setTimeout(r, 1000));
</code></pre>
<h3>Two asynchronous functions running simultaneously</h3>
<p>It is a good idea to put it inside a function <code>sleep()</code>, and then
<code>await sleep()</code>.<br />
To use it, a bit of context is needed:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function sleep (ms) { return new Promise(r =&gt; setTimeout(r, ms)); }

(async function slowDemo () {
  console.log('Starting slowDemo ...');
  await sleep(2000);
  console.log('slowDemo: TWO seconds later ...');
})();

(async function fastDemo () {
  console.log('Starting fastDemo ...');
  await sleep(500);
  for (let i = 1; i &lt; 6; i++) {
    console.log('fastDemo: ' + (i * 0.5) + ' seconds later ...');
    await sleep(500);
  }
})();</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.as-console-wrapper { max-height: 100% !important; top: 0; }</code></pre>
</div>
</div>
</p>
<h3>Two asynchronous calls running in sequence – one after the other</h3>
<p>But suppose <code>slowDemo</code> produces some result that <code>fastDemo</code>
depends upon.<br />
In such a case, <code>slowDemo</code> must run to completion before <code>fastDemo</code> starts:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function sleep (ms) { return new Promise(r =&gt; setTimeout(r, ms)); }

(async () =&gt; {
  await (async function slowDemo () {
    console.log('Starting slowDemo ...');
    await sleep(2000);
    console.log('slowDemo: TWO seconds later ... completed!');
  })();

  (async function fastDemo () {
    console.log('Starting fastDemo ...');
    await sleep(500);
    let i = -2;
    for (i = 1; i &lt; 5; i++) {
      console.log('fastDemo: ' + (i * 0.5) + ' seconds later ...');
      await sleep(500);
    }
    console.log('fastDemo: ' + (i * 0.5) + ' seconds later. Completed!');
  })();
})();</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.as-console-wrapper { max-height: 100% !important; top: 0; }</code></pre>
</div>
</div>
</p>
"
"67947246","0","<p>for those looking for rails <code>.blank?</code> for js string:</p>
<pre><code>function is_blank(str) { 
  return (!str || str.length === 0 || str.trim() == '')
}
</code></pre>
"
"68001898","0","<p>This is another type with string trimming option and it is error proof:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let strTest = "" "";

console.log(""Is empty string?"",isEmptyString(strTest)); // without trim

console.log(""Is empty string?"",isEmptyString(strTest,true)); // with trim (escape left and right white spaces)

strTest = ""abcd "";

console.log(""Is empty string?"",isEmptyString(strTest)); // without trim
console.log(""Is empty string?"",isEmptyString(strTest,true)); // with trim

function isEmptyString(str, withTrim = false) { 
  try {
    if (withTrim){
      if (str.trim()) return false;
      else return true;
    }
    else{
      if (str) return false;
      else return true;
    }
  } catch (error) {
    return true;
  }
}</code></pre>
</div>
</div>
</p>
"
"68102842","0","<p>I have tried several of the examples suggested here. My goal was to not only be able to check for empty, but also !empty. This was the result The only thing I could not find in any of these solutions is how to detect an undefined within the function if it has not, at least, been declared. perhaps that is not possible.</p>
<pre><code>function empty(data)
{
    if(typeof data === &quot;undefined&quot;)
    {
        return true;
    }
    else if(data === &quot;0&quot;)
    {
        return true;
    }
    else if(!data)
    {
        return true;
    }
    else if(/\S/.test(data) == &quot;&quot;)
    {
        return true;
    }
    else
    {
        return false;
    }
}
</code></pre>
<p><strong>Testing</strong></p>
<pre><code>var One = &quot;    &quot;; if(empty(One)) // true
var One = &quot;&quot;; if(empty(One)) // true
var One = 0; if(empty(One)) // true
var One = &quot;0&quot;; if(empty(One)) //true
var One = NaN; if(empty(One)) // true
var One = null; if(empty(One)) // true
var One = false; if(empty(One)) //true
var Two; if(empty(Two) //True
============
Not Empty
============
var One = &quot;     &quot;; if(!empty(One)) //false (empty)
var One = &quot;&quot;; if(!empty(One)) //false
var One = 6; if(!empty(One)) //true
var One = &quot;seven&quot;; if(!empty(One)) //true
var One = NaN; if(!empty(One)) // false
var One = null; if(!empty(One)) //false
var One = false; if(!empty(One)) //false
Var Two; if(!empty(Two)) // false (undefined)
</code></pre>
"
"23401756","34","<p>Here's an extended version of Andy E's linked ""Handle array-style query strings""-version. Fixed a bug (<code>?key=1&amp;key[]=2&amp;key[]=3</code>; <code>1</code> is lost and replaced with <code>[2,3]</code>), made a few minor performance improvements (re-decoding of values, recalculating ""["" position, etc.) and added a number of improvements (functionalized, support for <code>?key=1&amp;key=2</code>, support for <code>;</code> delimiters). I left the variables annoyingly short, but added comments galore to make them readable (oh, and I reused <code>v</code> within the local functions, sorry if that is confusing ;).</p>

<p>It will handle the following querystring...</p>

<blockquote>
  <p>?test=Hello&amp;person=neek&amp;person[]=jeff&amp;person[]=jim&amp;person[extra]=john&amp;test3&amp;nocache=1398914891264</p>
</blockquote>

<p>...making it into an object that looks like...</p>

<pre><code>{
    ""test"": ""Hello"",
    ""person"": {
        ""0"": ""neek"",
        ""1"": ""jeff"",
        ""2"": ""jim"",
        ""length"": 3,
        ""extra"": ""john""
    },
    ""test3"": """",
    ""nocache"": ""1398914891264""
}
</code></pre>

<p>As you can see above, this version handles some measure of ""malformed"" arrays, i.e. - <code>person=neek&amp;person[]=jeff&amp;person[]=jim</code> or <code>person=neek&amp;person=jeff&amp;person=jim</code> as the key is identifiable and valid (at least in dotNet's <a href=""http://msdn.microsoft.com/en-us/library/xsc9a449.aspx"" rel=""noreferrer"">NameValueCollection.Add</a>):</p>

<blockquote>
  <p>If the specified key already exists in the target NameValueCollection
  instance, the specified value is added to the existing comma-separated
  list of values in the form ""value1,value2,value3"".</p>
</blockquote>

<p>It seems <a href=""https://stackoverflow.com/questions/1746507/authoritative-position-of-duplicate-http-get-query-keys"">the jury is somewhat out</a> on repeated keys as there is no spec. In this case, multiple keys are stored as an (fake)array. But do note that I <strong>do not</strong> process values based on commas into arrays.</p>

<p><strong>The code:</strong></p>

<pre><code>getQueryStringKey = function(key) {
    return getQueryStringAsObject()[key];
};


getQueryStringAsObject = function() {
    var b, cv, e, k, ma, sk, v, r = {},
        d = function (v) { return decodeURIComponent(v).replace(/\+/g, "" ""); }, //# d(ecode) the v(alue)
        q = window.location.search.substring(1), //# suggested: q = decodeURIComponent(window.location.search.substring(1)),
        s = /([^&amp;;=]+)=?([^&amp;;]*)/g //# original regex that does not allow for ; as a delimiter:   /([^&amp;=]+)=?([^&amp;]*)/g
    ;

    //# ma(make array) out of the v(alue)
    ma = function(v) {
        //# If the passed v(alue) hasn't been setup as an object
        if (typeof v != ""object"") {
            //# Grab the cv(current value) then setup the v(alue) as an object
            cv = v;
            v = {};
            v.length = 0;

            //# If there was a cv(current value), .push it into the new v(alue)'s array
            //#     NOTE: This may or may not be 100% logical to do... but it's better than loosing the original value
            if (cv) { Array.prototype.push.call(v, cv); }
        }
        return v;
    };

    //# While we still have key-value e(ntries) from the q(uerystring) via the s(earch regex)...
    while (e = s.exec(q)) { //# while((e = s.exec(q)) !== null) {
        //# Collect the open b(racket) location (if any) then set the d(ecoded) v(alue) from the above split key-value e(ntry) 
        b = e[1].indexOf(""["");
        v = d(e[2]);

        //# As long as this is NOT a hash[]-style key-value e(ntry)
        if (b &lt; 0) { //# b == ""-1""
            //# d(ecode) the simple k(ey)
            k = d(e[1]);

            //# If the k(ey) already exists
            if (r[k]) {
                //# ma(make array) out of the k(ey) then .push the v(alue) into the k(ey)'s array in the r(eturn value)
                r[k] = ma(r[k]);
                Array.prototype.push.call(r[k], v);
            }
            //# Else this is a new k(ey), so just add the k(ey)/v(alue) into the r(eturn value)
            else {
                r[k] = v;
            }
        }
        //# Else we've got ourselves a hash[]-style key-value e(ntry) 
        else {
            //# Collect the d(ecoded) k(ey) and the d(ecoded) sk(sub-key) based on the b(racket) locations
            k = d(e[1].slice(0, b));
            sk = d(e[1].slice(b + 1, e[1].indexOf(""]"", b)));

            //# ma(make array) out of the k(ey) 
            r[k] = ma(r[k]);

            //# If we have a sk(sub-key), plug the v(alue) into it
            if (sk) { r[k][sk] = v; }
            //# Else .push the v(alue) into the k(ey)'s array
            else { Array.prototype.push.call(r[k], v); }
        }
    }

    //# Return the r(eturn value)
    return r;
};
</code></pre>
"
"42902202","8","<p>I made a function:</p>

<pre><code>function pop(valuetoremove, myarray) {
    var indexofmyvalue = myarray.indexOf(valuetoremove);
    myarray.splice(indexofmyvalue, 1);
}
</code></pre>

<p>And used it like this:</p>

<pre><code>pop(valuetoremove, myarray);
</code></pre>
"
"43311380","9","<h2>Remove one value, using loose comparison, without mutating the original array, ES6</h2>

<pre><code>/**
 * Removes one instance of `value` from `array`, without mutating the original array. Uses loose comparison.
 *
 * @param {Array} array Array to remove value from
 * @param {*} value Value to remove
 * @returns {Array} Array with `value` removed
 */
export function arrayRemove(array, value) {
    for(let i=0; i&lt;array.length; ++i) {
        if(array[i] == value) {
            let copy = [...array];
            copy.splice(i, 1);
            return copy;
        }
    }
    return array;
}
</code></pre>
"
"23946023","13","<p>Here's what I'm using:</p>

<pre><code>/**
 * Examples:
 * getUrlParams()['myparam']    // url defaults to the current page
 * getUrlParams(url)['myparam'] // url can be just a query string
 *
 * Results of calling `getUrlParams(url)['myparam']` with various urls:
 * example.com                               (undefined)
 * example.com?                              (undefined)
 * example.com?myparam                       (empty string)
 * example.com?myparam=                      (empty string)
 * example.com?myparam=0                     (the string '0')
 * example.com?myparam=0&amp;myparam=override    (the string 'override')
 *
 * Origin: http://stackoverflow.com/a/23946023/2407309
 */
function getUrlParams (url) {
    var urlParams = {} // return value
    var queryString = getQueryString()
    if (queryString) {
        var keyValuePairs = queryString.split('&amp;')
        for (var i = 0; i &lt; keyValuePairs.length; i++) {
            var keyValuePair = keyValuePairs[i].split('=')
            var paramName = keyValuePair[0]
            var paramValue = keyValuePair[1] || ''
            urlParams[paramName] = decodeURIComponent(paramValue.replace(/\+/g, ' '))
        }
    }
    return urlParams // functions below
    function getQueryString () {
        var reducedUrl = url || window.location.search
        reducedUrl = reducedUrl.split('#')[0] // Discard fragment identifier.
        var queryString = reducedUrl.split('?')[1]
        if (!queryString) {
            if (reducedUrl.search('=') !== false) { // URL is a query string.
                queryString = reducedUrl
            }
        }
        return queryString
    } // getQueryString
} // getUrlParams
</code></pre>

<p>Returning 'override' rather than '0' in the last case makes it consistent with PHP. Works in IE7.</p>
"
"24079713","3","<p>Most pretty but basic:</p>

<pre><code>data = {};
$.each(
    location.search.substr(1).split('&amp;').filter(Boolean).map(function(kvpairs){
        return kvpairs.split('=')
    }),
    function(i,values) {
        data[values.shift()] = values.join('=')
    }
);
</code></pre>

<p>It doesn't handle values lists such as <code>?a[]=1&amp;a[]2</code></p>
"
"17658411","14","<p>This is the minimal amount of code I think I needed to do something like this effectively. I found this method to be useful; it returns an array of the check boxes that are checked and then you can use their value (this solution uses jQuery):</p>

<pre><code>// This is how you get them
var output = """";
var checkedBoxes = $(""DivCheckBoxesAreIn"").children(""input:checked"");
if(checkedBoxes.length &lt;= 0) {
    alert('Please select check boxes');
    return false;
};

// And this is how you use them:
checkedBoxes.each(function() {
    output +=  this.value + "", "";
};
</code></pre>

<p>Printing ""output"" will give you a comma-separated list of your values.</p>
"
"17666910","17","<pre><code>$('controlCheckBox').click(function(){
    var temp = $(this).prop('checked');
    $('controlledCheckBoxes').prop('checked', temp);
});
</code></pre>
"
"24489760","1","<p>This function will return a parsed JavaScript object with any arbitrarily nested values using recursion as necessary.</p>

<p>Here's a <a href=""http://jsfiddle.net/WZHm5/3/"" rel=""nofollow"">jsfiddle</a> example.</p>

<pre><code>[
  '?a=a',
  '&amp;b=a',
  '&amp;b=b',
  '&amp;c[]=a',
  '&amp;c[]=b',
  '&amp;d[a]=a',
  '&amp;d[a]=x',
  '&amp;e[a][]=a',
  '&amp;e[a][]=b',
  '&amp;f[a][b]=a',
  '&amp;f[a][b]=x',
  '&amp;g[a][b][]=a',
  '&amp;g[a][b][]=b',
  '&amp;h=%2B+%25',
  '&amp;i[aa=b',
  '&amp;i[]=b',
  '&amp;j=',
  '&amp;k',
  '&amp;=l',
  '&amp;abc=foo',
  '&amp;def=%5Basf%5D',
  '&amp;ghi=[j%3Dkl]',
  '&amp;xy%3Dz=5',
  '&amp;foo=b%3Dar',
  '&amp;xy%5Bz=5'
].join('');
</code></pre>

<p>Given any of the above test examples.</p>

<pre><code>var qs = function(a) {
  var b, c, e;
  b = {};
  c = function(d) {
    return d &amp;&amp; decodeURIComponent(d.replace(/\+/g, "" ""));
  };
  e = function(f, g, h) {
    var i, j, k, l;
    h = h ? h : null;
    i = /(.+?)\[(.+?)?\](.+)?/g.exec(g);
    if (i) {
      [j, k, l] = [i[1], i[2], i[3]]
      if (k === void 0) {
        if (f[j] === void 0) {
          f[j] = [];
        }
        f[j].push(h);
      } else {
        if (typeof f[j] !== ""object"") {
          f[j] = {};
        }
        if (l) {
          e(f[j], k + l, h);
        } else {
          e(f[j], k, h);
        }
      }
    } else {
      if (f.hasOwnProperty(g)) {
        if (Array.isArray(f[g])) {
          f[g].push(h);
        } else {
          f[g] = [].concat.apply([f[g]], [h]);
        }
      } else {
        f[g] = h;
      }
      return f[g];
    }
  };
  a.replace(/^(\?|#)/, """").replace(/([^#&amp;=?]+)?=?([^&amp;=]+)?/g, function(m, n, o) {
    n &amp;&amp; e(b, c(n), c(o));
  });
  return b;
};
</code></pre>
"
"17695617","30","<p>An easy solution now would be to use the <a href=""https://en.wikipedia.org/wiki/Underscore.js"">underscore.js library</a>. It's providing many useful tools, such as <code>each</code> and will automatically delegate the job to the native <code>forEach</code> if available.</p>

<p><a href=""http://codepen.io/Micka33/pen/nbyxf"">A CodePen example</a> of how it works is:</p>

<pre><code>var arr = [""elemA"", ""elemB"", ""elemC""];
_.each(arr, function(elem, index, ar)
{
...
});
</code></pre>

<h3>See also</h3>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"">Documentation for native <code>Array.prototype.forEach()</code></a>.</li>
<li>In <em><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in"">for_each...in</a></em> (MDN) it is explained that <code>for each (variable in object)</code> is deprecated as the part of ECMA-357 (<a href=""https://developer.mozilla.org/en-US/docs/E4X"">EAX</a>) standard.</li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"">for...of</a> (MDN) describes the next way of iterating using <code>for (variable of object)</code> as the part of the Harmony (ECMAScript&nbsp;6) proposal.</li>
</ul>
"
"25075575","64","<p>A precise rounding method. Source: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round"" rel=""noreferrer"">Mozilla</a></p>

<pre><code>(function(){

    /**
     * Decimal adjustment of a number.
     *
     * @param   {String}    type    The type of adjustment.
     * @param   {Number}    value   The number.
     * @param   {Integer}   exp     The exponent (the 10 logarithm of the adjustment base).
     * @returns {Number}            The adjusted value.
     */
    function decimalAdjust(type, value, exp) {
        // If the exp is undefined or zero...
        if (typeof exp === 'undefined' || +exp === 0) {
            return Math[type](value);
        }
        value = +value;
        exp = +exp;
        // If the value is not a number or the exp is not an integer...
        if (isNaN(value) || !(typeof exp === 'number' &amp;&amp; exp % 1 === 0)) {
            return NaN;
        }
        // Shift
        value = value.toString().split('e');
        value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
        // Shift back
        value = value.toString().split('e');
        return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
    }

    // Decimal round
    if (!Math.round10) {
        Math.round10 = function(value, exp) {
            return decimalAdjust('round', value, exp);
        };
    }
    // Decimal floor
    if (!Math.floor10) {
        Math.floor10 = function(value, exp) {
            return decimalAdjust('floor', value, exp);
        };
    }
    // Decimal ceil
    if (!Math.ceil10) {
        Math.ceil10 = function(value, exp) {
            return decimalAdjust('ceil', value, exp);
        };
    }
})();
</code></pre>

<p>Examples:</p>

<pre><code>// Round
Math.round10(55.55, -1); // 55.6
Math.round10(55.549, -1); // 55.5
Math.round10(55, 1); // 60
Math.round10(54.9, 1); // 50
Math.round10(-55.55, -1); // -55.5
Math.round10(-55.551, -1); // -55.6
Math.round10(-55, 1); // -50
Math.round10(-55.1, 1); // -60
Math.round10(1.005, -2); // 1.01 -- compare this with Math.round(1.005*100)/100 above
// Floor
Math.floor10(55.59, -1); // 55.5
Math.floor10(59, 1); // 50
Math.floor10(-55.51, -1); // -55.6
Math.floor10(-51, 1); // -60
// Ceil
Math.ceil10(55.51, -1); // 55.6
Math.ceil10(51, 1); // 60
Math.ceil10(-55.59, -1); // -55.5
Math.ceil10(-59, 1); // -50
</code></pre>
"
"26213408","1","<p>I just wanted to share my approach, based on previously mentioned answers:</p>

<p>Let's create a function that rounds any given numeric value to a given amount of decimal places:</p>

<pre><code>function roundWDecimals(n, decimals) {
    if (!isNaN(parseFloat(n)) &amp;&amp; isFinite(n)) {
        if (typeof(decimals) == typeof(undefined)) {
            decimals = 0;
        }
        var decimalPower = Math.pow(10, decimals);
        return Math.round(parseFloat(n) * decimalPower) / decimalPower;
    }
    return NaN;
}
</code></pre>

<p>And introduce a new ""round"" method for numbers prototype:</p>

<pre><code>Object.defineProperty(Number.prototype, 'round', {
    enumerable: false,
    value: function(decimals) {
        return roundWDecimals(this, decimals);
    }
});
</code></pre>

<p>And you can test it:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function roundWDecimals(n, decimals) {
    if (!isNaN(parseFloat(n)) &amp;&amp; isFinite(n)) {
        if (typeof(decimals) == typeof(undefined)) {
            decimals = 0;
        }
        var decimalPower = Math.pow(10, decimals);
        return Math.round(parseFloat(n) * decimalPower) / decimalPower;
    }
    return NaN;
}
Object.defineProperty(Number.prototype, 'round', {
    enumerable: false,
    value: function(decimals) {
        return roundWDecimals(this, decimals);
    }
});

var roundables = [
    {num: 10, decimals: 2},
    {num: 1.7777777, decimals: 2},
    {num: 9.1, decimals: 2},
    {num: 55.55, decimals: 1},
    {num: 55.549, decimals: 1},
    {num: 55, decimals: 0},
    {num: 54.9, decimals: 0},
    {num: -55.55, decimals: 1},
    {num: -55.551, decimals: 1},
    {num: -55, decimals: 0},
    {num: 1.005, decimals: 2},
    {num: 1.005, decimals: 2},
    {num: 19.8000000007, decimals: 2},
  ],
  table = '&lt;table border=""1""&gt;&lt;tr&gt;&lt;th&gt;Num&lt;/th&gt;&lt;th&gt;Decimals&lt;/th&gt;&lt;th&gt;Result&lt;/th&gt;&lt;/tr&gt;';
$.each(roundables, function() {
  table +=
    '&lt;tr&gt;'+
      '&lt;td&gt;'+this.num+'&lt;/td&gt;'+
      '&lt;td&gt;'+this.decimals+'&lt;/td&gt;'+
      '&lt;td&gt;'+this.num.round(this.decimals)+'&lt;/td&gt;'+
    '&lt;/tr&gt;'
  ;
});
table += '&lt;/table&gt;';
$('.results').append(table);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div class=""results""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
"
"26255127","36","<p>Use this function <code>Number(x).toFixed(2);</code></p>
"
"26463364","34","<p>Try this <strong>light weight</strong> solution:</p>

<pre><code>function round(x, digits){
  return parseFloat(x.toFixed(digits))
}

 round(1.222,  2) ;
 // 1.22
 round(1.222, 10) ;
 // 1.222
</code></pre>
"
"43795121","12","<p>Remove element at index i, without mutating the original array:</p>

<pre><code>/**
* removeElement
* @param {Array} array
* @param {Number} index
*/
function removeElement(array, index) {
   return Array.from(array).splice(index, 1);
}

// Another way is
function removeElement(array, index) {
   return array.slice(0).splice(index, 1);
}
</code></pre>
"
"43854346","13","<p><strong>2017-05-08</strong></p>

<p>Most of the given answers work for strict comparison, meaning that both objects reference the exact same object in memory (or are primitive types), but often you want to remove a non-primitive object from an array that has a certain value. For instance, if you make a call to a server and want to check a retrieved object against a local object.</p>

<pre><code>const a = {'field': 2} // Non-primitive object
const b = {'field': 2} // Non-primitive object with same value
const c = a            // Non-primitive object that reference the same object as ""a""

assert(a !== b) // Don't reference the same item, but have same value
assert(a === c) // Do reference the same item, and have same value (naturally)

//Note: there are many alternative implementations for valuesAreEqual
function valuesAreEqual (x, y) {
   return  JSON.stringify(x) === JSON.stringify(y)
}


//filter will delete false values
//Thus, we want to return ""false"" if the item
// we want to delete is equal to the item in the array
function removeFromArray(arr, toDelete){
    return arr.filter(target =&gt; {return !valuesAreEqual(toDelete, target)})
}

const exampleArray = [a, b, b, c, a, {'field': 2}, {'field': 90}];
const resultArray = removeFromArray(exampleArray, a);

//resultArray = [{'field':90}]
</code></pre>

<p>There are alternative/faster implementations for valuesAreEqual, but this does the job. You can also use a custom comparator if you have a specific field to check (for example, some retrieved UUID vs a local UUID).</p>

<p>Also note that this is a functional operation, meaning that it does not mutate the original array.</p>
"
"43888738","47","<p><strong>OK,</strong> for example you have the array below:</p>

<pre><code>var num = [1, 2, 3, 4, 5];
</code></pre>

<p>And we want to delete number 4. You can simply use the below code:</p>

<pre><code>num.splice(num.indexOf(4), 1); // num will be [1, 2, 3, 5];
</code></pre>

<p>If you are reusing this function, you write a reusable function which will be attached to the <em>native</em> array function like below:</p>

<pre><code>Array.prototype.remove = Array.prototype.remove || function(x) {
  const i = this.indexOf(x);
  if(i===-1)
      return;
  this.splice(i, 1); // num.remove(5) === [1, 2, 3];
}
</code></pre>

<p>But how about if you have the below array instead with a few [5]s in the array?</p>

<pre><code>var num = [5, 6, 5, 4, 5, 1, 5];
</code></pre>

<p>We need a loop to check them all, but an easier and more efficient way is using built-in JavaScript functions, so we write a function which use a filter like below instead:</p>

<pre><code>const _removeValue = (arr, x) =&gt; arr.filter(n =&gt; n!==x);
//_removeValue([1, 2, 3, 4, 5, 5, 6, 5], 5) // Return [1, 2, 3, 4, 6]
</code></pre>

<p>Also there are third-party libraries which do help you to do this, like Lodash or Underscore. For more information, look at lodash _.pull, _.pullAt or _.without.</p>
"
"43928167","18","<p><strong>Remove by Index</strong></p>

<p>A function that returns a copy of array without the element at index:</p>

<pre><code>/**
* removeByIndex
* @param {Array} array
* @param {Number} index
*/
function removeByIndex(array, index){
      return array.filter(function(elem, _index){
          return index != _index;
    });
}
l = [1,3,4,5,6,7];
console.log(removeByIndex(l, 1));

$&gt; [ 1, 4, 5, 6, 7 ]
</code></pre>

<p><strong>Remove by Value</strong></p>

<p>Function that return a copy of array without the Value.</p>

<pre><code>/**
* removeByValue
* @param {Array} array
* @param {Number} value
*/
function removeByValue(array, value){
      return array.filter(function(elem, _index){
          return value != elem;
    });
}
l = [1,3,4,5,6,7];
console.log(removeByValue(l, 5));

$&gt; [ 1, 3, 4, 6, 7]
</code></pre>
"
"29102452","4","<p>You could also override the Math.round function to do the rounding correct and add a parameter for decimals and use it like: Math.round(Number, Decimals). Keep in mind that this overrides the built in component Math.round and giving it another property then it original is.</p>

<pre><code>var round = Math.round;
Math.round = function (value, decimals) {
  decimals = decimals || 0;
  return Number(round(value + 'e' + decimals) + 'e-' + decimals);
}
</code></pre>

<p>Then you can simply use it like this:</p>

<pre><code>Math.round(1.005, 2);
</code></pre>

<p><a href=""https://jsfiddle.net/k5tpq3pd/3/"" rel=""nofollow"">https://jsfiddle.net/k5tpq3pd/3/</a></p>
"
"29924251","4","<p><strong>Here is the shortest and complete answer:</strong></p>

<pre><code>function round(num, decimals) {
        var n = Math.pow(10, decimals);
        return Math.round( (n * num).toFixed(decimals) )  / n;
};
</code></pre>

<p><strong>This also takes care of the example case 1.005 which will return 1.01.</strong></p>
"
"44391621","43","<p>Using <code>RegExp</code> in <strong>JavaScript</strong> could do the job for you, just simply do something like below code, don't forget the <code>/g</code> after which standout for <strong>global</strong>:</p>

<pre><code>var str =""Test abc test test abc test test test abc test test abc"";
str = str.replace(/abc/g, '');
</code></pre>

<p>If you think of reuse, create a function to do that for you, but it's not recommended as it's only one line function, but again if you heavily use this, you can write something like this:</p>

<pre><code>String.prototype.replaceAll = String.prototype.replaceAll || function(string, replaced) {
  return this.replace(new RegExp(string, 'g'), replaced);
};
</code></pre>

<p>and simply use it in your code over and over like below:</p>

<pre><code>var str =""Test abc test test abc test test test abc test test abc"";
str = str.replaceAll('abc', '');
</code></pre>

<p>But as I mention earlier, it won't make a huge difference in terms of lines to be written or performance, only caching the function may effect some faster performance on long strings and also a good practice of DRY code if you want to reuse.</p>
"
"30253724","17","<pre><code>var roundUpto = function(number, upto){
    return Number(number.toFixed(upto));
}
roundUpto(0.1464676, 2);
</code></pre>

<p><code>toFixed(2)</code> here 2 is number of digits upto which we want to round this num.</p>
"
"45113099","2","<p>There are already a lot of answers, but because no one has done it with a one liner yet, I figured I'd show my method. It takes advantage of the fact that the string.split() function will remove all of the specified characters when creating an array. Here is an example: </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var ary = [1,2,3,4,1234,10,4,5,7,3];
out = ary.join(""-"").split(""-4-"").join(""-"").split(""-"");
console.log(out);</code></pre>
</div>
</div>
</p>

<p>In this example, all of the 4's are being removed from the array ary. However, it is important to note that any array containing the character ""-"" will cause issues with this example. In short, it will cause the join(""-"") function to piece your string together improperly. In such a situation, all of the the ""-"" strings in the above snipet can be replaced with any string that will not be used in the original array. Here is another example: </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var ary = [1,2,3,4,'-',1234,10,'-',4,5,7,3];
out = ary.join(""!@#"").split(""!@#4!@#"").join(""!@#"").split(""!@#"");
console.log(out);</code></pre>
</div>
</div>
</p>
"
"45218814","18","<p>In a modern language with the check if script has already been loaded, it would be:</p>
<pre><code>function loadJs( url ){
  return new Promise(( resolve, reject ) =&gt; {
    if (document.querySelector( `head &gt; script[ src = &quot;${url}&quot; ]`) !== null ){
        console.warn( `script already loaded: ${url}` );
        resolve();
    }
    const script = document.createElement( &quot;script&quot; );
    script.src = url;
    script.onload = resolve;
    script.onerror = function( reason ){
        // This can be useful for your error-handling code
        reason.message = `error trying to load script ${url}`;
        reject( reason );
    };
    document.head.appendChild( script );
  });
}
</code></pre>
<p>Usage (async/await):</p>
<pre><code>try { await loadJs(&quot;https://.../script.js&quot;); }
catch(error) { console.log(error); }
</code></pre>
<p>or</p>
<pre><code>await loadJs( &quot;https://.../script.js&quot; ).catch( err =&gt; {} );
</code></pre>
<p>Usage (Promise):</p>
<pre><code>loadJs( &quot;https://.../script.js&quot; ).then( res =&gt; {} ).catch( err =&gt; {} );
</code></pre>
"
"45405497","11","<p>I post my code that removes an array element in place, and reduce the array length as well.</p>

<pre><code>function removeElement(idx, arr) {
    // Check the index value
    if (idx &lt; 0 || idx &gt;= arr.length) {
        return;
    }
    // Shift the elements
    for (var i = idx; i &gt; 0; --i) {
        arr[i] = arr[i - 1];
    }
    // Remove the first element in array
    arr.shift();
}
</code></pre>
"
"18173778","135","<h1>for (const s of myStringArray) {</h1>
<p>(Directly answering your question: now you can!)</p>
<p>Most other answers are right, but they do not mention (as of this writing) that <em><strong>ECMAScript <strike> 6 </strike> 2015</strong></em> is bringing a new mechanism for doing iteration, the <strong><code>for..of</code></strong> loop.</p>
<p>This new syntax is the most elegant way to iterate an array in JavaScript (as long you don't need the iteration index).</p>
<p>It currently works with Firefox 13+, Chrome 37+ and it does not natively work with other browsers (see browser compatibility below). Luckily we have JavaScript compilers (such as <a href=""https://babeljs.io/"" rel=""noreferrer"">Babel</a>) that allow us to use next-generation features today.</p>
<p>It also works on Node.js (I tested it on version 0.12.0).</p>
<p><strong>Iterating an array</strong></p>
<pre><code>// You could also use &quot;let&quot; or &quot;const&quot; instead of &quot;var&quot; for block scope.
for (var letter of [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]) {
   console.log(letter);
}
</code></pre>
<p><strong>Iterating an array of objects</strong></p>
<pre><code>const band = [
  {firstName : 'John', lastName: 'Lennon'},
  {firstName : 'Paul', lastName: 'McCartney'}
];

for(const member of band){
  console.log(member.firstName + ' ' + member.lastName);
}
</code></pre>
<p><strong>Iterating a generator:</strong></p>
<p><em>(example extracted from <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"" rel=""noreferrer"">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of</a>)</em></p>
<pre><code>function* fibonacci() { // A generator function
  let [prev, curr] = [1, 1];
  while (true) {
    [prev, curr] = [curr, prev + curr];
    yield curr;
  }
}

for (const n of fibonacci()) {
  console.log(n);
  // Truncate the sequence at 1000
  if (n &gt;= 1000) {
    break;
  }
}
</code></pre>
<hr />
<p><em>Compatibility table:</em>
<a href=""http://kangax.github.io/es5-compat-table/es6/"" rel=""noreferrer"">http://kangax.github.io/es5-compat-table/es6/#For..of loops</a></p>
<p><em>Specification:</em> <a href=""http://wiki.ecmascript.org/doku.php?id=harmony:iterators"" rel=""noreferrer"">http://wiki.ecmascript.org/doku.php?id=harmony:iterators</a></p>
<h1>}</h1>
"
"18266967","26","<p>Here is the code and demo for how to check multiple check boxes...</p>

<p><strong><a href=""http://jsfiddle.net/tamilmani/z8TTt/"">http://jsfiddle.net/tamilmani/z8TTt/</a></strong></p>

<pre><code>$(""#check"").on(""click"", function () {

    var chk = document.getElementById('check').checked;
    var arr = document.getElementsByTagName(""input"");

    if (chk) {
        for (var i in arr) {
            if (arr[i].name == 'check') arr[i].checked = true;
        }
    } else {
        for (var i in arr) {
            if (arr[i].name == 'check') arr[i].checked = false;
        }
    }
});
</code></pre>
"
"35715420","31","<p>There are a couple of ways to do that. For people like me, the Lodash's variant</p>

<pre><code>function round(number, precision) {
    var pair = (number + 'e').split('e')
    var value = Math.round(pair[0] + 'e' + (+pair[1] + precision))
    pair = (value + 'e').split('e')
    return +(pair[0] + 'e' + (+pair[1] - precision))
}
</code></pre>

<p><strong>Usage:</strong></p>

<pre><code>round(0.015, 2) // 0.02
round(1.005, 2) // 1.01
</code></pre>



<p>If your project uses jQuery or lodash, you can also find proper <code>round</code> method in the libraries.</p>

<h2>Update 1</h2>

<p>I removed the variant <code>n.toFixed(2)</code>, because it is not correct. Thank you @avalanche1</p>
"
"36670493","4","<p>To round at decimal positions <code>pos</code> (including no decimals) do <code>Math.round(num * Math.pow(10,pos)) / Math.pow(10,pos)</code></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var console = {
 log: function(s) {
  document.getElementById(""console"").innerHTML += s + ""&lt;br/&gt;""
 }
}
var roundDecimals=function(num,pos) {
 return (Math.round(num * Math.pow(10,pos)) / Math.pow(10,pos) );
}
//https://en.wikipedia.org/wiki/Pi
var pi=3.14159265358979323846264338327950288419716939937510;
for(var i=2;i&lt;15;i++) console.log(""pi=""+roundDecimals(pi,i));
for(var i=15;i&gt;=0;--i) console.log(""pi=""+roundDecimals(pi,i));</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""console"" /&gt;</code></pre>
</div>
</div>
</p>
"
"36714349","-1","<p>Please use the below function if you don't want to round off.</p>

<pre><code>function ConvertToDecimal(num) {
  num = num.toString(); // If it's not already a String
  num = num.slice(0, (num.indexOf(""."")) + 3); // With 3 exposing the hundredths place    
alert('M : ' + Number(num)); // If you need it back as a Number     
}
</code></pre>
"
"34093201","28","<p>In JavaScript and jQuery we use this following code to redirect the page:</p>

<pre><code>window.location.href=""http://google.com"";
window.location.replace(""page1.html"");
</code></pre>

<p>But you can make a function in jQuery to redirect the page:</p>

<pre><code>jQuery.fn.redirect=function(url)
{
    window.location.href=url;
}
</code></pre>

<p>And call this function:</p>

<pre><code>jQuery(window).redirect(""http://stackoverflow.com/"")
</code></pre>
"
"18779757","-6","<p>For overall:</p>

<pre><code>$(""#checkAll"").click(function(){
    $("".somecheckBoxes"").prop('checked',$(this).prop('checked')?true:false);
});
</code></pre>
"
"38676273","94","<p>This question is complicated.</p>

<p>Suppose we have a function, <code>roundTo2DP(num)</code>, that takes a float as an argument and returns a value rounded to 2 decimal places. What should each of these expressions evaluate to?</p>

<ul>
<li><code>roundTo2DP(0.014999999999999999)</code></li>
<li><code>roundTo2DP(0.0150000000000000001)</code></li>
<li><code>roundTo2DP(0.015)</code></li>
</ul>

<p>The 'obvious' answer is that the first example should round to 0.01 (because it's closer to 0.01 than to 0.02) while the other two should round to 0.02 (because 0.0150000000000000001 is closer to 0.02 than to 0.01, and because 0.015 is exactly halfway between them and there is a mathematical convention that such numbers get rounded up).</p>

<p>The catch, which you may have guessed, is that <code>roundTo2DP</code> <em>cannot possibly</em> be implemented to give those obvious answers, because all three numbers passed to it are <em>the same number</em>. IEEE 754 binary floating point numbers (the kind used by JavaScript) can't exactly represent most non-integer numbers, and so all three numeric literals above get rounded to a nearby valid floating point number. This number, as it happens, is <em>exactly</em></p>

<p>0.01499999999999999944488848768742172978818416595458984375</p>

<p>which is closer to 0.01 than to 0.02.</p>

<p>You can see that all three numbers are the same at your browser console, Node shell, or other JavaScript interpreter. Just compare them:</p>

<pre><code>> <b><i>0.014999999999999999 === 0.0150000000000000001</i></b>
true</code></pre>

<p>So when I write <code>m = 0.0150000000000000001</code>, the <em>exact value of <code>m</code></em> that I end up with is closer to <code>0.01</code> than it is to <code>0.02</code>. And yet, if I convert <code>m</code> to a String...</p>

<pre><code>> <b><i>var m = 0.0150000000000000001;</i></b>
> <b><i>console.log(String(m));</i></b>
0.015
> <b><i>var m = 0.014999999999999999;</i></b>
> <b><i>console.log(String(m));</i></b>
0.015</code></pre>

<p>... I get 0.015, which should round to 0.02, and which is noticeably <em>not</em> the 56-decimal-place number I earlier said that all of these numbers were exactly equal to. So what dark magic is this?</p>

<p>The answer can be found in the ECMAScript specification, in section <a href=""http://www.ecma-international.org/ecma-262/7.0/#sec-tostring-applied-to-the-number-type"" rel=""noreferrer""><em>7.1.12.1: ToString applied to the Number type</em></a>. Here the rules for converting some Number <em>m</em> to a String are laid down. The key part is point 5, in which an integer <em>s</em> is generated whose digits will be used in the String representation of <em>m</em>:</p>

<blockquote>
  <p>let <em>n</em>, <em>k</em>, and <em>s</em> be integers such that <em>k</em> ≥ 1, 10<sup><i>k</i>-1</sup> ≤ <em>s</em> &lt; 10<sup><i>k</i></sup>, the Number value for <em>s</em> × 10<sup><i>n</i>-<i>k</i></sup> is <em>m</em>, and <em>k</em> is as small as possible. Note that k is the number of digits in the decimal representation of <em>s</em>, that <em>s</em> is not divisible by 10, and that the least significant digit of <em>s</em> is not necessarily uniquely determined by these criteria.</p>
</blockquote>

<p>The key part here is the requirement that ""<em>k</em> is as small as possible"". What that requirement amounts to is a requirement that, given a Number <code>m</code>, the value of <code>String(m)</code> must have <em>the least possible number of digits</em> while still satisfying the requirement that <code>Number(String(m)) === m</code>. Since we already know that <code>0.015 === 0.0150000000000000001</code>, it's now clear why <code>String(0.0150000000000000001) === '0.015'</code> must be true.</p>

<p>Of course, none of this discussion has directly answered what <code>roundTo2DP(m)</code> <em>should</em> return. If <code>m</code>'s exact value is 0.01499999999999999944488848768742172978818416595458984375, but its String representation is '0.015', then what is the <em>correct</em> answer - mathematically, practically, philosophically, or whatever - when we round it to two decimal places?</p>

<p>There is no single correct answer to this. It depends upon your use case. You probably want to respect the String representation and round upwards when:</p>

<ul>
<li>The value being represented is inherently discrete, e.g. an amount of currency in a 3-decimal-place currency like dinars. In this case, the <em>true</em> value of a Number like 0.015 <em>is</em> 0.015, and the 0.0149999999... representation that it gets in binary floating point is a rounding error. (Of course, many will argue, reasonably, that you should use a decimal library for handling such values and never represent them as binary floating point Numbers in the first place.)</li>
<li>The value was typed by a user. In this case, again, the exact decimal number entered is more 'true' than the nearest binary floating point representation.</li>
</ul>

<p>On the other hand, you probably want to respect the binary floating point value and round downwards when your value is from an inherently continuous scale - for instance, if it's a reading from a sensor.</p>

<p>These two approaches require different code. To respect the String representation of the Number, we can (with quite a bit of reasonably subtle code) implement our own rounding that acts directly on the String representation, digit by digit, using the same algorithm you would've used in school when you were taught how to round numbers. Below is an example which respects the OP's requirement of representing the number to 2 decimal places ""only when necessary"" by stripping trailing zeroes after the decimal point; you may, of course, need to tweak it to your precise needs.</p>

<pre><code>/**
 * Converts num to a decimal string (if it isn't one already) and then rounds it
 * to at most dp decimal places.
 *
 * For explanation of why you'd want to perform rounding operations on a String
 * rather than a Number, see http://stackoverflow.com/a/38676273/1709587
 *
 * @param {(number|string)} num
 * @param {number} dp
 * @return {string}
 */
function roundStringNumberWithoutTrailingZeroes (num, dp) {
    if (arguments.length != 2) throw new Error(""2 arguments required"");

    num = String(num);
    if (num.indexOf('e+') != -1) {
        // Can't round numbers this large because their string representation
        // contains an exponent, like 9.99e+37
        throw new Error(""num too large"");
    }
    if (num.indexOf('.') == -1) {
        // Nothing to do
        return num;
    }

    var parts = num.split('.'),
        beforePoint = parts[0],
        afterPoint = parts[1],
        shouldRoundUp = afterPoint[dp] &gt;= 5,
        finalNumber;

    afterPoint = afterPoint.slice(0, dp);
    if (!shouldRoundUp) {
        finalNumber = beforePoint + '.' + afterPoint;
    } else if (/^9+$/.test(afterPoint)) {
        // If we need to round up a number like 1.9999, increment the integer
        // before the decimal point and discard the fractional part.
        finalNumber = Number(beforePoint)+1;
    } else {
        // Starting from the last digit, increment digits until we find one
        // that is not 9, then stop
        var i = dp-1;
        while (true) {
            if (afterPoint[i] == '9') {
                afterPoint = afterPoint.substr(0, i) +
                             '0' +
                             afterPoint.substr(i+1);
                i--;
            } else {
                afterPoint = afterPoint.substr(0, i) +
                             (Number(afterPoint[i]) + 1) +
                             afterPoint.substr(i+1);
                break;
            }
        }

        finalNumber = beforePoint + '.' + afterPoint;
    }

    // Remove trailing zeroes from fractional part before returning
    return finalNumber.replace(/0+$/, '')
}
</code></pre>

<p>Example usage:</p>

<pre><code>> <b><i>roundStringNumberWithoutTrailingZeroes(1.6, 2)</i></b>
'1.6'
> <b><i>roundStringNumberWithoutTrailingZeroes(10000, 2)</i></b>
'10000'
> <b><i>roundStringNumberWithoutTrailingZeroes(0.015, 2)</i></b>
'0.02'
> <b><i>roundStringNumberWithoutTrailingZeroes('0.015000', 2)</i></b>
'0.02'
> <b><i>roundStringNumberWithoutTrailingZeroes(1, 1)</i></b>
'1'
> <b><i>roundStringNumberWithoutTrailingZeroes('0.015', 2)</i></b>
'0.02'
> <b><i>roundStringNumberWithoutTrailingZeroes(0.01499999999999999944488848768742172978818416595458984375, 2)</i></b>
'0.02'
> <b><i>roundStringNumberWithoutTrailingZeroes('0.01499999999999999944488848768742172978818416595458984375', 2)</i></b>
'0.01'</code></pre>

<p>The function above is <em>probably</em> what you want to use to avoid users ever witnessing numbers that they have entered being rounded wrongly.</p>

<p>(As an alternative, you could also try the <a href=""https://github.com/jhohlfeld/round10"" rel=""noreferrer"">round10</a> library which provides a similarly-behaving function with a wildly different implementation.)</p>

<p>But what if you have the second kind of Number - a value taken from a continuous scale, where there's no reason to think that approximate decimal representations with fewer decimal places are more <em>accurate</em> than those with more? In that case, we <em>don't</em> want to respect the String representation, because that representation (as explained in the spec) is already sort-of-rounded; we don't want to make the mistake of saying ""0.014999999...375 rounds up to 0.015, which rounds up to 0.02, so 0.014999999...375 rounds up to 0.02"".</p>

<p>Here we can simply use the built-in <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed"" rel=""noreferrer""><code>toFixed</code></a> method. Note that by calling <code>Number()</code> on the String returned by <code>toFixed</code>, we get a Number whose String representation has no trailing zeroes (thanks to the way JavaScript computes the String representation of a Number, discussed earlier in this answer).</p>

<pre><code>/**
 * Takes a float and rounds it to at most dp decimal places. For example
 *
 *     roundFloatNumberWithoutTrailingZeroes(1.2345, 3)
 *
 * returns 1.234
 *
 * Note that since this treats the value passed to it as a floating point
 * number, it will have counterintuitive results in some cases. For instance,
 * 
 *     roundFloatNumberWithoutTrailingZeroes(0.015, 2)
 *
 * gives 0.01 where 0.02 might be expected. For an explanation of why, see
 * http://stackoverflow.com/a/38676273/1709587. You may want to consider using the
 * roundStringNumberWithoutTrailingZeroes function there instead.
 *
 * @param {number} num
 * @param {number} dp
 * @return {number}
 */
function roundFloatNumberWithoutTrailingZeroes (num, dp) {
    var numToFixedDp = Number(num).toFixed(dp);
    return Number(numToFixedDp);
}
</code></pre>
"
"45722887","5","<p>In my apps, I use a custom function that is the most powerful for this purpose, and even wrapping the <code>split/join</code> solution in the simpler case, it is a little bit faster in <code>Chrome 60</code>and <code>Firefox 54</code>  (<a href=""http://jsben.ch/kdv27"" rel=""nofollow noreferrer""><code>JSBEN.CH</code></a>) than other solutions. My computer runs <code>Windows 7 64 bits</code>.</p>

<p>The advantage is that this custom function can handle many substitutions at the same time using strings or characters, which can be a shortcut for some applications.</p>

<p>Like a <code>split/join</code> above solution, the solution below has no problem with escape characters, differently than regular expression approach.</p>

<pre><code>  function replaceAll(s,find,repl,caseOff,byChar){
  if (arguments.length&lt;2)  return false; 
  var destDel = ! repl;       // if destDel delete all keys from target
  var isString = !! byChar;   // if byChar, replace set of characters 
  if (typeof find !==typeof repl &amp;&amp; ! destDel)  return false; 
  if (isString  &amp;&amp;  (typeof find!==""string""))   return false; 

  if (! isString &amp;&amp;  (typeof find===""string""))  {
    return s.split(find).join(destDel?"""":repl);
  }

  if ((! isString)  &amp;&amp;  ( ! Array.isArray(find) ||
          ( ! Array.isArray(repl) &amp;&amp; ! destDel)   ))  return false;

     // if destOne replace all strings/characters by just one element
  var destOne = destDel ? false : (repl.length===1);   

     // Generally source and destination should have the same size
  if (! destOne &amp;&amp; ! destDel &amp;&amp; find.length!==repl.length)  return false    

  var prox,sUp,findUp,i,done;   
  if (caseOff)  {    // case insensitive    
       // Working with uppercase keys and target 
    sUp = s.toUpperCase();   
    if (isString)
       findUp = find.toUpperCase()   
    else
       findUp = find.map(function(el){  return el.toUpperCase();});    

  } else  {         // case sensitive
     sUp = s;
     findUp =find.slice();  // clone array/string
  }  

  done = new Array(find.length);  // size: number of keys
  done.fill(null);              

  var pos = 0;       // initial position in target s
  var r = """";   // initial result
  var aux, winner;
  while (pos &lt; s.length)  {       // Scanning the target
     prox  = Number.MAX_SAFE_INTEGER;
     winner = -1;  // no winner at start
     for (i=0;i&lt;findUp.length;i++)   // find next occurence for each string
       if (done[i]!==-1) {    // key still alive
             // Never search for the word/char or is over?
         if (done[i]===null || done[i]&lt;pos)  { 
           aux = sUp.indexOf(findUp[i],pos);
           done[i]=aux;  // Save the next occurrence
         } else
           aux = done[i]   // restore the position of last search
         if (aux&lt;prox &amp;&amp; aux!==-1) {   // if next occurrence is minimum
           winner = i;     // save it  
           prox = aux;
         }  
       }  // not done

      if (winner===-1) {   // No matches forward
         r += s.slice(pos);   
         break;
      } // no winner

      // found the character or string key in the target

      i = winner;  // restore the winner
      r += s.slice(pos,prox);   // update piece before the match

            // Append the replacement in target 
      if (! destDel) r += repl[ destOne?0:i ];  
      pos = prox + ( isString?1:findUp[i].length );       // go after match

  }  // loop
  return r;  // return the resulting string
}
</code></pre>

<p>The documentation is below</p>

<blockquote>
<pre><code>           replaceAll    
 Syntax    
 ======     
      replaceAll(s,find,[ repl ,caseOff, byChar)     

 Parameters    
 ==========    

   ""s"" is a string target of replacement.    
   ""find"" can be a string or array of strings.     
   ""repl"" should be the same type than ""find"" or empty     

  if ""find"" is a string, it is a simple replacement for      
    all ""find"" occurrences in ""s"" by string ""repl""    

  if ""find"" is an array, it will replaced each string in ""find""    
    that occurs in ""s"" for corresponding string in ""repl"" array.
  The replace specs are independent: A replacement part cannot    
    be replaced again. 


  if ""repl"" is empty all ""find"" occurrences in ""s"" will be deleted.   
  if ""repl"" has only one character or element,    
      all occurrences in ""s"" will be replaced for that one.   

  ""caseOff"" is true if replacement is case insensitive     
       (default is FALSE)

  ""byChar"" is true when replacement is based on set of characters.    
  Default is false   

  if ""byChar"", it will be replaced in ""s"" all characters in ""find""   
  set of characters for corresponding character in  ""repl""
  set of characters   

 Return   
 ======   
  the function returns the new string after the replacement.  
</code></pre>
</blockquote>

<p>To be fair, I ran the <a href=""http://jsben.ch/kdv27"" rel=""nofollow noreferrer"">benchmark</a> with no parameter test. </p>

<p>Here is my test set, using <code>Node.js</code></p>

<pre><code>function l() { return console.log.apply(null, arguments); }

var k=0;
l(++k,replaceAll(""banana is a ripe fruit harvested near the river"",
      [""ri"",""nea""],[""do"",""fa""]));  //1
l(++k,replaceAll(""banana is a ripe fruit harvested near the river"",
      [""ri"",""nea""],[""do""]));  //2
l(++k,replaceAll(""banana is a ripe fruit harvested near the river"",
      [""ri"",""nea""]));  //3
l(++k,replaceAll(""banana is a ripe fruit harvested near the river"",
     ""aeiou"","""","""",true));  //4
l(++k,replaceAll(""banana is a ripe fruit harvested near the river"",
      ""aeiou"",""a"","""",true));  //5
l(++k,replaceAll(""banana is a ripe fruit harvested near the river"",
      ""aeiou"",""uoiea"","""",true));  //6
l(++k,replaceAll(""banana is a ripe fruit harvested near the river"",
      ""aeiou"",""uoi"","""",true));  //7
l(++k,replaceAll(""banana is a ripe fruit harvested near the river"",
      [""ri"",""nea""],[""do"",""fa"",""leg""]));  //8
l(++k,replaceAll(""BANANA IS A RIPE FRUIT HARVESTED NEAR THE RIVER"",
      [""ri"",""nea""],[""do"",""fa""]));  //9
l(++k,replaceAll(""BANANA IS A RIPE FRUIT HARVESTED NEAR THE RIVER"",
      [""ri"",""nea""],[""do"",""fa""],true)); //10
return;
</code></pre>

<p>And the results:</p>

<blockquote>
  <p>1 'banana is a dope fruit harvested far the dover'<br>
  2 'banana is a dope fruit harvested dor the dover'<br>
  3 'banana is a pe fruit harvested r the ver'<br>
  4 'bnn s  rp frt hrvstd nr th rvr'<br>
  5 'banana as a rapa fraat harvastad naar tha ravar'<br>
  6 'bununu is u ripo frait hurvostod nour tho rivor'<br>
  7 false<br>
  8 false<br>
  9 'BANANA IS A RIPE FRUIT HARVESTED NEAR THE RIVER'<br>
  10 'BANANA IS A doPE FRUIT HARVESTED faR THE doVER'      </p>
</blockquote>
"
"40800717","12","<p>This is the simplest, more elegant solution (and I am the best of the world;):</p>

<pre><code>function roundToX(num, X) {    
    return +(Math.round(num + ""e+""+X)  + ""e-""+X);
}
//roundToX(66.66666666,2) =&gt; 66.67
//roundToX(10,2) =&gt; 10
//roundToX(10.904,2) =&gt; 10.9
</code></pre>
"
"46280319","7","<p>For anyone looking to replicate a method that will return a new array that has duplicate numbers or strings removed, this has been put together from existing answers:</p>

<pre><code>function uniq(array) {
  var len = array.length;
  var dupFree = [];
  var tempObj = {};

  for (var i = 0; i &lt; len; i++) {
    tempObj[array[i]] = 0;
  }

  console.log(tempObj);

  for (var i in tempObj) {
    var element = i;
    if (i.match(/\d/)) {
      element = Number(i);
    }
    dupFree.push(element);
  }

  return dupFree;
}
</code></pre>
"
"34981197","1","<h2>The basics</h2>

<p>If you're happy with the format <code>Sun Jan 24 2016 21:23:07 GMT+0100 (CET)</code>, you could just use this code :</p>

<pre><code>var today = new Date();
</code></pre>

<h2>Date.prototype.toLocaleDateString()</h2>

<p>If you want to format your output, consider using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString"" rel=""nofollow""><strong><code>Date.prototype.toLocaleDateString()</code></strong></a> :</p>

<pre><code>var today = new Date().toLocaleDateString('de-DE', {     
    weekday: 'long', 
    year: 'numeric',
    month: 'long',
    day: 'numeric'
});
</code></pre>

<p>If you executed that code today (january 24ᵗʰ, 2016) on a modern browser, it would produce the string <code>Sonntag, 24. Januar 2016</code>. Older browsers may generate a different result, though, as eg. IE&lt;11 doesn't support locales or options arguments.</p>

<h2>Going custom</h2>

<p>If <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString"" rel=""nofollow""><strong><code>Date.prototype.toLocaleDateString()</code></strong></a> isn't flexible enough to fulfill whatever need you may have, you might want to consider creating a custom Date object that looks like this :</p>

<pre><code>var DateObject = (function() {
    var monthNames = [
      ""January"", ""February"", ""March"",
      ""April"", ""May"", ""June"", ""July"",
      ""August"", ""September"", ""October"",
      ""November"", ""December""
    ];
    var date = function(str) {
        this.set(str);
    };
    date.prototype = {
        set : function(str) {
            var dateDef = str ? new Date(str) : new Date();
            this.day = dateDef.getDate();
            this.dayPadded = (this.day &lt; 10) ? (""0"" + this.day) : """" + this.day;
            this.month = dateDef.getMonth() + 1;
            this.monthPadded = (this.month &lt; 10) ? (""0"" + this.month) : """" + this.month;
            this.monthName = monthNames[this.month - 1];
            this.year = dateDef.getFullYear();
        }
    };
    return date;
})();
</code></pre>

<p>If you included that code and executed <code>new DateObject()</code> today (january 24ᵗʰ, 2016), it would produce an object with the following properties :</p>

<pre><code>day: 24
dayPadded: ""24""
month: 1
monthPadded: ""01""
monthName: ""January""
year: 2016
</code></pre>
"
"19079935","73","<p>Use:</p>

<pre><code>&lt;input type=""checkbox"" id=""abc"" value=""UDB""&gt;UDB
&lt;input type=""checkbox"" id=""abc"" value=""Prasad""&gt;Prasad
</code></pre>



<pre><code>$('input#abc').click(function(){
  if($(this).is(':checked'))
  {
    var checkedOne=$(this).val()
    alert(checkedOne);

    // Do some other action
  }
})
</code></pre>

<p>This can help if you want that the required action has to be done only when you check the box not at the time you remove the check.</p>
"
"41716722","155","<p>You should use:</p>

<pre><code>Math.round( num * 100 + Number.EPSILON ) / 100
</code></pre>

<p>No one seems to be aware of <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON"" rel=""noreferrer""><code>Number.EPSILON</code></a>.</p>

<p>Also it's worth noting that this is not a <em>JavaScript weirdness</em> like some people stated.</p>

<p><strong>That is simply the way floating point numbers works in a computer.</strong> Like 99% of programming languages, JavaScript doesn't have <em>home made</em> floating point numbers; it relies on the CPU/FPU for that. A computer uses binary, and in binary, there isn't any numbers like <code>0.1</code>, but a mere binary approximation for that. Why? For the same reason than 1/3 cannot be written in decimal: its value is 0.33333333... with an infinity of threes.</p>

<p>Here come <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON"" rel=""noreferrer""><code>Number.EPSILON</code></a>. That number is the difference between 1 and the <em>next</em> number existing in the double precision floating point numbers. <strong>That's it: There is no number between <code>1</code> and 1 + <code>Number.EPSILON</code>.</strong></p>

<p><strong>EDIT:</strong></p>

<p>As asked in the comments, let's clarify one thing: adding <code>Number.EPSILON</code> is relevant only when the value to round is the result of an arithmetic operation, as it can swallow some floating point error delta.</p>

<p>It's not useful when the value comes from a direct source (e.g.: literal, user input or sensor).</p>

<p><strong>EDIT (2019):</strong></p>

<p>Like @maganap and some peoples have pointed out, it's best to add <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON"" rel=""noreferrer""><code>Number.EPSILON</code></a> before multiplying:</p>

<pre><code>Math.round( ( num + Number.EPSILON ) * 100 ) / 100
</code></pre>

<p><strong>EDIT (december 2019):</strong></p>

<p>Lately, I use a function similar to this one for comparing numbers epsilon-aware:</p>

<pre><code>const ESPILON_RATE = 1 + Number.EPSILON ;
const ESPILON_ZERO = Number.MIN_VALUE ;

function epsilonEquals( a , b ) {
  if ( Number.isNaN( a ) || Number.isNaN( b ) ) {
    return false ;
  }
  if ( a === 0 || b === 0 ) {
    return a &lt;= b + EPSILON_ZERO &amp;&amp; b &lt;= a + EPSILON_ZERO ;
  }
  return a &lt;= b * EPSILON_RATE &amp;&amp; b &lt;= a * EPSILON_RATE ;
}
</code></pre>

<p>My use-case is <a href=""https://www.npmjs.com/package/doormen"" rel=""noreferrer"">an assertion + data validation lib</a> I'm developing for many years.</p>

<p>In fact, in the code I'm using <code>ESPILON_RATE = 1 + 4 * Number.EPSILON</code> and <code>EPSILON_ZERO = 4 * Number.MIN_VALUE</code> (four times the epsilon), because I want an equality checker loose enough for cumulating floating point error.</p>

<p>So far, it looks perfect for me.
I hope it will help.</p>
"
"42119521","2","<p>Just for the record, the scaling method could theoretically return Infinity if the number and the digits you want to round to are big enough. In JavaScript that shouldn't be a problem since the maximum number is 1.7976931348623157e+308, but if you're working with really big numbers or a lot of decimal places you could try this function instead:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>Number.prototype.roundTo = function(digits)
{
    var str = this.toString();
    var split = this.toString().split('e');
    var scientific = split.length &gt; 1;
    var index;
    if (scientific)
    {
        str = split[0];
        var decimal = str.split('.');
        if (decimal.length &lt; 2)
            return this;
        index = decimal[0].length + 1 + digits;
    }
    else
        index = Math.floor(this).toString().length + 1 + digits;
    if (str.length &lt;= index)
        return this;
    var digit = str[index + 1];
    var num = Number.parseFloat(str.substring(0, index));
    if (digit &gt;= 5)
    {
        var extra = Math.pow(10, -digits);
        return this &lt; 0 ? num - extra : num + extra;
    }
    if (scientific)
        num += ""e"" + split[1];
    return num;
}</code></pre>
</div>
</div>
</p>
"
"19738311","31","<p>Probably the <code>for(i = 0; i &lt; array.length; i++)</code> loop is not the best choice. Why? If you have this:</p>

<pre><code>var array = new Array();
array[1] = ""Hello"";
array[7] = ""World"";
array[11] = ""!"";
</code></pre>

<p>The method will call from <code>array[0]</code> to <code>array[2]</code>. First, this will first reference variables you don't even have, second you would not have the variables in the array, and third this will make the code bolder. Look here, it's what I use:</p>

<pre><code>for(var i in array){
    var el = array[i];
    //If you want 'i' to be INT just put parseInt(i)
    //Do something with el
}
</code></pre>

<p>And if you want it to be a function, you can do this:</p>

<pre><code>function foreach(array, call){
    for(var i in array){
        call(array[i]);
    }
}
</code></pre>

<p>If you want to break, a little more logic:</p>

<pre><code>function foreach(array, call){
    for(var i in array){
        if(call(array[i]) == false){
            break;
        }
    }
}
</code></pre>

<p>Example:</p>

<pre><code>foreach(array, function(el){
    if(el != ""!""){
        console.log(el);
    } else {
        console.log(el+""!!"");
    }
});
</code></pre>

<p>It returns:</p>

<pre><code>//Hello
//World
//!!!
</code></pre>
"
"35770082","35","<h2>jQuery code to redirect a page or URL</h2>
<blockquote>
<p><strong>First Way</strong></p>
</blockquote>
<p>Here is the jQuery code for redirecting a page. Since, I have put this code on the $(document).ready() function, it will execute as soon as the page is loaded.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var url = ""http://stackoverflow.com"";
$(location).attr('href',url);</code></pre>
</div>
</div>
</p>
<p>You can even pass a URL directly to the <strong>attr()</strong> method, instead of using a variable.</p>
<blockquote>
<p><strong>Second Way</strong></p>
</blockquote>
<pre><code> window.location.href=&quot;http://stackoverflow.com&quot;;
</code></pre>
<p>You can also code like this (both are same internally):</p>
<pre><code>window.location=&quot;http://stackoverflow.com&quot;;
</code></pre>
<p>If you are curious about the difference between window.location and <code>window.location.href</code>, then you can see that the latter one is setting <code>href</code> property explicitly, while the former one does it implicitly. Since <code>window.location</code> returns an object, which by default sets its <code>.href</code> property.</p>
<blockquote>
<p><strong>Third Way</strong></p>
</blockquote>
<p>There is another way to redirect a page using JavaScript, the <code>replace()</code> method of <code>window.location</code> object. You can pass a new URL to the <code>replace()</code> method, and it will simulate an HTTP redirect. By the way, remember that <code>window.location.replace()</code> method doesn't put the originating page in the session history, which may affect behavior of the back button. Sometime, it's what you want, so use it carefully.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Doesn't put originating page in history
window.location.replace(""http://stackoverflow.com"");</code></pre>
</div>
</div>
</p>
<blockquote>
<p><strong>Fourth Way</strong></p>
</blockquote>
<p>like <strong>attr()</strong> method (after jQuery 1.6 introduce)</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var url = ""http://stackoverflow.com"";
$(location).prop('href', url);</code></pre>
</div>
</div>
</p>
"
"44289206","1","<p>A Generic Answer for all browsers and precisions:</p>

<pre><code>function round(num, places) {
      if(!places){
       return Math.round(num);
      }

      var val = Math.pow(10, places);
      return Math.round(num * val) / val;
}

round(num, 2);
</code></pre>
"
"20774655","31","<p>There are three implementations of <code>foreach</code> in <a href=""http://en.wikipedia.org/wiki/JQuery"">jQuery</a> as follows.</p>

<pre><code>var a = [3,2];

$(a).each(function(){console.log(this.valueOf())}); //Method 1
$.each(a, function(){console.log(this.valueOf())}); //Method 2
$.each($(a), function(){console.log(this.valueOf())}); //Method 3
</code></pre>
"
"35790273","8","<p>All way to make a redirect from the client side:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;JavaScript and jQuery example to redirect a page or URL &lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id=""redirect""&gt;
            &lt;h2&gt;Redirecting to another page&lt;/h2&gt;
        &lt;/div&gt;

        &lt;script src=""scripts/jquery-1.6.2.min.js""&gt;&lt;/script&gt;
        &lt;script&gt;
            // JavaScript code to redirect a URL
            window.location.replace(""http://stackoverflow.com"");
            // window.location.replace('http://code.shouttoday.com');

            // Another way to redirect page using JavaScript

            // window.location.assign('http://code.shouttoday.com');
            // window.location.href = 'http://code.shouttoday.com';
            // document.location.href = '/relativePath';

            //jQuery code to redirect a page or URL
            $(document).ready(function(){
                //var url = ""http://code.shouttoday.com"";
                //$(location).attr('href',url);
                // $(window).attr('location',url)
                //$(location).prop('href', url)
            });
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</p>
"
"44936961","78","<p>Another alternative is <a href=""https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm"" rel=""noreferrer"">KMP</a> (Knuth–Morris–Pratt).</p>

<p>The KMP algorithm searches for a length-<em>m</em> substring in a length-<em>n</em> string in worst-case O(<em>n</em>+<em>m</em>) time, compared to a worst-case of O(<em>n</em>⋅<em>m</em>) for the naive algorithm, so using KMP may be reasonable if you care about worst-case time complexity.</p>

<p>Here's a JavaScript implementation by Project Nayuki, taken from <a href=""https://www.nayuki.io/res/knuth-morris-pratt-string-matching/kmp-string-matcher.js"" rel=""noreferrer"">https://www.nayuki.io/res/knuth-morris-pratt-string-matching/kmp-string-matcher.js</a>:</p>

<pre><code>// Searches for the given pattern string in the given text string using the Knuth-Morris-Pratt string matching algorithm.
// If the pattern is found, this returns the index of the start of the earliest match in 'text'. Otherwise -1 is returned.
</code></pre>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function kmpSearch(pattern, text) {
  if (pattern.length == 0)
    return 0; // Immediate match

  // Compute longest suffix-prefix table
  var lsp = [0]; // Base case
  for (var i = 1; i &lt; pattern.length; i++) {
    var j = lsp[i - 1]; // Start by assuming we're extending the previous LSP
    while (j &gt; 0 &amp;&amp; pattern.charAt(i) != pattern.charAt(j))
      j = lsp[j - 1];
    if (pattern.charAt(i) == pattern.charAt(j))
      j++;
    lsp.push(j);
  }

  // Walk through text string
  var j = 0; // Number of chars matched in pattern
  for (var i = 0; i &lt; text.length; i++) {
    while (j &gt; 0 &amp;&amp; text.charAt(i) != pattern.charAt(j))
      j = lsp[j - 1]; // Fall back in the pattern
    if (text.charAt(i) == pattern.charAt(j)) {
      j++; // Next char matched, increment position
      if (j == pattern.length)
        return i - (j - 1);
    }
  }
  return -1; // Not found
}

console.log(kmpSearch('ays', 'haystack') != -1) // true
console.log(kmpSearch('asdf', 'haystack') != -1) // false</code></pre>
</div>
</div>
</p>
"
"47478967","12","<p>What a shame you have an array of integers, not an object where the keys are string equivalents of these integers.</p>

<p>I've looked through a lot of these answers and they all seem to use ""brute force"" as far as I can see. I haven't examined every single one, apologies if this is not so. For a smallish array this is fine, but what if you have 000s of integers in it?</p>

<p>Correct me if I'm wrong, but can't we assume that in a <code>key =&gt; value</code> map, of the kind which a JavaScript object is, that the key retrieval mechanism can be assumed to be highly engineered and optimised? (NB: if some super-expert tells me that this is not the case, I can suggest using ECMAScript&nbsp;6's <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"" rel=""noreferrer"">Map class</a> instead, which certainly will be).</p>

<p>I'm just suggesting that, in certain circumstances, the best solution might be to convert your array to an object... the problem being, of course, that you might have repeating integer values.  I suggest putting those in buckets as the ""value"" part of the <code>key =&gt; value</code> entries. (NB: if you are sure you don't have any repeating array elements this can be much simpler: values ""same as"" keys, and just go <code>Object.values(...)</code> to get back your modified array).</p>

<p>So you could do:</p>

<pre><code>const arr = [ 1, 2, 55, 3, 2, 4, 55 ];
const f =    function( acc, val, currIndex ){
    // We have not seen this value before: make a bucket... NB: although val's typeof is 'number',
    // there is seamless equivalence between the object key (always string)
    // and this variable val.
    ! ( val in acc ) ? acc[ val ] = []: 0;
    // Drop another array index in the bucket
    acc[ val ].push( currIndex );
    return acc;
}
const myIntsMapObj = arr.reduce( f, {});

console.log( myIntsMapObj );
</code></pre>

<p>Output:</p>

<blockquote>
  <p>Object [ &lt;1 empty slot>, Array<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"" rel=""noreferrer"">1</a>, Array[2], Array<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"" rel=""noreferrer"">1</a>, Array<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"" rel=""noreferrer"">1</a>, &lt;5
  empty slots>, 46 more… ]</p>
</blockquote>

<p>It is then easy to delete all the numbers 55.</p>

<pre><code>delete myIntsMapObj[ 55 ]; // Again, although keys are strings this works
</code></pre>

<p>You don't have to delete them all: index values are pushed into their buckets in order of appearance, so (for example):</p>

<pre><code>myIntsMapObj[ 55 ].shift(); // And
myIntsMapObj[ 55 ].pop();
</code></pre>

<p>will delete the first and last occurrence respectively.  You can count frequency of occurrence easily, replace all 55s with 3s by transferring the contents of one bucket to another, etc.</p>

<p>Retrieving a modified <code>int</code> array from your ""bucket object"" is slightly involved but not so much: each bucket contains the index (in the original array) of the value represented by the (<code>string</code>) key. Each of these bucket values is also unique (each is the unique <em>index value</em> in the original array): so you turn them into keys in a new object, with the (real) integer from the ""integer string key"" as value... then sort the keys and go <code>Object.values( ... )</code>.</p>

<p>This sounds very involved and time-consuming... but obviously everything depends on the circumstances and desired usage. My understanding is that all versions and contexts of JavaScript operate only in one thread, and the thread doesn't ""let go"", so there could be some horrible congestion with a ""brute force"" method: caused not so much by the <code>indexOf</code> ops, but multiple repeated <code>slice</code>/<code>splice</code> ops.</p>

<p><strong>Addendum</strong> 
If you're <strong>sure</strong> this is too much engineering for your use case surely the simplest ""brute force"" approach is</p>

<pre><code>const arr = [ 1, 2, 3, 66, 8, 2, 3, 2 ];
const newArray = arr.filter( number =&gt; number !== 3 );
console.log( newArray )
</code></pre>

<p>(Yes, other answers have spotted <code>Array.prototype.filter</code>...)</p>
"
"47982951","33","<p>You should never mutate your array. As this is against the functional programming pattern. You can create a new array without referencing the array you want to change data of using the ECMAScript&nbsp;6 method <code>filter</code>;</p>

<pre><code>var myArray = [1, 2, 3, 4, 5, 6];
</code></pre>

<p>Suppose you want to remove <code>5</code> from the array, you can simply do it like this:</p>

<pre><code>myArray = myArray.filter(value =&gt; value !== 5);
</code></pre>

<p>This will give you a new array without the value you wanted to remove. So the result will be:</p>

<pre><code> [1, 2, 3, 4, 6]; // 5 has been removed from this array
</code></pre>

<p>For further understanding you can read the MDN documentation on <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"" rel=""noreferrer"">Array.filter</a>.</p>
"
"36079433","5","<p>if you want to combine 2 arrays without the duplicate you may try the code below</p>

<pre><code>array_merge = function (arr1, arr2) {
  return arr1.concat(arr2.filter(function(item){
    return arr1.indexOf(item) &lt; 0;
  }))
}
</code></pre>

<p><strong>usage:</strong></p>

<pre><code>array1 = ['1', '2', '3']
array2 = ['2', '3', '4', '5']
combined_array = array_merge(array1, array2)
</code></pre>

<p><strong>Output:</strong>
[1,2,3,4,5]    </p>
"
"20901688","28","<p>This example is for button.</p>

<p>Try the following:</p>

<pre><code>&lt;input type=""button"" class=""check"" id=""checkall"" value=""Check All"" /&gt;  &amp;nbsp; &lt;input type=""button"" id=""remove"" value=""Delete"" /&gt; &lt;br/&gt;

&lt;input type=""checkbox"" class=""cb-element""  value=""1"" /&gt; Checkbox  1 &lt;br/&gt;
&lt;input type=""checkbox"" class=""cb-element""  value=""2"" /&gt; Checkbox  2 &lt;br/&gt;
&lt;input type=""checkbox"" class=""cb-element""  value=""3"" /&gt; Checkbox  3 &lt;br/&gt;


$('#remove').attr('disabled', 'disabled'); 

$(document).ready(function() {  

    $('.cb-element').click(function() {

        if($(this).prop('checked'))
        {
            $('#remove').attr('disabled', false);
        }
        else
        {
            $('#remove').attr('disabled', true);
        }
    });   

    $('.check:button').click(function()
{
    var checked = !$(this).data('checked');
    $('input:checkbox').prop('checked', checked);
    $(this).data('checked', checked);

    if(checked == true)
    {
        $(this).val('Uncheck All');
         $('#remove').attr('disabled', false);
    }

    else if(checked == false)
    {
        $(this).val('Check All');
        $('#remove').attr('disabled', true);
    }
});
});
</code></pre>
"
"46257984","-1","<p>I tried my very own code, try this</p>

<pre><code>function AmountDispalyFormat(value) {
    value = value.toFixed(3);
    var amount = value.toString().split('.');
    var result = 0;
    if (amount.length &gt; 1) {
        var secondValue = parseInt(amount[1].toString().slice(0, 2));
        if (amount[1].toString().length &gt; 2) {
            if (parseInt(amount[1].toString().slice(2, 3)) &gt; 4) {
                secondValue++;
                if (secondValue == 100) {
                    amount[0] = parseInt(amount[0]) + 1;
                    secondValue = 0;
                }
            }
        }

        if (secondValue.toString().length == 1) {
            secondValue = ""0"" + secondValue;
        }
        result = parseFloat(amount[0] + ""."" + secondValue);
    } else {
        result = parseFloat(amount);
    }
    return result;
}
</code></pre>
"
"48470814","2","<p>I just want to share my solution, based on some of the functional features of last versions of JavaScript:</p>

<pre><code>   var str = ""Test abc test test abc test test test abc test test abc"";

   var result = str.split(' ').reduce((a, b) =&gt; {
      return b == 'abc' ? a : a + ' ' + b;   })

  console.warn(result)
</code></pre>
"
"21460530","24","<p>This is an iterator for NON-sparse list where the index starts at 0, which is the typical scenario when dealing with document.getElementsByTagName or document.querySelectorAll)</p>

<pre><code>function each( fn, data ) {

    if(typeof fn == 'string')
        eval('fn = function(data, i){' + fn + '}');

    for(var i=0, L=this.length; i &lt; L; i++) 
        fn.call( this[i], data, i );   

    return this;
}

Array.prototype.each = each;  
</code></pre>

<p><strong>Examples of usage:</strong></p>

<p><strong>Example #1</strong></p>

<pre><code>var arr = [];
[1, 2, 3].each( function(a){ a.push( this * this}, arr);
arr = [1, 4, 9]
</code></pre>

<p><strong>Example #2</strong></p>

<pre><code>each.call(document.getElementsByTagName('p'), ""this.className = data;"",'blue');
</code></pre>

<p>Each p tag gets <code>class=""blue""</code></p>

<p><strong>Example #3</strong></p>

<pre><code>each.call(document.getElementsByTagName('p'), 
    ""if( i % 2 == 0) this.className = data;"",
    'red'
);
</code></pre>

<p>Every other p tag gets <code>class=""red""</code>></p>

<p><strong>Example #4</strong></p>

<pre><code>each.call(document.querySelectorAll('p.blue'), 
    function(newClass, i) {
        if( i &lt; 20 )
            this.className = newClass;
    }, 'green'
);
</code></pre>

<p>And finally the first 20 blue p tags are changed to green</p>

<p>Caution when using string as function: the function is created out-of-context and ought to be used only where you are certain of variable scoping.  Otherwise, better to pass functions where scoping is more intuitive.</p>
"
"36604292","46","<h1>ECMAScript 6 + jQuery, 85 bytes</h1>

<pre><code>$({jQueryCode:(url)=&gt;location.replace(url)}).attr(""jQueryCode"")(""http://example.com"")
</code></pre>

<p>Please don't kill me, this is a joke. It's a joke. <em>This is a joke.</em></p>

<p>This did ""provide an answer to the question"", in the sense that it asked for a solution ""using jQuery"" which in this case entails forcing it into the equation somehow.</p>

<p>Ferrybig apparently needs the joke explained (still joking, I'm sure there are limited options on the review form), so without further ado:</p>

<p>Other answers are using jQuery's <code>attr()</code> on the <code>location</code> or <code>window</code> objects unnecessarily.</p>

<p>This answer also abuses it, but in a more ridiculous way. Instead of using it to set the location, this uses <code>attr()</code> to retrieve a function that sets the location.</p>

<p>The function is named <code>jQueryCode</code> even though there's nothing jQuery about it, and calling a function <code>somethingCode</code> is just horrible, especially when the something is not even a language.</p>

<p>The ""85 bytes"" is a reference to Code Golf. Golfing is obviously not something you should do outside of code golf, and furthermore this answer is clearly not actually golfed.</p>

<p>Basically, cringe.</p>
"
"49180164","8","<p>I just created a polyfill on the <code>Array.prototype</code> via <code>Object.defineProperty</code> to remove a desired element in an array without leading to errors when iterating over it later via <code>for .. in ..</code></p>

<pre><code>if (!Array.prototype.remove) {
  // Object.definedProperty is used here to avoid problems when iterating with ""for .. in .."" in Arrays
  // https://stackoverflow.com/questions/948358/adding-custom-functions-into-array-prototype
  Object.defineProperty(Array.prototype, 'remove', {
    value: function () {
      if (this == null) {
        throw new TypeError('Array.prototype.remove called on null or undefined')
      }

      for (var i = 0; i &lt; arguments.length; i++) {
        if (typeof arguments[i] === 'object') {
          if (Object.keys(arguments[i]).length &gt; 1) {
            throw new Error('This method does not support more than one key:value pair per object on the arguments')
          }
          var keyToCompare = Object.keys(arguments[i])[0]

          for (var j = 0; j &lt; this.length; j++) {
            if (this[j][keyToCompare] === arguments[i][keyToCompare]) {
              this.splice(j, 1)
              break
            }
          }
        } else {
          var index = this.indexOf(arguments[i])
          if (index !== -1) {
            this.splice(index, 1)
          }
        }
      }
      return this
    }
  })
} else {
  var errorMessage = 'DANGER ALERT! Array.prototype.remove has already been defined on this browser. '
  errorMessage += 'This may lead to unwanted results when remove() is executed.'
  console.log(errorMessage)
}
</code></pre>

<p><strong>Removing an integer value</strong></p>

<pre><code>var a = [1, 2, 3]
a.remove(2)
a // Output =&gt; [1, 3]
</code></pre>

<p><strong>Removing a string value</strong></p>

<pre><code>var a = ['a', 'ab', 'abc']
a.remove('abc')
a // Output =&gt; ['a', 'ab']
</code></pre>

<p><strong>Removing a boolean value</strong></p>

<pre><code>var a = [true, false, true]
a.remove(false)
a // Output =&gt; [true, true]
</code></pre>

<p>It is also possible to remove an object inside the array via this <code>Array.prototype.remove</code> method. You just need to specify the <code>key =&gt; value</code> of the <code>Object</code> you want to remove.</p>

<p><strong>Removing an object value</strong></p>

<pre><code>var a = [{a: 1, b: 2}, {a: 2, b: 2}, {a: 3, b: 2}]
a.remove({a: 1})
a // Output =&gt; [{a: 2, b: 2}, {a: 3, b: 2}]
</code></pre>
"
"22264069","15","<h2>The most elegant and fast way</h2>
<pre><code>var arr = [1, 2, 3, 1023, 1024];
for (var value; value = arr.pop();) {
    value + 1
}
</code></pre>
<p><a href=""http://jsperf.com/native-loop-performance/8"" rel=""noreferrer"">http://jsperf.com/native-loop-performance/8</a></p>
<hr />
<h2>Edited (because I was wrong)</h2>
<hr />
<p>Comparing methods for looping through an array of 100000 items and do a minimal operation with the new value each time.</p>
<ul>
<li><a href=""http://jsben.ch/#/BQhED"" rel=""noreferrer"">http://jsben.ch/#/BQhED</a></li>
</ul>
<p><strong>Preparation:</strong></p>
<pre><code>&lt;script src=&quot;//code.jquery.com/jquery-2.1.0.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    Benchmark.prototype.setup = function() {
        // Fake function with minimal action on the value
        var tmp = 0;
        var process = function(value) {
            tmp = value; // Hold a reference to the variable (prevent engine optimisation?)
        };
        
        // Declare the test Array
        var arr = [];
        for (var i = 0; i &lt; 100000; i++)
            arr[i] = i;
    };
&lt;/script&gt;
</code></pre>
<p><strong>Tests:</strong></p>
<pre><code>&lt;a href=&quot;http://jsperf.com/native-loop-performance/16&quot; 
   title=&quot;http://jsperf.com/native-loop-performance/16&quot;
&gt;&lt;img src=&quot;http://i.imgur.com/YTrO68E.png&quot; title=&quot;Hosted by imgur.com&quot; /&gt;&lt;/a&gt;
</code></pre>
"
"49187285","6","<p>A very naive implementation would be as follows:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>Array.prototype.remove = function(data) {
    const dataIdx = this.indexOf(data)
    if(dataIdx &gt;= 0) {
        this.splice(dataIdx ,1);
    }
    return this.length;
}

let a = [1,2,3];
// This will change arr a to [1, 3]
a.remove(2);</code></pre>
</div>
</div>
</p>

<p>I return the length of the array from the function to comply with the other methods, like <code>Array.prototype.push()</code>.</p>
"
"22784194","12","<p>jQuery way using <code>$.map</code>:</p>

<pre><code>var data = [1, 2, 3, 4, 5, 6, 7];

var newData = $.map(data, function(element) {
    if (element % 2 == 0) {
        return element;
    }
});

// newData = [2, 4, 6];
</code></pre>
"
"37864649","10","<p>I already use the function redirect() of JavaScript. It's working.</p>

<pre><code>&lt;script type=""text/javascript""&gt;
    $(function () {
        //It's similar to HTTP redirect
        window.location.replace(""http://www.Technomark.in"");

        //It's similar to clicking on a link
        window.location.href = ""Http://www.Technomark.in"";
    })
&lt;/script&gt;
</code></pre>
"
"49774890","3","<p>For <strong>unique</strong> replaceable values</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>String.prototype.replaceAll = function(search_array, replacement_array) {
  //
  var target = this;
  //
  search_array.forEach(function(substr, index) {
    if (typeof replacement_array[index] != ""undefined"") {
      target = target.replace(new RegExp(substr, 'g'), replacement_array[index])
    }
  });
  //
  return target;
};

//  Use:
var replacedString = ""This topic commented on :year. Talking :question."".replaceAll([':year', ':question'], ['2018', 'How to replace all occurrences of a string in JavaScript']);
//
console.log(replacedString);</code></pre>
</div>
</div>
</p>
"
"49988691","1","<p>Please note that we usually use <strong>static scripts</strong>. So we want to be taken from the <strong>cache</strong> as much as possible.</p>
<p>This saves network traffic and speeds up landing.</p>
<p><em>Usage</em></p>
<pre><code>$.cachedScript( &quot;ajax/test.js&quot; ).done(function( script, textStatus ) {
  console.log( textStatus );
});
</code></pre>
<p>The <strong>cache: true</strong> option has been added to the Ajax method.</p>
"
"50167614","80","<p>Here are a few ways to <strong>remove an item from an array using JavaScript</strong>.</p>
<p>All the method described <strong>do not mutate the original array</strong>, and instead create a new one.</p>
<h2>If you know the index of an item</h2>
<p>Suppose you have an array, and you want to remove an item in position <code>i</code>.</p>
<p>One method is to use <code>slice()</code>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const items = ['a', 'b', 'c', 'd', 'e', 'f']
const i = 3
const filteredItems = items.slice(0, i).concat(items.slice(i+1, items.length))

console.log(filteredItems)</code></pre>
</div>
</div>
</p>
<p><code>slice()</code> creates a new array with the indexes it receives. We simply create a new array, from start to the index we want to remove, and concatenate another array from the first position following the one we removed to the end of the array.</p>
<h2>If you know the value</h2>
<p>In this case, one good option is to use <code>filter()</code>, which offers a more <em>declarative</em> approach:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const items = ['a', 'b', 'c', 'd', 'e', 'f']
const valueToRemove = 'c'
const filteredItems = items.filter(item =&gt; item !== valueToRemove)

console.log(filteredItems)</code></pre>
</div>
</div>
</p>
<p>This uses the ES6 arrow functions. You can use the traditional functions to support older browsers:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const items = ['a', 'b', 'c', 'd', 'e', 'f']
const valueToRemove = 'c'
const filteredItems = items.filter(function(item) {
  return item !== valueToRemove
})

console.log(filteredItems)</code></pre>
</div>
</div>
</p>
<p>or you can use Babel and transpile the ES6 code back to ES5 to make it more digestible to old browsers, yet write modern JavaScript in your code.</p>
<h2>Removing multiple items</h2>
<p>What if instead of a single item, you want to remove many items?</p>
<p>Let's find the simplest solution.</p>
<h3>By index</h3>
<p>You can just create a function and remove items in series:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const items = ['a', 'b', 'c', 'd', 'e', 'f']

const removeItem = (items, i) =&gt;
  items.slice(0, i-1).concat(items.slice(i, items.length))

let filteredItems = removeItem(items, 3)
filteredItems = removeItem(filteredItems, 5)
//[""a"", ""b"", ""c"", ""d""]

console.log(filteredItems)</code></pre>
</div>
</div>
</p>
<h3>By value</h3>
<p>You can search for inclusion inside the callback function:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const items = ['a', 'b', 'c', 'd', 'e', 'f']
const valuesToRemove = ['c', 'd']
const filteredItems = items.filter(item =&gt; !valuesToRemove.includes(item))
// [""a"", ""b"", ""e"", ""f""]

console.log(filteredItems)</code></pre>
</div>
</div>
</p>
<h2>Avoid mutating the original array</h2>
<p><code>splice()</code> (not to be confused with <code>slice()</code>) mutates the original array, and should be avoided.</p>
<p>(originally posted on my site <a href=""https://flaviocopes.com/how-to-remove-item-from-array/"" rel=""noreferrer"">https://flaviocopes.com/how-to-remove-item-from-array/</a>)</p>
"
"48761843","2","<p>Starting from the example proposed over the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round"" rel=""nofollow noreferrer""><strong>precisionRound</strong></a> that I found on <a href=""https://developer.mozilla.org/en-US/"" rel=""nofollow noreferrer"">MDN</a> (that event for 1.005 returs 1 and not 1.01), I write a custom <strong>precisionRound</strong> that manage a random precision number and for 1.005 returns 1.01.</p>

<p>This is the function:</p>

<pre><code>function precisionRound(number, precision)
{
  if(precision &lt; 0)
  {
    var factor = Math.pow(10, precision);
    return Math.round(number * factor) / factor;
  }
  else
    return +(Math.round(number + ""e+""+precision)  + ""e-""+precision);
}

console.log(precisionRound(1234.5678, 1));  // output: 1234.6
console.log(precisionRound(1234.5678, -1)); // output: 1230
console.log(precisionRound(1.005, 2));      // output: 1.01
console.log(precisionRound(1.0005, 2));     // output: 1
console.log(precisionRound(1.0005, 3));     // output: 1.001
console.log(precisionRound(1.0005, 4));     // output: 1.0005
</code></pre>

<p>For TypeScript:</p>

<pre><code>public static precisionRound(number: number, precision: number)
{
  if (precision &lt; 0)
  {
    let factor = Math.pow(10, precision);
    return Math.round(number * factor) / factor;
  }
  else
    return +(Math.round(Number(number + ""e+"" + precision)) +
      ""e-"" + precision);
}
</code></pre>
"
"40769912","14","<p>Use: </p>

<pre><code>function redirect(a) {
    location = a
}
</code></pre>

<p>And call it with: <code>redirect([url]);</code></p>

<p>There's no need for the <code>href</code> after <code>location</code>, as it is implied.</p>
"
"50313851","5","<p>Define a method named remove() on array objects using the prototyping feature of JavaScript.</p>

<blockquote>
  <p>Use <strong>splice()</strong> method to fulfill your requirement.</p>
</blockquote>

<p>Please have a look at the below code.</p>

<pre><code>Array.prototype.remove = function(item) {
    // 'index' will have -1 if 'item' does not exist,
    // else it will have the index of the first item found in the array
    var index = this.indexOf(item);

    if (index &gt; -1) {
        // The splice() method is used to add/remove items(s) in the array
        this.splice(index, 1);
    }
    return index;
}

var arr = [ 11, 22, 67, 45, 61, 89, 34, 12, 7, 8, 3, -1, -4];

// Printing array
// [ 11, 22, 67, 45, 61, 89, 34, 12, 7, 8, 3, -1, -4];
console.log(arr)

// Removing 67 (getting its index, i.e. 2)
console.log(""Removing 67"")
var index = arr.remove(67)

if (index &gt; 0){
    console.log(""Item 67 found at "", index)
} else {
    console.log(""Item 67 does not exist in array"")
}

// Printing updated array
// [ 11, 22, 45, 61, 89, 34, 12, 7, 8, 3, -1, -4];
console.log(arr)

// ............... Output ................................
// [ 11, 22, 67, 45, 61, 89, 34, 12, 7, 8, 3, -1, -4 ]
// Removing 67
// Item 67 found at  2
// [ 11, 22, 45, 61, 89, 34, 12, 7, 8, 3, -1, -4 ]
</code></pre>

<blockquote>
  <p><strong>Note:</strong> The below is the full example code executed on the <strong>Node.js REPL</strong> which describes the use of push(), pop(), shift(), unshift(), and splice() methods.</p>
</blockquote>

<pre><code>&gt; // Defining an array
undefined
&gt; var arr = [12, 45, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34];
undefined
&gt; // Getting length of array
undefined
&gt; arr.length;
16
&gt; // Adding 1 more item at the end i.e. pushing an item
undefined
&gt; arr.push(55);
17
&gt; arr
[ 12, 45, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34, 55 ]
&gt; // Popping item from array (i.e. from end)
undefined
&gt; arr.pop()
55
&gt; arr
[ 12, 45, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]
&gt; // Remove item from beginning
undefined
&gt; arr.shift()
12
&gt; arr
[ 45, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]
&gt; // Add item(s) at beginning
undefined
&gt; arr.unshift(67); // Add 67 at beginning of the array and return number of items in updated/new array
16
&gt; arr
[ 67, 45, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]
&gt; arr.unshift(11, 22); // Adding 2 more items at the beginning of array
18
&gt; arr
[ 11, 22, 67, 45, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]
&gt;
&gt; // Define a method on array (temporarily) to remove an item and return the index of removed item; if it is found else return -1
undefined
&gt; Array.prototype.remove = function(item) {
... var index = this.indexOf(item);
... if (index &gt; -1) {
..... this.splice(index, 1); // splice() method is used to add/remove items in array
..... }
... return index;
... }
[Function]
&gt;
&gt; arr
[ 11, 22, 67, 45, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]
&gt;
&gt; arr.remove(45);    // Remove 45 (you will get the index of removed item)
3
&gt; arr
[ 11, 22, 67, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]
&gt;
&gt; arr.remove(22)    // Remove 22
1
&gt; arr
[ 11, 67, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]
&gt; arr.remove(67)    // Remove 67
1
&gt; arr
[ 11, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]
&gt;
&gt; arr.remove(89)    // Remove 89
2
&gt; arr
[ 11, 67, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]
&gt;
&gt; arr.remove(100);  // 100 doesn't exist, remove() will return -1
-1
&gt;
</code></pre>
"
"51462109","1","<pre><code>    Array.prototype.remove = function(start, end) {
        var n = this.slice((end || start) + 1 || this.length);
        return this.length = start &lt; 0 ? this.length + start : start,
        this.push.apply(this, n)
    }
</code></pre>

<p><code>start</code> and <code>end</code> can be negative. In that case they count from the end of the array.</p>

<p>If only <code>start</code> is specified, only one element is removed.</p>

<p>The function returns the new array length.</p>

<pre><code>z = [0,1,2,3,4,5,6,7,8,9];

newlength = z.remove(2,6);
</code></pre>

<p>(8) [0, 1, 7, 8, 9]</p>

<pre><code>z=[0,1,2,3,4,5,6,7,8,9];

newlength = z.remove(-4,-2);
</code></pre>

<p>(7) [0, 1, 2, 3, 4, 5, 9]</p>

<pre><code>z=[0,1,2,3,4,5,6,7,8,9];

newlength = z.remove(3,-2);
</code></pre>

<p>(4) [0, 1, 2, 9]</p>
"
"41119113","32","<p>In <strong>jQuery</strong>, use <code>$(location).attr('href', url)</code>:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(document).ready(function(){
    var url = ""https://www.youtube.com/watch?v=JwMKRevYa_M"";
    $(location).attr('href', url); // Using this
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>

<p>In <em>raw</em> <strong>JavaScript</strong>, there are a number of ways to achieve that:</p>

<pre><code>window.location.href=""https://www.youtube.com/watch?v=JwMKRevYa_M"";
</code></pre>

<p>- sets href property explicitly.</p>

<pre><code>window.location = ""http://www.GameOfThrones.com"";
</code></pre>

<p>- does it implicitly Since window.location returns an object, which by default sets its .href property.</p>

<pre><code>window.location.replace(""http://www.stackoverflow.com"");
</code></pre>

<p>- replaces the location of the current window with the new one.</p>

<pre><code>self.location = ""http://www.somewebsite.com"";
</code></pre>

<p>- sets the location of the current window itself.</p>

<p>Here is an example of JavaScript redirecting after a certain time (3 seconds):</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>&lt;script&gt;
    setTimeout(function() {
        window.location.href = ""https://www.youtube.com/"";
    }, 3000);
&lt;/script&gt;</code></pre>
</div>
</div>
</p>
"
"41763845","8","<p><strong>LATEST EDIT: 8/23/19</strong>
The <a href=""https://www.npmjs.com/package/date-fns"" rel=""nofollow noreferrer"">date-fns</a> library works much like <a href=""https://www.npmjs.com/package/moment"" rel=""nofollow noreferrer"">moment.js</a> but has a WAY smaller footprint. It lets you cherry pick which functions you want to include in your project so you don't have to compile the whole library to format today's date. If a minimal 3rd party lib isn't an option for your project, I endorse the accepted solution by Samuel Meddows up top.</p>

<p><strong>Preserving history below because it helped a few people. But for the record it's pretty hacky and liable to break without warning, as are most of the solutions on this post</strong></p>

<p><strong>EDIT 2/7/2017</strong>
<strong>A one-line JS solution:</strong> </p>

<blockquote>
  <p>tl;dr<br><br>
  <code>var todaysDate = new Date(Date.now()).toLocaleString().slice(0,3).match(/[0-9]/i) ? new Date(Date.now()).toLocaleString().split(' ')[0].split(',')[0] : new Date(Date.now()).toLocaleString().split(' ')[1] + "" "" + new Date(Date.now()).toLocaleString().split(' ')[2] + "" "" + new Date(Date.now()).toLocaleString().split(' ')[3];</code>
  <br><br>edge, ff latest, &amp; chrome return <code>todaysDate = ""2/7/2017""</code> <br>""works""* in IE10+</p>
</blockquote>

<p><strong>Explanation</strong></p>

<p>I found out that IE10 and IE Edge do things a bit differently.. go figure.
with <code>new Date(Date.now()).toLocaleString()</code> as input,</p>

<p>IE10 returns: </p>

<pre><code>""Tuesday, February 07, 2017 2:58:25 PM""
</code></pre>

<p>I could write a big long function and FTFY. But <strong>you really ought to use <a href=""https://momentjs.com/"" rel=""nofollow noreferrer"">moment.js</a> for this stuff.</strong> My script merely cleans this up and gives you the <em>expanded</em> traditional US notation: <code>&gt; todaysDate = ""March 06, 2017""</code></p>

<p>IE EDGE returns:</p>

<pre><code>""‎2‎/‎7‎/‎2017‎ ‎2‎:‎59‎:‎27‎ ‎PM""
</code></pre>

<p>Of course it couldn't be that easy. <strong>Edge's date string has invisible ""•"" characters between each visible one.</strong> So not only will we now be checking if the first character is a number, but the first 3 characters, since it turns out that any single character in the whole date range will eventually be a dot or a slash at some point. So to keep things simple, just <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice"" rel=""nofollow noreferrer"">.slice()</a> the first three chars (tiny buffer against future shenanigans) and then check for numbers. It should probably be noted that these invisible dots could potentially persist in your code. I'd maybe dig into that if you've got bigger plans than just printing this string to your view.</p>

<p><strong>∴ updated one-liner:</strong></p>

<pre><code>var todaysDate = new Date(Date.now()).toLocaleString().slice(0,3).match(/[0-9]/i) ? new Date(Date.now()).toLocaleString().split(' ')[0].split(',')[0] : new Date(Date.now()).toLocaleString().split(' ')[1] + "" "" + new Date(Date.now()).toLocaleString().split(' ')[2] + "" "" + new Date(Date.now()).toLocaleString().split(' ')[3];
</code></pre>

<p>That sucks to read. How about:</p>

<pre><code>var dateString = new Date(Date.now()).toLocaleString();
var todaysDate = dateString.slice(0,3).match(/[0-9]/i) ? dateString.split(' ')[0].split(',')[0] : dateString.split(' ')[1] + "" "" + dateString.split(' ')[2] + "" "" + dateString.split(' ')[3];
</code></pre>

<p><strong>ORIGINAL ANSWER</strong></p>

<p>I've got a one-liner for you:</p>

<pre><code>new Date(Date.now()).toLocaleString().split(', ')[0];
</code></pre>

<p>and <code>[1]</code> will give you the time of day.</p>
"
"48764436","63","<p>In general, decimal rounding is done by scaling: <code>round(num * p) / p</code></p>
<p><strong>Naive implementation</strong></p>
<p>Using the following function with halfway numbers, you will get either the upper rounded value as expected, or the lower rounded value sometimes depending on the input.</p>
<p>This <code>inconsistency</code> in rounding may introduce hard to detect bugs in the client code.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function naiveRound(num, decimalPlaces = 0) {
    var p = Math.pow(10, decimalPlaces);
    return Math.round(num * p) / p;
}

console.log( naiveRound(1.245, 2) );  // 1.25 correct (rounded as expected)
console.log( naiveRound(1.255, 2) );  // 1.25 incorrect (should be 1.26)

// testing edge cases
console.log( naiveRound(1.005, 2) );  // 1    incorrect (should be 1.01)
console.log( naiveRound(2.175, 2) );  // 2.17 incorrect (should be 2.18)
console.log( naiveRound(5.015, 2) );  // 5.01 incorrect (should be 5.02)</code></pre>
</div>
</div>
</p>
<p>In order to determine whether a rounding operation involves a midpoint value, the Round function multiplies the original value to be rounded by 10 ** n, where n is the desired number of fractional digits in the return value, and then determines whether the remaining fractional portion of the value is greater than or equal to .5. This <code>&quot;Exact Testing for Equality&quot;</code> with floating-point values are problematic because of the floating-point format's issues with binary representation and precision. This means that any fractional portion of a number that is slightly less than .5 (because of a loss of precision) will not be rounded upward.</p>
<p>In the previous example, <code>5.015</code> is a midpoint value if it is to be rounded to two decimal places, the value of 5.015 * 100 is actually <code>501.49999999999994</code>. Because .49999999999994 is less than .5, it is rounded down to 501 and finally the result is 5.01.</p>
<p><strong>Better implementations</strong></p>
<p><strong>Exponential notation</strong></p>
<p>By converting the number to a string in the exponential notation, positive numbers are rounded as expected.
But, be aware that negative numbers round differently than positive numbers.</p>
<p>In fact, it performs what is basically equivalent to <a href=""http://en.wikipedia.org/wiki/Rounding#Round_half_up"" rel=""noreferrer"">&quot;round half up&quot;</a> as the rule, you will see that <code>round(-1.005, 2)</code> evaluates to <code>-1</code> even though <code>round(1.005, 2)</code> evaluates to <code>1.01</code>. The <a href=""https://lodash.com/docs/4.17.15#round"" rel=""noreferrer"">lodash</a> _.round method uses this technique.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>/**
 * Round half up ('round half towards positive infinity')
 * Uses exponential notation to avoid floating-point issues.
 * Negative numbers round differently than positive numbers.
 */
function round(num, decimalPlaces = 0) {
    num = Math.round(num + ""e"" + decimalPlaces);
    return Number(num + ""e"" + -decimalPlaces);
}

// test rounding of half
console.log( round(0.5, 0) );  // 1
console.log( round(-0.5, 0) ); // 0

// testing edge cases
console.log( round(1.005, 2) );   // 1.01
console.log( round(2.175, 2) );   // 2.18
console.log( round(5.015, 2) );   // 5.02

console.log( round(-1.005, 2) );  // -1
console.log( round(-2.175, 2) );  // -2.17
console.log( round(-5.015, 2) );  // -5.01</code></pre>
</div>
</div>
</p>
<p>If you want the usual behavior when rounding negative numbers, you would need to convert negative numbers to positive before calling <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round"" rel=""noreferrer"">Math.round()</a>, and then convert them back to negative numbers before returning.</p>
<pre><code>// Round half away from zero
function round(num, decimalPlaces = 0) {
    if (num &lt; 0)
        return -round(-num, decimalPlaces);
    num = Math.round(num + &quot;e&quot; + decimalPlaces);
    return Number(num + &quot;e&quot; + -decimalPlaces);
}
</code></pre>
<p><strong>Approximate rounding</strong></p>
<p>To correct the rounding problem shown in the previous <code>naiveRound</code> example, we can define a custom rounding function that performs a &quot;nearly equal&quot; test to determine whether a fractional value is sufficiently close to a midpoint value to be subject to midpoint rounding.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// round half away from zero
function round(num, decimalPlaces = 0) {
    if (num &lt; 0)
        return -round(-num, decimalPlaces);
    var p = Math.pow(10, decimalPlaces);
    var n = num * p;
    var f = n - Math.floor(n);
    var e = Number.EPSILON * n;

    // Determine whether this fraction is a midpoint value.
    return (f &gt;= .5 - e) ? Math.ceil(n) / p : Math.floor(n) / p;
}

// test rounding of half
console.log( round(0.5, 0) );  // 1
console.log( round(-0.5, 0) ); // -1

// testing edge cases
console.log( round(1.005, 2) );  // 1.01
console.log( round(2.175, 2) );  // 2.18
console.log( round(5.015, 2) );  // 5.02

console.log( round(-1.005, 2) ); // -1.01
console.log( round(-2.175, 2) ); // -2.18
console.log( round(-5.015, 2) ); // -5.02</code></pre>
</div>
</div>
</p>
<p><strong>Number.EPSILON</strong></p>
<p>There is a different purely mathematical technique to perform round-to-nearest (using <a href=""http://en.wikipedia.org/wiki/Rounding#Round_half_away_from_zero"" rel=""noreferrer"">&quot;round half away from zero&quot;</a>), in which epsilon correction is applied before calling the rounding function.</p>
<p>Simply, we add the smallest possible float value (= 1.0 ulp; unit in the last place) to the product before rounding. This moves to the next representable float value, away from zero, thus it will offset the binary <a href=""https://en.wikipedia.org/wiki/Round-off_error"" rel=""noreferrer"">round-off error</a> that may occur during the multiplication by <code>10 ** n</code>.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>/**
 * Round half away from zero ('commercial' rounding)
 * Uses correction to offset floating-point inaccuracies.
 * Works symmetrically for positive and negative numbers.
 */
function round(num, decimalPlaces = 0) {
    var p = Math.pow(10, decimalPlaces);
    var n = (num * p) * (1 + Number.EPSILON);
    return Math.round(n) / p;
}

// test rounding of half
console.log( round(0.5, 0) );  // 1
console.log( round(-0.5, 0) ); // -1

// testing edge cases
console.log( round(1.005, 2) );  // 1.01
console.log( round(2.175, 2) );  // 2.18
console.log( round(5.015, 2) );  // 5.02

console.log( round(-1.005, 2) ); // -1.01
console.log( round(-2.175, 2) ); // -2.18
console.log( round(-5.015, 2) ); // -5.02</code></pre>
</div>
</div>
</p>
<p>After adding 1 ulp, the value of 5.015 * 100 which is <code>501.49999999999994</code> will be corrected to <code>501.50000000000006</code>, this will rounded up to 502 and finally the result is 5.02.</p>
<p>Note that the size of a <a href=""https://en.wikipedia.org/wiki/Unit_in_the_last_place"" rel=""noreferrer"">unit in last place</a> (&quot;ulp&quot;) is determined by (1) the magnitude of the number and (2) the relative machine epsilon (2^-52). Ulps are relatively larger at numbers with bigger magnitudes than they are at numbers with smaller magnitudes.</p>
<p><strong>Double rounding</strong></p>
<p>Here, we use the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Number/toPrecision"" rel=""noreferrer"">toPrecision()</a> method to strip the floating-point round-off errors in the intermediate calculations. Simply, we round to 15 <a href=""https://en.wikipedia.org/wiki/Significant_figures"" rel=""noreferrer"">significant figures</a> to strip the round-off error at the 16th significant digit. This technique to preround the result to significant digits is also used by <strong>PHP 7</strong> <a href=""https://github.com/php/php-src/blob/PHP-7.4.10/ext/standard/math.c#L127-L206"" rel=""noreferrer"">round</a> function.</p>
<p>The value of 5.015 * 100 which is <code>501.49999999999994</code> will be rounded first to 15 significant digits as <code>501.500000000000</code>, then it will rounded up again to 502 and finally the result is 5.02.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Round half away from zero
function round(num, decimalPlaces = 0) {
    if (num &lt; 0)
        return -round(-num, decimalPlaces);
    var p = Math.pow(10, decimalPlaces);
    var n = (num * p).toPrecision(15);
    return Math.round(n) / p;
}

// test rounding of half
console.log( round(0.5, 0) );  // 1
console.log( round(-0.5, 0) ); // -1

// testing edge cases
console.log( round(1.005, 2) );  // 1.01
console.log( round(2.175, 2) );  // 2.18
console.log( round(5.015, 2) );  // 5.02

console.log( round(-1.005, 2) ); // -1.01
console.log( round(-2.175, 2) ); // -2.18
console.log( round(-5.015, 2) ); // -5.02</code></pre>
</div>
</div>
</p>
<p><strong>Arbitrary-precision JavaScript library</strong> - <a href=""https://mikemcl.github.io/decimal.js/"" rel=""noreferrer"">decimal.js</a></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Round half away from zero
function round(num, decimalPlaces = 0) {
    return new Decimal(num).toDecimalPlaces(decimalPlaces).toNumber();
}

// test rounding of half
console.log( round(0.5, 0) );  // 1
console.log( round(-0.5, 0) ); // -1

// testing edge cases
console.log( round(1.005, 2) );  // 1.01
console.log( round(2.175, 2) );  // 2.18
console.log( round(5.015, 2) );  // 5.02

console.log( round(-1.005, 2) ); // -1.01
console.log( round(-2.175, 2) ); // -2.18
console.log( round(-5.015, 2) ); // -5.02</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/decimal.js/10.2.1/decimal.js"" integrity=""sha512-GKse2KVGCCMVBn4riigHjXE8j5hCxYLPXDw8AvcjUtrt+a9TbZFtIKGdArXwYOlZvdmkhQLWQ46ZE3Q1RIa7uQ=="" crossorigin=""anonymous""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
<p><strong>Solution 1: string in exponential notation</strong></p>
<p>Inspired by the solution provided by KFish here: <a href=""https://stackoverflow.com/a/55521592/4208440"">https://stackoverflow.com/a/55521592/4208440</a></p>
<p>A simple drop in solution that provides accurate decimal rounding, flooring, and ceiling to a specific number of decimal places without adding a whole library. It treats floats more like decimals by fixing the binary rounding issues to avoid unexpected results: for example, floor((0.1+0.7)*10) will return the expected result 8.</p>
<p>Numbers are rounded to a specific number of fractional digits. Specifying a negative precision will round to any number of places to the left of the decimal point.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Solution 1
var DecimalPrecision = (function() {
    if (Math.sign === undefined) {
        Math.sign = function(x) {
            return ((x &gt; 0) - (x &lt; 0)) || +x;
        };
    }
    if (Math.trunc === undefined) {
        Math.trunc = function(v) {
            return v &lt; 0 ? Math.ceil(v) : Math.floor(v);
        };
    }
    var decimalAdjust = function myself(type, num, decimalPlaces) {
        if (type === 'round' &amp;&amp; num &lt; 0)
            return -myself(type, -num, decimalPlaces);
        var shift = function(value, exponent) {
            value = (value + 'e').split('e');
            return +(value[0] + 'e' + (+value[1] + (exponent || 0)));
        };
        var n = shift(num, +decimalPlaces);
        return shift(Math[type](n), -decimalPlaces);
    };
    return {
        // Decimal round (half away from zero)
        round: function(num, decimalPlaces) {
            return decimalAdjust('round', num, decimalPlaces);
        },
        // Decimal ceil
        ceil: function(num, decimalPlaces) {
            return decimalAdjust('ceil', num, decimalPlaces);
        },
        // Decimal floor
        floor: function(num, decimalPlaces) {
            return decimalAdjust('floor', num, decimalPlaces);
        },
        // Decimal trunc
        trunc: function(num, decimalPlaces) {
            return decimalAdjust('trunc', num, decimalPlaces);
        },
        // Format using fixed-point notation
        toFixed: function(num, decimalPlaces) {
            return decimalAdjust('round', num, decimalPlaces).toFixed(decimalPlaces);
        }
    };
})();

// test rounding of half
console.log(DecimalPrecision.round(0.5));  // 1
console.log(DecimalPrecision.round(-0.5)); // -1

// testing very small numbers
console.log(DecimalPrecision.ceil(1e-8, 2) === 0.01);         // 0.01
console.log(DecimalPrecision.floor(1e-8, 2) === 0);              // 0

// testing simple cases
console.log(DecimalPrecision.round(5.12, 1) === 5.1);          // 5.1
console.log(DecimalPrecision.round(-5.12, 1) === -5.1);       // -5.1
console.log(DecimalPrecision.ceil(5.12, 1) === 5.2);           // 5.2
console.log(DecimalPrecision.ceil(-5.12, 1) === -5.1);        // -5.1
console.log(DecimalPrecision.floor(5.12, 1) === 5.1);          // 5.1
console.log(DecimalPrecision.floor(-5.12, 1) === -5.2);       // -5.2
console.log(DecimalPrecision.trunc(5.12, 1) === 5.1);          // 5.1
console.log(DecimalPrecision.trunc(-5.12, 1) === -5.1);       // -5.1

// testing edge cases for round
console.log(DecimalPrecision.round(1.005, 2) === 1.01);       // 1.01
console.log(DecimalPrecision.round(39.425, 2) === 39.43);    // 39.43
console.log(DecimalPrecision.round(-1.005, 2) === -1.01);    // -1.01
console.log(DecimalPrecision.round(-39.425, 2) === -39.43); // -39.43

// testing edge cases for ceil
console.log(DecimalPrecision.ceil(9.130, 2) === 9.13);        // 9.13
console.log(DecimalPrecision.ceil(65.180, 2) === 65.18);     // 65.18
console.log(DecimalPrecision.ceil(-2.260, 2) === -2.26);     // -2.26
console.log(DecimalPrecision.ceil(-18.150, 2) === -18.15);  // -18.15

// testing edge cases for floor
console.log(DecimalPrecision.floor(2.260, 2) === 2.26);       // 2.26
console.log(DecimalPrecision.floor(18.150, 2) === 18.15);    // 18.15
console.log(DecimalPrecision.floor(-9.130, 2) === -9.13);    // -9.13
console.log(DecimalPrecision.floor(-65.180, 2) === -65.18); // -65.18

// testing edge cases for trunc
console.log(DecimalPrecision.trunc(2.260, 2) === 2.26);       // 2.26
console.log(DecimalPrecision.trunc(18.150, 2) === 18.15);    // 18.15
console.log(DecimalPrecision.trunc(-2.260, 2) === -2.26);    // -2.26
console.log(DecimalPrecision.trunc(-18.150, 2) === -18.15); // -18.15

// testing round to tens and hundreds
console.log(DecimalPrecision.round(1262.48, -1) === 1260);    // 1260
console.log(DecimalPrecision.round(1262.48, -2) === 1300);    // 1300

// testing toFixed()
console.log(DecimalPrecision.toFixed(1.005, 2) === ""1.01"");   // ""1.01""</code></pre>
</div>
</div>
</p>
<p><strong>Solution 2: purely mathematical (Number.EPSILON)</strong></p>
<p>This solution avoids any string conversion / manipulation of any kind for performance reasons.</p>
<p><code>Solution 1: 25,838 ops/sec</code></p>
<p><code>Solution 2: 655,087 ops/sec</code></p>
<p><a href=""http://jsbench.github.io/#31ec3a8b3d22bd840f8e6822e681a3ac"" rel=""noreferrer"">http://jsbench.github.io/#31ec3a8b3d22bd840f8e6822e681a3ac</a></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Solution 2
var DecimalPrecision2 = (function() {
    if (Number.EPSILON === undefined) {
        Number.EPSILON = Math.pow(2, -52);
    }
    if (Math.trunc === undefined) {
        Math.trunc = function(v) {
            return v &lt; 0 ? Math.ceil(v) : Math.floor(v);
        };
    }
    var isRound = function(num, decimalPlaces) {
        //return decimalPlaces &gt;= 0 &amp;&amp;
        //    +num.toFixed(decimalPlaces) === num;
        var p = Math.pow(10, decimalPlaces);
        return Math.round(num * p) / p === num;
    };
    var decimalAdjust = function(type, num, decimalPlaces) {
        if (isRound(num, decimalPlaces || 0))
            return num;
        var p = Math.pow(10, decimalPlaces || 0);
        var n = (num * p) * (1 + Number.EPSILON);
        return Math[type](n) / p;
    };
    return {
        // Decimal round (half away from zero)
        round: function(num, decimalPlaces) {
            return decimalAdjust('round', num, decimalPlaces);
        },
        // Decimal ceil
        ceil: function(num, decimalPlaces) {
            return decimalAdjust('ceil', num, decimalPlaces);
        },
        // Decimal floor
        floor: function(num, decimalPlaces) {
            return decimalAdjust('floor', num, decimalPlaces);
        },
        // Decimal trunc
        trunc: function(num, decimalPlaces) {
            return decimalAdjust('trunc', num, decimalPlaces);
        },
        // Format using fixed-point notation
        toFixed: function(num, decimalPlaces) {
            return decimalAdjust('round', num, decimalPlaces).toFixed(decimalPlaces);
        }
    };
})();

// test rounding of half
console.log(DecimalPrecision2.round(0.5));  // 1
console.log(DecimalPrecision2.round(-0.5)); // -1

// testing very small numbers
console.log(DecimalPrecision2.ceil(1e-8, 2) === 0.01);
console.log(DecimalPrecision2.floor(1e-8, 2) === 0);

// testing simple cases
console.log(DecimalPrecision2.round(5.12, 1) === 5.1);
console.log(DecimalPrecision2.round(-5.12, 1) === -5.1);
console.log(DecimalPrecision2.ceil(5.12, 1) === 5.2);
console.log(DecimalPrecision2.ceil(-5.12, 1) === -5.1);
console.log(DecimalPrecision2.floor(5.12, 1) === 5.1);
console.log(DecimalPrecision2.floor(-5.12, 1) === -5.2);
console.log(DecimalPrecision2.trunc(5.12, 1) === 5.1);
console.log(DecimalPrecision2.trunc(-5.12, 1) === -5.1);

// testing edge cases for round
console.log(DecimalPrecision2.round(1.005, 2) === 1.01);
console.log(DecimalPrecision2.round(39.425, 2) === 39.43);
console.log(DecimalPrecision2.round(-1.005, 2) === -1.01);
console.log(DecimalPrecision2.round(-39.425, 2) === -39.43);

// testing edge cases for ceil
console.log(DecimalPrecision2.ceil(9.130, 2) === 9.13);
console.log(DecimalPrecision2.ceil(65.180, 2) === 65.18);
console.log(DecimalPrecision2.ceil(-2.260, 2) === -2.26);
console.log(DecimalPrecision2.ceil(-18.150, 2) === -18.15);

// testing edge cases for floor
console.log(DecimalPrecision2.floor(2.260, 2) === 2.26);
console.log(DecimalPrecision2.floor(18.150, 2) === 18.15);
console.log(DecimalPrecision2.floor(-9.130, 2) === -9.13);
console.log(DecimalPrecision2.floor(-65.180, 2) === -65.18);

// testing edge cases for trunc
console.log(DecimalPrecision2.trunc(2.260, 2) === 2.26);
console.log(DecimalPrecision2.trunc(18.150, 2) === 18.15);
console.log(DecimalPrecision2.trunc(-2.260, 2) === -2.26);
console.log(DecimalPrecision2.trunc(-18.150, 2) === -18.15);

// testing round to tens and hundreds
console.log(DecimalPrecision2.round(1262.48, -1) === 1260);
console.log(DecimalPrecision2.round(1262.48, -2) === 1300);

// testing toFixed()
console.log(DecimalPrecision2.toFixed(1.005, 2) === ""1.01"");</code></pre>
</div>
</div>
</p>
<p><strong>Solution 3: double rounding</strong></p>
<p>This solution uses the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Number/toPrecision"" rel=""noreferrer"">toPrecision()</a> method to strip the floating-point round-off errors.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Solution 3
var DecimalPrecision3 = (function() {
    if (Math.sign === undefined) {
        Math.sign = function(x) {
            return ((x &gt; 0) - (x &lt; 0)) || +x;
        };
    }
    if (Math.trunc === undefined) {
        Math.trunc = function(v) {
            return v &lt; 0 ? Math.ceil(v) : Math.floor(v);
        };
    }
    // Eliminate binary floating-point inaccuracies.
    var stripError = function(num) {
        if (Number.isInteger(num))
            return num;
        return parseFloat(num.toPrecision(15));
    };
    var decimalAdjust = function myself(type, num, decimalPlaces) {
        if (type === 'round' &amp;&amp; num &lt; 0)
            return -myself(type, -num, decimalPlaces);
        var p = Math.pow(10, decimalPlaces || 0);
        var n = stripError(num * p);
        return Math[type](n) / p;
    };
    return {
        // Decimal round (half away from zero)
        round: function(num, decimalPlaces) {
            return decimalAdjust('round', num, decimalPlaces);
        },
        // Decimal ceil
        ceil: function(num, decimalPlaces) {
            return decimalAdjust('ceil', num, decimalPlaces);
        },
        // Decimal floor
        floor: function(num, decimalPlaces) {
            return decimalAdjust('floor', num, decimalPlaces);
        },
        // Decimal trunc
        trunc: function(num, decimalPlaces) {
            return decimalAdjust('trunc', num, decimalPlaces);
        },
        // Format using fixed-point notation
        toFixed: function(num, decimalPlaces) {
            return decimalAdjust('round', num, decimalPlaces).toFixed(decimalPlaces);
        }
    };
})();

// test rounding of half
console.log(DecimalPrecision3.round(0.5));  // 1
console.log(DecimalPrecision3.round(-0.5)); // -1

// testing very small numbers
console.log(DecimalPrecision3.ceil(1e-8, 2) === 0.01);
console.log(DecimalPrecision3.floor(1e-8, 2) === 0);

// testing simple cases
console.log(DecimalPrecision3.round(5.12, 1) === 5.1);
console.log(DecimalPrecision3.round(-5.12, 1) === -5.1);
console.log(DecimalPrecision3.ceil(5.12, 1) === 5.2);
console.log(DecimalPrecision3.ceil(-5.12, 1) === -5.1);
console.log(DecimalPrecision3.floor(5.12, 1) === 5.1);
console.log(DecimalPrecision3.floor(-5.12, 1) === -5.2);
console.log(DecimalPrecision3.trunc(5.12, 1) === 5.1);
console.log(DecimalPrecision3.trunc(-5.12, 1) === -5.1);

// testing edge cases for round
console.log(DecimalPrecision3.round(1.005, 2) === 1.01);
console.log(DecimalPrecision3.round(39.425, 2) === 39.43);
console.log(DecimalPrecision3.round(-1.005, 2) === -1.01);
console.log(DecimalPrecision3.round(-39.425, 2) === -39.43);

// testing edge cases for ceil
console.log(DecimalPrecision3.ceil(9.130, 2) === 9.13);
console.log(DecimalPrecision3.ceil(65.180, 2) === 65.18);
console.log(DecimalPrecision3.ceil(-2.260, 2) === -2.26);
console.log(DecimalPrecision3.ceil(-18.150, 2) === -18.15);

// testing edge cases for floor
console.log(DecimalPrecision3.floor(2.260, 2) === 2.26);
console.log(DecimalPrecision3.floor(18.150, 2) === 18.15);
console.log(DecimalPrecision3.floor(-9.130, 2) === -9.13);
console.log(DecimalPrecision3.floor(-65.180, 2) === -65.18);

// testing edge cases for trunc
console.log(DecimalPrecision3.trunc(2.260, 2) === 2.26);
console.log(DecimalPrecision3.trunc(18.150, 2) === 18.15);
console.log(DecimalPrecision3.trunc(-2.260, 2) === -2.26);
console.log(DecimalPrecision3.trunc(-18.150, 2) === -18.15);

// testing round to tens and hundreds
console.log(DecimalPrecision3.round(1262.48, -1) === 1260);
console.log(DecimalPrecision3.round(1262.48, -2) === 1300);

// testing toFixed()
console.log(DecimalPrecision3.toFixed(1.005, 2) === ""1.01"");</code></pre>
</div>
</div>
</p>
<p><strong>Solution 4: double rounding v2</strong></p>
<p>This solution is just like Solution 3, however it uses a custom <code>toPrecision()</code> function.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Solution 4
var DecimalPrecision4 = (function() {
    if (Math.sign === undefined) {
        Math.sign = function(x) {
            return ((x &gt; 0) - (x &lt; 0)) || +x;
        };
    }
    if (Math.trunc === undefined) {
        Math.trunc = function(v) {
            return v &lt; 0 ? Math.ceil(v) : Math.floor(v);
        };
    }
    var toPrecision = function(num, significantDigits) {
        // Return early for ±0, NaN and Infinity.
        if (!num || !Number.isFinite(num))
            return num;
        // Compute shift of the decimal point (sf - leftSidedDigits).
        var shift = significantDigits - 1 - Math.floor(Math.log10(Math.abs(num)));
        // Return if rounding to the same or higher precision.
        var decimalPlaces = 0;
        for (var p = 1; !Number.isInteger(num * p); p *= 10) decimalPlaces++;
        if (shift &gt;= decimalPlaces)
            return num;
        // Round to ""shift"" fractional digits
        var scale = Math.pow(10, Math.abs(shift));
        return shift &gt; 0 ?
            Math.round(num * scale) / scale :
            Math.round(num / scale) * scale;
    };
    // Eliminate binary floating-point inaccuracies.
    var stripError = function(num) {
        if (Number.isInteger(num))
            return num;
        return toPrecision(num, 15);
    };
    var decimalAdjust = function myself(type, num, decimalPlaces) {
        if (type === 'round' &amp;&amp; num &lt; 0)
            return -myself(type, -num, decimalPlaces);
        var p = Math.pow(10, decimalPlaces || 0);
        var n = stripError(num * p);
        return Math[type](n) / p;
    };
    return {
        // Decimal round (half away from zero)
        round: function(num, decimalPlaces) {
            return decimalAdjust('round', num, decimalPlaces);
        },
        // Decimal ceil
        ceil: function(num, decimalPlaces) {
            return decimalAdjust('ceil', num, decimalPlaces);
        },
        // Decimal floor
        floor: function(num, decimalPlaces) {
            return decimalAdjust('floor', num, decimalPlaces);
        },
        // Decimal trunc
        trunc: function(num, decimalPlaces) {
            return decimalAdjust('trunc', num, decimalPlaces);
        },
        // Format using fixed-point notation
        toFixed: function(num, decimalPlaces) {
            return decimalAdjust('round', num, decimalPlaces).toFixed(decimalPlaces);
        }
    };
})();

// test rounding of half
console.log(DecimalPrecision4.round(0.5));  // 1
console.log(DecimalPrecision4.round(-0.5)); // -1

// testing very small numbers
console.log(DecimalPrecision4.ceil(1e-8, 2) === 0.01);
console.log(DecimalPrecision4.floor(1e-8, 2) === 0);

// testing simple cases
console.log(DecimalPrecision4.round(5.12, 1) === 5.1);
console.log(DecimalPrecision4.round(-5.12, 1) === -5.1);
console.log(DecimalPrecision4.ceil(5.12, 1) === 5.2);
console.log(DecimalPrecision4.ceil(-5.12, 1) === -5.1);
console.log(DecimalPrecision4.floor(5.12, 1) === 5.1);
console.log(DecimalPrecision4.floor(-5.12, 1) === -5.2);
console.log(DecimalPrecision4.trunc(5.12, 1) === 5.1);
console.log(DecimalPrecision4.trunc(-5.12, 1) === -5.1);

// testing edge cases for round
console.log(DecimalPrecision4.round(1.005, 2) === 1.01);
console.log(DecimalPrecision4.round(39.425, 2) === 39.43);
console.log(DecimalPrecision4.round(-1.005, 2) === -1.01);
console.log(DecimalPrecision4.round(-39.425, 2) === -39.43);

// testing edge cases for ceil
console.log(DecimalPrecision4.ceil(9.130, 2) === 9.13);
console.log(DecimalPrecision4.ceil(65.180, 2) === 65.18);
console.log(DecimalPrecision4.ceil(-2.260, 2) === -2.26);
console.log(DecimalPrecision4.ceil(-18.150, 2) === -18.15);

// testing edge cases for floor
console.log(DecimalPrecision4.floor(2.260, 2) === 2.26);
console.log(DecimalPrecision4.floor(18.150, 2) === 18.15);
console.log(DecimalPrecision4.floor(-9.130, 2) === -9.13);
console.log(DecimalPrecision4.floor(-65.180, 2) === -65.18);

// testing edge cases for trunc
console.log(DecimalPrecision4.trunc(2.260, 2) === 2.26);
console.log(DecimalPrecision4.trunc(18.150, 2) === 18.15);
console.log(DecimalPrecision4.trunc(-2.260, 2) === -2.26);
console.log(DecimalPrecision4.trunc(-18.150, 2) === -18.15);

// testing round to tens and hundreds
console.log(DecimalPrecision4.round(1262.48, -1) === 1260);
console.log(DecimalPrecision4.round(1262.48, -2) === 1300);

// testing toFixed()
console.log(DecimalPrecision4.toFixed(1.005, 2) === ""1.01"");</code></pre>
</div>
</div>
</p>
<h2>Benchmarks</h2>
<p><a href=""http://jsbench.github.io/#31ec3a8b3d22bd840f8e6822e681a3ac"" rel=""noreferrer"">http://jsbench.github.io/#31ec3a8b3d22bd840f8e6822e681a3ac</a></p>
<p>Here is a benchmark comparing the operations per second in the solutions above on Chrome 85.0.4183.83. Obviously all browsers differ, so your mileage may vary.</p>
<p><a href=""https://i.stack.imgur.com/llFZn.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/llFZn.png"" alt=""Benchmark comparison"" /></a>
(Note: More is better)</p>
<p>Thanks @Mike for adding a screenshot of the benchmark.</p>
"
"42427815","54","<h1>Using JavaScript:</h1>

<h3>Method 1:</h3>

<pre><code>window.location.href=""http://google.com"";
</code></pre>

<h3>Method 2:</h3>

<pre><code>window.location.replace(""http://google.com"");
</code></pre>

<hr>

<h1>Using jQuery:</h1>

<h3>Method 1: $(location)</h3>

<pre><code>$(location).attr('href', 'http://google.com');
</code></pre>

<h3>Method 2: Reusable Function</h3>

<pre><code>jQuery.fn.redirectTo = function(url){
    window.location.href = url;
}

jQuery(window).redirectTo(""http://google.com"");
</code></pre>
"
"52291636","5","<p>I had this problem myself (in a situation where replacing the array was acceptable) and solved it with a simple:</p>

<pre><code>var filteredItems = this.items.filter(function (i) {
    return i !== item;
});
</code></pre>

<p>To give the above snippet a bit of context:</p>

<pre><code>self.thingWithItems = {
    items: [],
    removeItem: function (item) {
        var filteredItems = this.items.filter(function (i) {
            return i !== item;
        });

        this.items = filteredItems;
    }
};
</code></pre>

<p>This solution should work with both reference and value items. It all depends whether you need to maintain a reference to the original array as to whether this solution is applicable.</p>
"
"52945745","12","<p>The previous answers are way too complicated. Just use the replace function like this:</p>

<pre><code>str.replace(/your_regex_pattern/g, replacement_string);
</code></pre>

<p>Example:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var str = ""Test abc test test abc test test test abc test test abc"";

var res = str.replace(/[abc]+/g, """");

console.log(res);</code></pre>
</div>
</div>
</p>
"
"53069926","38","<p>I want to answer based on <a href=""https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015"" rel=""noreferrer"">ECMAScript&nbsp;6</a>. Assume, you have an array like below:</p>

<pre><code>let arr = [1,2,3,4];
</code></pre>

<p>If you want to delete at a special index like <code>2</code>, write the below code:</p>

<pre><code>arr.splice(2, 1); //=&gt; arr became [1,2,4]
</code></pre>

<p>But if you want to delete a special item like <code>3</code> and you don't know its index, do like below:</p>

<pre><code>arr = arr.filter(e =&gt; e !== 3); //=&gt; arr became [1,2,4]
</code></pre>

<p><strong>Hint</strong>: please use an arrow function for filter callback unless you will get an empty array.</p>
"
"42469170","211","<p>Basically <strong>jQuery</strong> is just a <strong>JavaScript</strong> framework and for doing some of the things like <strong>redirection</strong> in this case, you can just use pure JavaScript, so in that case you have 3 options using vanilla JavaScript:</p>

<p>1) Using location <strong>replace</strong>, this will replace the current history of the page, means that it is not possible to use the <strong>back</strong> button to go back to the original page.</p>

<pre><code>window.location.replace(""http://stackoverflow.com"");
</code></pre>

<p>2) Using location <strong>assign</strong>, this will keep the history for you and with using back button, you can go back to the original page:</p>

<pre><code>window.location.assign(""http://stackoverflow.com"");
</code></pre>

<p>3) I recommend using one of those previous ways, but this could be the third option using pure JavaScript: </p>

<pre><code>window.location.href=""http://stackoverflow.com"";
</code></pre>

<p>You can also write a function in jQuery to handle it, but not recommended as it's only one line pure JavaScript function, also you can use all of above functions without window if you are already in the window scope, for example <code>window.location.replace(""http://stackoverflow.com"");</code> could be <code>location.replace(""http://stackoverflow.com"");</code></p>

<p>Also I show them all on the image below:</p>

<p><a href=""https://i.stack.imgur.com/ODheM.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/ODheM.jpg"" alt=""location.replace location.assign""></a></p>
"
"53887037","5","<p>To me the simpler is the better, and as we are in 2018 (near 2019) I give you this (near) one-liner to answer the original question:</p>

<pre><code>Array.prototype.remove = function (value) {
    return this.filter(f =&gt; f != value)
}
</code></pre>

<p>The useful thing is that you can use it in a curry expression such as:</p>

<pre><code>[1,2,3].remove(2).sort()
</code></pre>
"
"50481139","2","<p>From the existing answers I found another solution which seems to work great, which also works with sending in a string and eliminates trailing zeros.</p>

<pre><code>function roundToDecimal(string, decimals) {
    return parseFloat(parseFloat(string).toFixed(decimals));
}
</code></pre>

<p>It doesn't take in to account if you send in some bull.. like ""apa"" though. Or it will probably throw an error which I think is the proper way anyway, it's never good to hide errors that should be fixed (by the calling function). </p>
"
"50732183","0","<p>Using Brian Ustas's solution:</p>

<pre><code>function roundDecimal(value, precision) {
    var multiplier = Math.pow(10, precision);
    return Math.round(value * multiplier) / multiplier;
}
</code></pre>
"
"54094030","61","<p><strong>Removing a particular element/string from an array can be done in a one-liner:</strong></p>
<pre><code>theArray.splice(theArray.indexOf(&quot;stringToRemoveFromArray&quot;), 1);
</code></pre>
<p>where:</p>
<p><em>theArray</em>: the array you want to remove something particular from</p>
<p><em>stringToRemoveFromArray</em>: the string you want to be removed and 1 is the number of elements you want to remove.</p>
<p><em>NOTE</em>: If &quot;stringToRemoveFromArray&quot; is not located in the array, this will remove the last element of the array.</p>
<p>It's always good practice to check if the element exists in your array first, before removing it.</p>
<pre><code>if (theArray.indexOf(&quot;stringToRemoveFromArray&quot;) &gt;= 0){
   theArray.splice(theArray.indexOf(&quot;stringToRemoveFromArray&quot;), 1);
}
</code></pre>
<hr />
<p>Depending if you have newer or older version of Ecmascript running on your client's computers:</p>
<pre><code>var array=['1','2','3','4','5','6']
var newArray = array.filter((value)=&gt;value!='3');
</code></pre>
<p>OR</p>
<pre><code>var array = ['1','2','3','4','5','6'];
var newArray = array.filter(function(item){ return item !== '3' });
</code></pre>
<p>Where '3' is the value you want to be removed from the array.
The array would then become : <code>['1','2','4','5','6']</code></p>
"
"43901236","1","<p>You can use my DATE API given below for everyday use of date formatting along with getting current date, yesterday etc. 
How to use 
  e.g. </p>

<pre><code> var dt = new Date();  
       /// ANY DATE YOU WANT --  dt = new Date(""""July 21, 1983 01:15:00"""")

       dateObj = dt.getFormattedDate();

       alert( dateObj.isToday() );
       alert( dateObj.todayDay() );
       alert( dateObj.monthNameDayYear() );
</code></pre>

<hr>

<pre><code>(function () {

    fnDateProcessor = function () {
        var that = this;

        return {

            yyyymmdd: function (separator) {
                var fdate = this.formatDate(true, true) ,
                    separator = separator ? separator : ""-"";
                return fdate.year + separator + fdate.month + separator + fdate.day;
            },

            monthNameDayYear: function () {
                var fdate = this.formatDate(true, true);
                return fdate.monthName + "" "" + fdate.day + "", "" + fdate.year;
            },

            ddmmyyyy: function (separator) {
                var fdate = this.formatDate(true, true) ,
                    separator = separator ? separator : ""/"";
                return fdate.day + separator + fdate.month + separator + fdate.year;
            },

            meridianTime: function () {
                var fdate = this.formatDate();
                return fdate.hour + "":"" + fdate.minute + "" "" + fdate.meridian;
            },

            monthDay: function (separator) {

                var fdate = this.formatDate();
                separator = checkSeparator(separator);
                return fdate.monthName.substring(0, 3) + separator + fdate.day;

            },

            weekMonthDayYear: function () {
                var fdate = this.formatDate();
                //separator = checkSeparator(separator);

                return fdate.weekDay + "" "" + fdate.monthName.substring(0, 3) +
                    fdate.day + "" ,"" + fdate.year;
            },

            timeZoneInclusive: function () {

                return new Date(that);
            },

            todayDay: function () { return new Date().getDate(); },
            todayMonth: function () { return new Date().getMonth() + 1; },
            dateDay: function () { return this.formatDate().day; },
            dateMonth: function () { return this.formatDate().month; },
            isToday: function () { return this.sameDate(new Date()); },
            isYesterday: function () {
                d = new Date(); d.setDate(d.getDate() - 1);
                return this.sameDate(d);
            },

            formatDate: function () {
                var zeroPaddedMnth = true, zeroPaddedDay = false,
                    zeroPaddedHr = false, zeroPaddedMin = true;
                // Possible to take Options arg that overide / merge to defaults

                var monthNames = [
                    ""January"", ""February"", ""March"",
                    ""April"", ""May"", ""June"", ""July"",
                    ""August"", ""September"", ""October"",
                    ""November"", ""December""
                ];
                var weekDays = [""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""];

                var day = getFormattedDay(that.getDate(), zeroPaddedDay);
                var monthIndex = that.getMonth();
                var month = getFormattedMonth(monthIndex + 1, zeroPaddedMnth);
                var year = that.getFullYear();
                var wkDay = that.getDay();
                var hour = getFormattedHour(that.getHours(), zeroPaddedHr);
                var minute = getFormattedMinute(that.getMinutes(), zeroPaddedMin);
                var meridian = getMeridian(that.getHours());

                return {
                    ""day"": day, ""monthName"": monthNames[monthIndex], ""month"": month,
                    ""weekDay"": weekDays[wkDay], ""year"": year, ""hour"": hour, ""minute"": minute,
                    ""meridian"": meridian
                };
            },

            compareDate: function (d2) {     /// validates if caller is less than argument                            
                d2 = _isString(d2) ? new Date(d2) : d2;

                return !this.sameDate(d2)
                    &amp;&amp; typeof d2 != ""number""
                    ? that &lt; d2 : false;
            },

            sameDate: function (d) {
                return that.getFullYear() === d.getFullYear()
                    &amp;&amp; that.getDate() === d.getDate()
                    &amp;&amp; that.getMonth() === d.getMonth();
            },

            dateAfter: function (separator) {
                var fdate = this.formatDate();
                var separator = separator ? separator : ""-"";
                return fdate.year + separator + fdate.month + separator + (fdate.day + 1);
            }

        };

    };


    function _isString(obj) {
        var toString = Object.prototype.toString;
        return toString.call(obj) == '[object String]';
    }

    function checkSeparator(separator) {
        // NOT GENERIC ... NEEDS REVISION
        switch (separator) {
            case "" "": sep = separator; break;
            case "","": sep = "" ,""; break;
            default:
                sep = "" ""; break;
        }

        return sep;
    }

    function getFormattedHour(h, zeroPadded) {
        h = h % 12;
        h = h ? h : 12;    //  12 instead of 00
        return zeroPadded ? addZero(h) : h;
    }

    function getFormattedMinute(m, zeroPadded) {

        return zeroPadded ? addZero(m) : m;
    }

    function getFormattedDay(dd, zeroPadded) {

        return zeroPadded ? addZero(dd) : dd;
    }
    function getFormattedMonth(mm, zeroPadded) {

        return zeroPadded ? addZero(mm) : mm;
    }

    function getMeridian(hr) {

        return hr &gt;= 12 ? 'PM' : 'AM';
    }

    function addZero(i) {
        if (i &lt; 10) {
            i = ""0"" + i;
        }
        return i;
    }


    Date.prototype.getFormattedDate = fnDateProcessor;

} ());
</code></pre>
"
"54390552","5","<p>To remove a particular element or subsequent elements, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"" rel=""nofollow noreferrer"">Array.splice()</a> method works well.</p>

<p>The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements, and it returns the removed item(s).</p>

<p><strong>Syntax:</strong> <em>array.splice(index, deleteCount, item1, ....., itemX)</em></p>

<p>Here <code>index</code> is mandatory and rest arguments are optional.</p>

<p>For example:</p>

<pre><code>let arr = [1, 2, 3, 4, 5, 6];
arr.splice(2,1);
console.log(arr);
// [1, 2, 4, 5, 6]
</code></pre>

<p><strong>Note:</strong> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"" rel=""nofollow noreferrer"">Array.splice()</a> method can be used if you know the index of the element which you want to delete. But we may have a few more cases as mentioned below:</p>

<ol>
<li><p>In case you want to delete just last element, you can use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop"" rel=""nofollow noreferrer"">Array.pop()</a></p></li>
<li><p>In case you want to delete just first element, you can use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift"" rel=""nofollow noreferrer"">Array.shift()</a></p></li>
<li><p>If you know the element alone, but not the position (or index) of the element, and want to delete all matching elements using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"" rel=""nofollow noreferrer"">Array.filter()</a> method:</p>

<pre><code>let arr = [1, 2, 1, 3, 4, 1, 5, 1];

let newArr = arr.filter(function(val){
    return val !== 1;
});
//newArr =&gt; [2, 3, 4, 5]
</code></pre>

<p>Or by using the splice() method as:</p>

<pre><code>let arr = [1, 11, 2, 11, 3, 4, 5, 11, 6, 11];
    for (let i = 0; i &lt; arr.length-1; i++) {
       if ( arr[i] === 11) {
         arr.splice(i, 1);
       }
    }
    console.log(arr);
    // [1, 2, 3, 4, 5, 6]
</code></pre>

<p>Or suppose we want to delete <code>del</code> from the array <code>arr</code>:</p>

<pre><code>let arr = [1, 2, 3, 4, 5, 6];
let del = 4;
if (arr.indexOf(4) &gt;= 0) {
    arr.splice(arr.indexOf(4), 1)
}
</code></pre>

<p>Or</p>

<pre><code>let del = 4;
for(var i = arr.length - 1; i &gt;= 0; i--) {
    if(arr[i] === del) {
       arr.splice(i, 1);
    }
}
</code></pre></li>
<li><p>If you know the element alone but not the position (or index) of the element, and want to delete just very first matching element using splice() method:</p>

<pre><code>let arr = [1, 11, 2, 11, 3, 4, 5, 11, 6, 11];

for (let i = 0; i &lt; arr.length-1; i++) {
  if ( arr[i] === 11) {
    arr.splice(i, 1);
    break;
  }
}
console.log(arr);
// [1, 11, 2, 11, 3, 4, 5, 11, 6, 11]
</code></pre></li>
</ol>
"
"43963804","2","<p>We don't have append function for Array in javascript, but we have <strong>push</strong> and <strong>unshift</strong>, imagine you have the array below:</p>

<pre><code>var arr = [1, 2, 3, 4, 5];
</code></pre>

<p>and we like append a value to this array, we can do, arr.push(6) and it will add 6 to the end of the array:</p>

<pre><code>arr.push(6); // return [1, 2, 3, 4, 5, 6];
</code></pre>

<p>also we can use unshift, look at how we can apply this:</p>

<pre><code>arr.unshift(0); //return [0, 1, 2, 3, 4, 5];
</code></pre>

<p>They are main functions to add or append new values to the arrays.</p>
"
"51395499","6","<p>Simple solution would be use lodash's ceil function if you want to round up...</p>

<p><a href=""https://lodash.com/docs/4.17.10#ceil"" rel=""noreferrer"">https://lodash.com/docs/4.17.10#ceil</a></p>

<pre><code>_.round(6.001,2)
</code></pre>

<p>gives 6</p>

<pre><code>_.ceil(6.001, 2);
</code></pre>

<p>gives 6.01</p>

<pre><code>_.ceil(37.4929,2);
</code></pre>

<p>gives 37.5</p>

<pre><code>_.round(37.4929,2);
</code></pre>

<p>gives 37.49</p>
"
"54494086","2","<p>Take profit of reduce method as follows:</p>

<p>Case a) if you need to remove an element by index:</p>

<pre><code>function remove(arr, index) {
  return arr.reduce((prev, x, i) =&gt; prev.concat(i !== index ? [x] : []), []);
}
</code></pre>

<p>case b) if you need to remove an element by the value of the element (int):</p>

<pre><code>function remove(arr, value) {
  return arr.reduce((prev, x, i) =&gt; prev.concat(x !== value ? [x] : []), []);
}
</code></pre>

<p>So in this way we can return a new array (will be in a cool functional way - much better than using push or splice) with the element removed.</p>
"
"23646488","15","<h3>Automated</h3>

<pre><code>$(document).ready(function()
{
    $('#isAgeSelected').change(function()
    {
        alert( 'value =' + $('#chkSelect').attr('checked') );
    });
});
</code></pre>

<h3>HTML</h3>

<pre><code>&lt;b&gt; &lt;input type=""isAgeSelected"" id=""chkSelect"" /&gt; Age Check &lt;/b&gt;

&lt;br/&gt;&lt;br/&gt;

&lt;input type=""button"" id=""btnCheck"" value=""check"" /&gt;
</code></pre>

<h3>jQuery</h3>

<pre><code>$(document).ready(function()
{
    $('#btnCheck').click(function()
    {
        var isChecked = $('#isAgeSelected').attr('checked');

        if (isChecked == 'checked')
            alert('check-box is checked');
        else
            alert('check-box is not checked');
    })
});
</code></pre>

<p><strong>Ajax</strong></p>

<pre><code>function check()
{
    if (isAgeSelected())
        alert('check-box is checked');
    else
        alert('check-box is not checked');
}

function isAgeSelected()
{
    return ($get(""isAgeSelected"").checked == true);
}
</code></pre>
"
"45462036","6","<p>Running example of how it works:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var e = document.getElementById(""ddlViewBy"");
var val1 = e.options[e.selectedIndex].value;
var txt = e.options[e.selectedIndex].text;

document.write(""&lt;br /&gt;Selected option Value: ""+ val1);
document.write(""&lt;br /&gt;Selected option Text: ""+ txt);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;select id=""ddlViewBy""&gt;
  &lt;option value=""1""&gt;test1&lt;/option&gt;
  &lt;option value=""2""&gt;test2&lt;/option&gt;
  &lt;option value=""3""  selected=""selected""&gt;test3&lt;/option&gt;
&lt;/select&gt;</code></pre>
</div>
</div>
</p>

<p>Note: The values don't change as the dropdown is changed, if you require that functionality then an onClick change is to be implemented.</p>
"
"24336808","38","<p>I know this is an old post, and there are so many great answers already. For a little more completeness I figured I'd throw in another one using <a href=""https://angularjs.org/"" rel=""noreferrer"">AngularJS</a>. Of course, this only applies if you're using Angular, obviously, nonetheless I'd like to put it anyway.</p>

<p><code>angular.forEach</code> takes 2 arguments and an optional third argument. The first argument is the object (array) to iterate over, the second argument is the iterator function, and the optional third argument is the object context (basically referred to inside the loop as 'this'.</p>

<p>There are different ways to use the forEach loop of angular. The simplest and probably most used is</p>

<pre><code>var temp = [1, 2, 3];
angular.forEach(temp, function(item) {
    //item will be each element in the array
    //do something
});
</code></pre>

<p>Another way that is useful for copying items from one array to another is</p>

<pre><code>var temp = [1, 2, 3];
var temp2 = [];
angular.forEach(temp, function(item) {
    this.push(item); //""this"" refers to the array passed into the optional third parameter so, in this case, temp2.
}, temp2);
</code></pre>

<p>Though, you don't have to do that, you can simply do the following and it's equivalent to the previous example:</p>

<pre><code>angular.forEach(temp, function(item) {
    temp2.push(item);
});
</code></pre>

<p>Now there are pros and cons of using the <code>angular.forEach</code> function as opposed to the built in vanilla-flavored <code>for</code> loop.</p>

<p><strong>Pros</strong></p>

<ul>
<li>Easy readability</li>
<li>Easy writability</li>
<li>If available, <code>angular.forEach</code> will use the ES5 forEach loop. Now, I will get to efficientcy in the cons section, as the forEach loops are <em>much</em> slower than the for loops. I mention this as a pro because it's nice to be consistent and standardized.</li>
</ul>

<p>Consider the following 2 nested loops, which do exactly the same thing. Let's say that we have 2 arrays of objects and each object contains an array of results, each of which has a Value property that's a string (or whatever). And let's say we need to iterate over each of the results and if they're equal then perform some action: </p>

<pre><code>angular.forEach(obj1.results, function(result1) {
    angular.forEach(obj2.results, function(result2) {
        if (result1.Value === result2.Value) {
            //do something
        }
    });
});

//exact same with a for loop
for (var i = 0; i &lt; obj1.results.length; i++) {
    for (var j = 0; j &lt; obj2.results.length; j++) {
        if (obj1.results[i].Value === obj2.results[j].Value) {
            //do something
        }
    }
}
</code></pre>

<p>Granted this is a very simple hypothetical example, but I've written triple embedded for loops using the second approach and it was <em>very</em> hard to read, and write for that matter.</p>

<p><strong>Cons</strong></p>

<ul>
<li>Efficiency. <code>angular.forEach</code>, and the native <code>forEach</code>, for that matter, are both <em>so much</em> slower than the normal <code>for</code> loop....about <a href=""http://jsperf.com/angular-foreach-vs-native-for-loop/3"" rel=""noreferrer"">90% slower</a>. So for large data sets, best to stick to the native <code>for</code> loop.</li>
<li>No break, continue, or return support. <code>continue</code> is actually supported by ""<a href=""https://github.com/angular/angular.js/issues/263"" rel=""noreferrer"">accident</a>"", to continue in an <code>angular.forEach</code> you simple put a <code>return;</code> statement in the function like <code>angular.forEach(array, function(item) { if (someConditionIsTrue) return; });</code> which will cause it to continue out of the function for that iteration. This is also due to the fact that the native <code>forEach</code> does not support break or continue either.</li>
</ul>

<p>I'm sure there's various other pros and cons as well, and please feel free to add any that you see fit. I feel that, bottom line, if you need efficiency, stick with just the native <code>for</code> loop for your looping needs. But, if your datasets are smaller and a some efficiency is okay to give up in exchange for readability and writability, then by all means throw an <code>angular.forEach</code> in that bad boy.</p>
"
"48298499","1","<p>You can use push method.</p>

<pre><code>Array.prototype.append = function(destArray){
     destArray = destArray || [];
     this.push.call(this,...destArray);
     return this;
}
var arr = [1,2,5,67];
var arr1 = [7,4,7,8];
console.log(arr.append(arr1));// [7, 4, 7, 8, 1, 4, 5, 67, 7]
console.log(arr.append(""Hola""))//[1, 2, 5, 67, 7, 4, 7, 8, ""H"", ""o"", ""l"", ""a""]
</code></pre>
"
"54574842","2","<p>The best solution, in order to replace any character we use the <code>indexOf()</code>, <code>includes()</code>, and <code>substring()</code> functions to replace the matched string with the provided string in the current string.</p>

<ul>
<li>The <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf"" rel=""nofollow noreferrer""><code>String.indexOf()</code></a> function is to find the <code>n</code><sup>th</sup> match index position.</li>
<li>The <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes"" rel=""nofollow noreferrer""><code>String.includes()</code></a> method determines whether one string may be found within another string, returning true or false as appropriate.</li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring"" rel=""nofollow noreferrer""><code>String.substring()</code></a> function is to get the parts of String(<code>preceding</code>,<code>exceding</code>). Add the replace String in-between these parts to generate final return String.</li>
</ul>

<p>The following function allows to use any character.
<br />where as <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"" rel=""nofollow noreferrer""><code>RegExp</code></a> will not allow some special character like <code>**</code> and some characters need to be escaped, like <code>$</code>.</p>

<pre class=""lang-javascript prettyprint-override""><code>String.prototype.replaceAllMatches = function(obj) { // Obj format: { 'matchkey' : 'replaceStr' }
    var retStr = this;
    for (var x in obj) {
        //var matchArray = retStr.match(new RegExp(x, 'ig'));
        //for (var i = 0; i &lt; matchArray.length; i++) {
        var prevIndex = retStr.indexOf(x); // matchkey = '*', replaceStr = '$*' While loop never ends.
        while (retStr.includes(x)) {
            retStr = retStr.replaceMatch(x, obj[x], 0);
            var replaceIndex = retStr.indexOf(x);
            if( replaceIndex &lt;  prevIndex + (obj[x]).length) {
                break;
            } else {
                prevIndex = replaceIndex;
            }
        }
    }
    return retStr;
};
String.prototype.replaceMatch = function(matchkey, replaceStr, matchIndex) {
    var retStr = this, repeatedIndex = 0;
    //var matchArray = retStr.match(new RegExp(matchkey, 'ig'));
    //for (var x = 0; x &lt; matchArray.length; x++) {
    for (var x = 0; (matchkey != null) &amp;&amp; (retStr.indexOf(matchkey) &gt; -1); x++) {
        if (repeatedIndex == 0 &amp;&amp; x == 0) {
            repeatedIndex = retStr.indexOf(matchkey);
        } else { // matchIndex &gt; 0
            repeatedIndex = retStr.indexOf(matchkey, repeatedIndex + 1);
        }
        if (x == matchIndex) {
            retStr = retStr.substring(0, repeatedIndex) + replaceStr + retStr.substring(repeatedIndex + (matchkey.length));
            matchkey = null; // To break the loop.
        }
    }
    return retStr;
};
</code></pre>

<hr>

<p>We can also use the regular expression object for matching text with a pattern. The following are functions which will use the regular expression object.</p>

<p>You will get SyntaxError when you are using an <em>invalid</em> regular expression pattern like <code>'**'</code>.</p>

<ul>
<li>The <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace"" rel=""nofollow noreferrer""><code>String.replace()</code></a> function is used to replace the specified String with the given String.</li>
<li>The <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match"" rel=""nofollow noreferrer""><code>String.match()</code></a> function is to find how many time the string is repeated.</li>
<li>The <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test"" rel=""nofollow noreferrer""><code>RegExp.prototype.test</code></a> method executes a search for a match between a regular expression and a specified string. Returns true or false.</li>
</ul>

<pre class=""lang-javascript prettyprint-override""><code>String.prototype.replaceAllRegexMatches = function(obj) { // Obj format: { 'matchkey' : 'replaceStr' }
    var retStr = this;
    for (var x in obj) {
        retStr = retStr.replace(new RegExp(x, 'ig'), obj[x]);
    }
    return retStr;
};
</code></pre>

<blockquote>
  <p>Note that regular expressions are written without quotes.</p>
</blockquote>

<hr>

<p>Examples to use the above functions:</p>

<pre class=""lang-javascript prettyprint-override""><code>var str = ""yash yas $dfdas.**"";
console.log('String: ', str);

// No need to escape any special character
console.log('Index matched replace: ', str.replaceMatch('as', '*', 2));
console.log('Index Matched replace: ', str.replaceMatch('y', '~', 1));
console.log('All Matched replace: ', str.replaceAllMatches({'as': '**', 'y':'Y', '$':'-'}));
console.log('All Matched replace : ', str.replaceAllMatches({'**': '~~', '$':'&amp;$&amp;', '&amp;':'%', '~':'&gt;'}));

// You need to escape some special Characters
console.log('REGEX all matched replace: ', str.replaceAllRegexMatches({'as' : '**', 'y':'Y', '\\$':'-'}));
</code></pre>

<p>Result:</p>

<pre class=""lang-none prettyprint-override""><code>String:  yash yas $dfdas.**
Index Matched replace:  yash yas $dfd*.**
Index Matched replace:  yash ~as $dfdas.**

All Matched replace:  Y**h Y** -dfd**.**
All Matched replace:  yash yas %$%dfdas.&gt;&gt;

REGEX All Matched replace:  Y**h Y** -dfd**.**
</code></pre>

<hr>
"
"51946155","1","<p>This answer is more about speed. </p>

<pre><code>var precalculatedPrecisions = [1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10];

function round(num, _prec) {
    _precision = precalculatedPrecisions[_prec]
    return Math.round(num * _precision + 1e-14) / _precision ;
}
</code></pre>

<p><a href=""https://jsperf.com/round-with-precisions-diffs"" rel=""nofollow noreferrer"">jsPerf</a> about this.</p>
"
"24639060","11","<p>In case you use <a href=""http://en.wikipedia.org/wiki/ASP.NET_MVC_Framework"" rel=""noreferrer"">ASP.NET MVC</a>, generate many checkboxes and later have <strong><em>to select/unselect all</em></strong> using JavaScript you can do the following.</p>

<p><strong>HTML</strong></p>

<pre><code>@foreach (var item in Model)
{
    @Html.CheckBox(string.Format(""ProductId_{0}"", @item.Id), @item.IsSelected)
}
</code></pre>

<p><strong>JavaScript</strong></p>

<pre><code>function SelectAll() {       
        $('input[id^=""ProductId_""]').each(function () {          
            $(this).prop('checked', true);
        });
    }

    function UnselectAll() {
        $('input[id^=""ProductId_""]').each(function () {
            $(this).prop('checked', false);
        });
    }
</code></pre>
"
"24911172","29","<p>There are various way to loop through array in JavaScript.  </p>

<p><strong>Generic loop:</strong></p>

<pre><code>var i;
for (i = 0; i &lt; substr.length; ++i) {
    // Do something with `substr[i]`
}
</code></pre>

<p><strong>ES5's forEach:</strong></p>

<pre><code>substr.forEach(function(item) {
    // Do something with `item`
});
</code></pre>

<p><strong>jQuery.each:</strong></p>

<pre><code>jQuery.each(substr, function(index, item) {
    // Do something with `item` (or `this` is also `item` if you like)
});
</code></pre>

<p>Have a look <a href=""https://stackoverflow.com/questions/3943494/how-to-loop-through-array-in-jquery"">this</a> for detailed information or you can also check <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in"" rel=""noreferrer"">MDN</a> for looping through an array in JavaScript &amp; using jQuery check <a href=""http://api.jquery.com/jquery.each/"" rel=""noreferrer"">jQuery for each</a>.</p>
"
"52209469","2","<p>This worked pretty well for me when wanting to always round up to a certain decimal.  The key here is that we will always be rounding up with the Math.ceil function.</p>

<p>You could conditionally select ceil or floor if needed.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>     /**
     * Possibility to lose precision at large numbers
     * @param number
     * @returns Number number
     */
    var roundUpToNearestHundredth = function(number) {

        // Ensure that we use high precision Number
        number = Number(number);

        // Save the original number so when we extract the Hundredth decimal place we don't bit switch or lose precision
        var numberSave = Number(number.toFixed(0));

        // Remove the ""integer"" values off the top of the number
        number = number - numberSave;

        // Get the Hundredth decimal places
        number *= 100;

        // Ceil the decimals.  Therefore .15000001 will equal .151, etc.
        number = Math.ceil(number);

        // Put the decimals back into their correct spot
        number /= 100;

        // Add the ""integer"" back onto the number
        return number + numberSave;

    };

console.log(roundUpToNearestHundredth(6132423.1200000000001))</code></pre>
</div>
</div>
</p>
"
"50405988","14","<p>As <code>toISOString()</code> will only return current UTC time , not local time. We have to make a date by using '.toString()' function to get date in <code>yyyy-MM-dd</code> format like</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>document.write(new Date(new Date().toString().split('GMT')[0]+' UTC').toISOString().split('T')[0]);</code></pre>
</div>
</div>
</p>

<p><strong>To get date and time into in <code>yyyy-MM-ddTHH:mm:ss</code> format</strong></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>document.write(new Date(new Date().toString().split('GMT')[0]+' UTC').toISOString().split('.')[0]);</code></pre>
</div>
</div>
</p>

<p><strong>To get date and time into in <code>yyyy-MM-dd HH:mm:ss</code> format</strong></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>document.write(new Date(new Date().toString().split('GMT')[0]+' UTC').toISOString().split('.')[0].replace('T',' '));</code></pre>
</div>
</div>
</p>
"
"25581441","8","<p>I would actually prefere the <code>change</code> event.</p>

<pre><code>$('#isAgeSelected').change(function() {
    $(""#txtAge"").toggle(this.checked);
});
</code></pre>

<p><a href=""http://jsfiddle.net/5udtC/6913/"" rel=""nofollow"">Demo Fiddle</a></p>
"
"54377260","8","<blockquote>
  <p>parseFloat(""1.555"").toFixed(2); // Returns 1.55 instead of 1.56.</p>
</blockquote>

<p>1.55 is the absolute correct result, because there exists no exact representation of 1.555 in the computer. If reading 1.555 it is rounded to the nearest possible value = 1.55499999999999994 (64 bit float). And rounding this number by toFixed(2) results in 1.55.</p>

<p>All other functions provided here give fault result, if the input is 1.55499999999999.</p>

<p>Solution: Append the digit ""5"" before scanning to rounding up (more exact: rounding away from 0) the number. Do this only, if the number is really a float (has a decimal point).</p>

<pre><code>parseFloat(""1.555""+""5"").toFixed(2); // Returns 1.56
</code></pre>
"
"55201388","2","<p>The big challenge on this seemingly simple task is that we want it to yield psychologically expected results even if the input contains minimal rounding errors to start with (not mentioning the errors which will happen within our calculation). If we know that the real result is exactly 1.005, we expect that rounding to two digits yields 1.01, even if the 1.005 is the result of a large computation with loads of rounding errors on the way.</p>

<p>The problem becomes even more obvious when dealing with <code>floor()</code> instead of <code>round()</code>. For example, when cutting everything away after the last two digits behind the dot of 33.3, we would certainly <em>not</em> expect to get 33.29 as a result, but that is what happens:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>console.log(Math.floor(33.3 * 100) / 100)</code></pre>
</div>
</div>
</p>

<p>In simple cases, the solution is to perform calculation on strings instead of floating point numbers, and thus avoid rounding errors completely. However, this option fails at the first non-trivial mathematical operation (including most divsions), and it is slow.</p>

<p>When operating on floating point numbers, the solution is to introduce a parameter which names the amount by which we are willing to deviate from the actual computation result, in order to output the psychologically expected result.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var round = function(num, digits = 2, compensateErrors = 2) {
  if (num &lt; 0) {
    return -this.round(-num, digits, compensateErrors);
  }
  const pow = Math.pow(10, digits);
  return (Math.round(num * pow * (1 + compensateErrors * Number.EPSILON)) / pow);
}

/* --- testing --- */

console.log(""Edge cases mentioned in this thread:"")
var values = [ 0.015, 1.005, 5.555, 156893.145, 362.42499999999995, 1.275, 1.27499, 1.2345678e+2, 2.175, 5.015, 58.9 * 0.15 ];
values.forEach((n) =&gt; {
  console.log(n + "" -&gt; "" + round(n));
  console.log(-n + "" -&gt; "" + round(-n));
});

console.log(""\nFor numbers which are so large that rounding cannot be performed anyway within computation precision, only string-based computation can help."")
console.log(""Standard: "" + round(1e+19));
console.log(""Compensation = 1: "" + round(1e+19, 2, 1));
console.log(""Effectively no compensation: "" + round(1e+19, 2, 0.4));</code></pre>
</div>
</div>
</p>

<p>Note: Internet Explorer does not know <code>Number.EPSILON</code>. If you are in the unhappy position of still having to support it, you can use a shim, or just define the constant yourself for that specific browser family.</p>
"
"52778739","5","<p>I have a bit different view of how to achieve this. I'm usually doing this with the following approach (it is an easier way and works with every browser as far as I know):</p>

<pre><code>&lt;select onChange=""functionToCall(this.value);"" id=""ddlViewBy""&gt;
  &lt;option value=""value1""&gt;Text one&lt;/option&gt;
  &lt;option value=""value2""&gt;Text two&lt;/option&gt;
  &lt;option value=""value3""&gt;Text three&lt;/option&gt;
  &lt;option value=""valueN""&gt;Text N&lt;/option&gt;
&lt;/select&gt;
</code></pre>
"
"55521592","16","<p>FINAL UPDATE:</p>
<p>Leaving this answer here for posterity, but I would recommend using @AmrAli's adaptation of the DecimalPrecision function, as it is equipped to handle exponential notation as well. I had originally sought to avoid any string conversion/manipulation of any kind for performance reasons, but there is virtually no difference in performance with his implementation.</p>
<p>EDIT 8/22/2020: I think it should be clarified here that the goal of these efforts is not to completely eliminate the inherent rounding errors caused by the floating point data type, as that will never be possible without switching to a data type that is actually storing the value as a base10 (decimal). The goal really should be to push the inaccuracies as far out to the edge as possible, so that you can perform mathematical operations on a given value without producing the bug. The moment your value hits the absolute edge, where simply invoking the value would cause JS to produce the bug, either before or after you've manipulated it, there's nothing more you could do to alleviate that. For example, if you instantiate the value 0.014999999999999999, JS will immediately round it to 0.015. Therefore if you passed that value to any of these functions, you are actually passing 0.015. At that point you couldn't even convert to string first and then manipulate it, the value would have to be instantiated as a string from the start for that to work. The goal, and only reasonable expectation, of any functions created to alleviate this bug is simply to allow for mathematical operations to be performed on floating point values while pushing the bug all the way out to the edge where either the starting value, or resulting value would produce the bug simply by being invoked anyway. The only other alternative solutions would be to store the whole numbers and decimal values independently, both as integers, so that they are only ever invoked as such, or to always store the value as a string and use a combination of string manipulation and integer based math to perform operations on it.</p>
<p>After running through various iterations of all the possible ways to achieve true accurate decimal rounding precision, it is clear that the most accurate and efficient solution is to use Number.EPSILON. This provides a true mathematical solution to the problem of floating point math precision. It can be easily polyfilled as shown here: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON</a> to support all of the last remaining IE users (then again maybe we should stop doing that).</p>
<p>Adapted from the solution provided here: <a href=""https://stackoverflow.com/a/48850944/6910392"">https://stackoverflow.com/a/48850944/6910392</a></p>
<p>A simple drop in solution that provides accurate decimal rounding, flooring, and ceiling, with an optional precision variable without adding a whole library.</p>
<p>05-19-2020 UPDATE: As Sergey noted in the comments, there is a limitation to this (or any) method that's worth pointing out. In the case of numbers like 0.014999999999999999, you will still experience inaccuracies which are the result of hitting the absolute edge of accuracy limitations for floating point value storage. There is no math or other solution that can be applied to account for that, as the value itself is immediately evaluated as 0.015. You can confirm this by simply invoking that value by itself in the console. Due to this limitation, it would not even be possible to use string manipulation to reduce this value, as its string representation is simply &quot;0.015&quot;. Any solution to account for this would need to be applied logically at the source of the data before ever accepting the value into a script, eg restricting the character length of a field etc. That would be a consideration that would need to be taken into account on a case by case basis to determine the best approach.</p>
<p>08-19-2020 UPDATE: Per Amr's comment, the ceil and floor functions will produce undesired results when the input value is an integer. This is due to the addition applied to the input with Number.EPSILON in order to offset the expected float inaccuracy. The function has been updated to check if the input value is an integer and return the value unchanged, as that is the correct result of either function when applied to a whole number.</p>
<p>*Note: This issue also reveals that while the ceil and floor functions still require the application of the Number.EPSILON adjustment, they do produce undesirable results when applied to a value where the number of decimals in the input number is lower than the number of decimals requested for the output (p). For example, ceil(17.1, 5) should return 17.1 in relation to expected &quot;ceil&quot; function behavior when applied to whole numbers in mathematics, where all decimal places after &quot;1&quot; are assumed to be 0. To correct for this, I've added an additional function check to identify if the number of decimals in the input number is lower than the requested output decimals, and return the number unchanged, just as with whole numbers.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var DecimalPrecision = (function(){
        if (Number.EPSILON === undefined) {
            Number.EPSILON = Math.pow(2, -52);
        }
        if(Number.isInteger === undefined){
            Number.isInteger = function(value) {
                return typeof value === 'number' &amp;&amp; 
                isFinite(value) &amp;&amp; 
                Math.floor(value) === value;
            };
        }
        this.isRound = function(n,p){
            let l = n.toString().split('.')[1].length;
            return (p &gt;= l);
        }
        this.round = function(n, p=2){
            if(Number.isInteger(n) || this.isRound(n,p))
                return n;
            let r = 0.5 * Number.EPSILON * n;
            let o = 1; while(p-- &gt; 0) o *= 10;
            if(n&lt;0)
                o *= -1;
            return Math.round((n + r) * o) / o;
        }
        this.ceil = function(n, p=2){
            if(Number.isInteger(n) || this.isRound(n,p))
                return n;
            let r = 0.5 * Number.EPSILON * n;
            let o = 1; while(p-- &gt; 0) o *= 10;
            
            return Math.ceil((n + r) * o) / o;
        }
        this.floor = function(n, p=2){
            if(Number.isInteger(n) || this.isRound(n,p))
                return n;
            let r = 0.5 * Number.EPSILON * n;
            let o = 1; while(p-- &gt; 0) o *= 10;
            
            return Math.floor((n + r) * o) / o;
        }
        return this;
    })();
    console.log(DecimalPrecision.round(1.005));
    console.log(DecimalPrecision.ceil(1.005));
    console.log(DecimalPrecision.floor(1.005));
    console.log(DecimalPrecision.round(1.0049999));
    console.log(DecimalPrecision.ceil(1.0049999));
    console.log(DecimalPrecision.floor(1.0049999));
    console.log(DecimalPrecision.round(2.175495134384,7));
    console.log(DecimalPrecision.round(2.1753543549,8));
    console.log(DecimalPrecision.round(2.1755465135353,4));
    console.log(DecimalPrecision.ceil(17,4));
    console.log(DecimalPrecision.ceil(17.1,4));
    console.log(DecimalPrecision.ceil(17.1,15));</code></pre>
</div>
</div>
</p>
"
"55836745","2","<p>Here's my solution to this problem:<br></p>

<pre><code>function roundNumber(number, precision = 0) {
var num = number.toString().replace("","", """");
var integer, decimal, significantDigit;

if (num.indexOf(""."") &gt; 0 &amp;&amp; num.substring(num.indexOf(""."") + 1).length &gt; precision &amp;&amp; precision &gt; 0) {
    integer = parseInt(num).toString();
    decimal = num.substring(num.indexOf(""."") + 1);
    significantDigit = Number(decimal.substr(precision, 1));

    if (significantDigit &gt;= 5) {
        decimal = (Number(decimal.substr(0, precision)) + 1).toString();
        return integer + ""."" + decimal;
    } else {
        decimal = (Number(decimal.substr(0, precision)) + 1).toString();
        return integer + ""."" + decimal;
    }
}
else if (num.indexOf(""."") &gt; 0) {
    integer = parseInt(num).toString();
    decimal = num.substring(num.indexOf(""."") + 1);
    significantDigit = num.substring(num.length - 1, 1);

    if (significantDigit &gt;= 5) {
        decimal = (Number(decimal) + 1).toString();
        return integer + ""."" + decimal;
    } else {            
        return integer + ""."" + decimal;
    }
} 

return number;
}
</code></pre>
"
"53170486","2","<p>If you're looking for a lot more granular control over the date formats, I thoroughly recommend checking out date-FNS. Terrific library - much smaller than moment.js and it's function based approach make it much faster then other class based libraries. Provide large number of operations needed over dates. </p>

<p><a href=""https://date-fns.org/docs/Getting-Started"" rel=""nofollow noreferrer"">https://date-fns.org/docs/Getting-Started</a></p>
"
"26481205","9","<p>For example, I used in a Firefox console:</p>
<pre><code>[].forEach.call(document.getElementsByTagName('pre'), function(e){ 
   console.log(e);
})
</code></pre>
<p>You can use querySelectorAll to get same result</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>document.querySelectorAll('pre').forEach( (e) =&gt; { 
   console.log(e.textContent);
})</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;pre&gt;text 1&lt;/pre&gt;
&lt;pre&gt;text 2&lt;/pre&gt;
&lt;pre&gt;text 3&lt;/pre&gt;</code></pre>
</div>
</div>
</p>
"
"26805879","1","<p>In case if you need to use CSS class as jQuery selector you can do following:</p>

<pre><code>$(document).ready(function () {
        $('.myOptionCheckbox').change(function () {            
            if ($(this).prop('checked') == true) {
                console.log(""checked"");           
            }
            else {
                console.log(""unchecked"");                
            }
        });
    });
</code></pre>

<p>It works fine for <code>checkboxes</code> and <code>radioboxes</code> as well.</p>
"
"55663687","15","<p>Oftentimes it's better to just create a new array with the <code>filter</code> function.</p>

<pre><code>let array = [1,2,3,4];
array = array.filter(i =&gt; i !== 4); // [1,2,3]
</code></pre>

<p>This also improves readability IMHO. I'm not a fan of <code>slice</code>, although it know sometimes you should go for it.</p>
"
"27126711","34","<pre><code>$(document).ready(function() {    
    $('#agecheckbox').click(function() {
        if($(this).is("":checked""))
        {
            $('#agetextbox').show();
        } else {
            $('#agetextbox').hide();
        }
    });
});
</code></pre>
"
"55698996","6","<p>I use split and join or this funcion</p>

<pre><code>function replaceAll( text, busca, reemplaza ){
  while (text.toString().indexOf(busca) != -1)
      text = text.toString().replace(busca,reemplaza);
  return text;
}
</code></pre>
"
"57215366","0","<p>I created this function, for rounding a number. The value can be a string (ex. '1.005') or a number 1.005 that will be 1 by default and if you specify the decimal to be 2, the result will be 1.01 </p>

<pre><code>round(value: string | number, decimals: number | string = ""0""): number | null {
    return +( Math.round(Number(value + ""e+""+decimals)) + ""e-"" + decimals);
}
</code></pre>

<p>Usage: round(1.005, 2) // 1.01
or 
Usage: round('1.005', 2) //1.01   </p>
"
"27840946","24","<p>Toggle: 0/1 or else</p>

<pre><code>&lt;input type=""checkbox"" id=""nolunch"" /&gt;
&lt;input id=""checklunch /&gt;""

    $('#nolunch').change(function () {
    if ($(this).is(':checked')) {
        $('#checklunch').val('1');
    };
    if ($(this).is(':checked') == false) {
        $('#checklunch').val('0');
    };
});
</code></pre>
"
"56052581","2","<p>This should work.</p>

<pre><code>String.prototype.replaceAll = function (search, replacement) {
    var str1 = this.replace(search, replacement);
    var str2 = this;
    while(str1 != str2) {
        str2 = str1;
        str1 = str1.replace(search, replacement);
    }
    return str1;
}
</code></pre>

<p>Example:</p>

<pre><code>Console.log(""Steve is the best character in Minecraft"".replaceAll(""Steve"", ""Alex""));
</code></pre>
"
"57591474","1","<p>Quick helper function where <code>rounging</code> is You default rounding:
let rounding=4;</p>

<pre><code>let round=(number)=&gt;{ let multiply=Math.pow(10,rounding);  return Math.round(number*multiply)/multiply};

console.log(round(0.040579431));
</code></pre>

<p>=> 0.0406</p>
"
"28878653","14","<p>When you checked a checkbox like;</p>

<pre><code>$('.className').attr('checked', 'checked')
</code></pre>

<p>it might not be enough. You should also call the function below;</p>

<pre><code>$('.className').prop('checked', 'true')
</code></pre>

<p>Especially when you removed the checkbox checked attribute.</p>
"
"29631160","1","<p>This function is alternative and stable:</p>

<pre><code>$('#isAgeSelected').context.checked
(return True/False)
</code></pre>

<p><strong><em>Example:</em></strong> </p>

<pre><code>if($('#isAgeSelected').context.checked){ //if Checkbox is checked then bla bla..
    /*.....*/
}else{
    /*.....*/
}
</code></pre>
"
"58753241","0","<p>To get just the date then it is built in to javascript:</p>

<pre><code>new Date();
</code></pre>

<p>If you are looking for date formatting and you are anyways using the <a href=""https://www.telerik.com/kendo-jquery-ui"" rel=""nofollow noreferrer"">Kendo JQuery UI</a> library for your site then I suggest using the built in kendo function:</p>

<pre><code>kendo.toString(new Date(), ""yyMMdd""); //or any other typical date format
</code></pre>

<p>For a full list of supported formats <a href=""https://docs.telerik.com/kendo-ui/globalization/intl/dateformatting"" rel=""nofollow noreferrer"">see here</a></p>
"
"30635331","23","<p>I think it will be the simple one </p>

<pre><code>$('#isAgeSelected').change(function() {
    if($(this).is("":checked"")) {
        $('#txtAge').show();
    }
else{
        $('#txtAge').hide();
    }                                          
});
</code></pre>
"
"31016461","1","<pre><code>$('#chk').change(function() { 
    (this.checked)? alert('true') : alert('false');
});



($('#chk')[0].checked)? alert('true') : alert('false');
</code></pre>
"
"59296425","1","<p>Slight modification of <a href=""https://stackoverflow.com/a/34591063/144088"">this answer</a> that seems to work well.</p>

<p><strong>Function</strong></p>

<pre><code>function roundToStep(value, stepParam) {
   var step = stepParam || 1.0;
   var inv = 1.0 / step;
   return Math.round(value * inv) / inv;
}
</code></pre>

<p><strong>Usage</strong></p>

<pre><code>roundToStep(2.55) = 3
roundToStep(2.55, 0.1) = 2.6
roundToStep(2.55, 0.01) = 2.55
</code></pre>
"
"31106634","2","<p>For older versions of jQuery, I had to use following,</p>

<pre><code>$('#change_plan').live('click', function() {
     var checked = $('#change_plan').attr('checked');
     if(checked) {
          //Code       
     }
     else {
          //Code       
     }
});
</code></pre>
"
"56371755","7","<p>Check this answer may it will help and I used in my project.</p>

<pre><code>function replaceAll(searchString, replaceString, str) {
   return str.split(searchString).join(replaceString);
}
replaceAll('abc', '',""Test abc test test abc test test test abc test test abc"" ); // ""Test  test test  test test test  test test ""
</code></pre>
"
"31646880","19","<p>There's no inbuilt ability to break in <code>forEach</code>. To interrupt execution use the <code>Array#some</code> like below:</p>

<pre><code>[1,2,3].some(function(number) {
    return number === 1;
});
</code></pre>

<p>This works because <code>some</code> returns true as soon as any of the callbacks, executed in array order, returns true, short-circuiting the execution of the rest. 
<a href=""https://stackoverflow.com/questions/2641347/how-to-short-circuit-array-foreach-like-calling-break"">Original Answer</a>
see Array prototype for <a href=""http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.17"" rel=""noreferrer"">some</a></p>
"
"56989553","1","<p>You can do it without Regex, but you need to be careful if the replacement text contains the search text. </p>

<p>e.g. </p>

<pre><code>replaceAll(""nihIaohi"", ""hI"", ""hIcIaO"", true)
</code></pre>

<p>So here is a proper variant of replaceAll, including string-prototype:</p>

<pre><code>function replaceAll(str, find, newToken, ignoreCase)
{
    let i = -1;

    if (!str)
    {
        // Instead of throwing, act as COALESCE if find == null/empty and str == null
        if ((str == null) &amp;&amp; (find == null))
            return newToken;

        return str;
    }

    if (!find) // sanity check 
        return str;

    ignoreCase = ignoreCase || false;
    find = ignoreCase ? find.toLowerCase() : find;

    while ((
        i = (ignoreCase ? str.toLowerCase() : str).indexOf(
            find, i &gt;= 0 ? i + newToken.length : 0
        )) !== -1
    )
    {
        str = str.substring(0, i) +
            newToken +
            str.substring(i + find.length);
    } // Whend 

    return str;
}
</code></pre>

<p>Or, if you want to have a string-prototype function: </p>

<pre><code>String.prototype.replaceAll = function (find, replace) {
    let str = this;

    let i = -1;

    if (!str)
    {
        // Instead of throwing, act as COALESCE if find == null/empty and str == null
        if ((str == null) &amp;&amp; (find == null))
            return newToken;

        return str;
    }

    if (!find) // sanity check 
        return str;

    ignoreCase = ignoreCase || false;
    find = ignoreCase ? find.toLowerCase() : find;

    while ((
        i = (ignoreCase ? str.toLowerCase() : str).indexOf(
            find, i &gt;= 0 ? i + newToken.length : 0
        )) !== -1
    )
    {
        str = str.substring(0, i) +
            newToken +
            str.substring(i + find.length);
    } // Whend 

    return str;
};
</code></pre>
"
"57626233","2","<p>You can extend the array object to define a custom delete function as follows:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let numbers = [1,2,4,4,5,3,45,9];

numbers.delete = function(value){
    var indexOfTarget = this.indexOf(value)

    if(indexOfTarget !== -1)
    {
        console.log(""array before delete "" + this)
        this.splice(indexOfTarget, 1)
        console.log(""array after delete "" + this)
    }
    else{
        console.error(""element "" + value + "" not found"")
    }
}
numbers.delete(888)
// Expected output:
// element 888 not found
numbers.delete(1)

// Expected output;
// array before delete 1,2,4,4,5,3,45,9
// array after delete 2,4,4,5,3,45,9</code></pre>
</div>
</div>
</p>
"
"32159803","27","<p>Though you have proposed a JavaScript solution for your problem (displaying a <code>textbox</code> when a <code>checkbox</code> is <code>checked</code>), this problem could be solved <strong>just by css</strong>. With this approach, your form works for users who have disabled JavaScript.</p>

<p>Assuming that you have the following HTML:</p>

<pre><code>&lt;label for=""show_textbox""&gt;Show Textbox&lt;/label&gt;
&lt;input id=""show_textbox"" type=""checkbox"" /&gt;
&lt;input type=""text"" /&gt;
</code></pre>

<p>You can use the following CSS to achieve the desired functionality:</p>

<pre><code> #show_textbox:not(:checked) + input[type=text] {display:none;}
</code></pre>

<p>For other scenarios, you may think of appropriate CSS selectors.</p>

<p><a href=""https://jsfiddle.net/gLztyn9x/4/"" rel=""noreferrer"" title=""fiddle"">Here is a Fiddle to demonstrate this approach</a>.</p>
"
"32182172","48","<p>This is some different method to do the same thing:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(document).ready(function (){

    $('#isAgeSelected').click(function() {
        // $(""#txtAge"").toggle(this.checked);

        // Using a pure CSS selector
        if ($(this.checked)) {
            alert('on check 1');
        };

        // Using jQuery's is() method
        if ($(this).is(':checked')) {
            alert('on checked 2');
        };

        //  // Using jQuery's filter() method
        if ($(this).filter(':checked')) {
            alert('on checked 3');
        };
    });
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""http://code.jquery.com/jquery-1.9.1.js""&gt;&lt;/script&gt;
&lt;input type=""checkbox"" id=""isAgeSelected""/&gt;
&lt;div id=""txtAge"" style=""display:none""&gt;Age is something&lt;/div&gt;</code></pre>
</div>
</div>
</p>
"
"57744880","6","<h1>Remove single element</h1>

<pre><code>function removeSingle(array, element) {
    const index = array.indexOf(element)
    if (index &gt;= 0) {
        array.splice(index, 1)
    }
}
</code></pre>

<h1>Remove multiple elements, in-place</h1>

<p>This is more complicated to ensure the algorithm runs in O(N) time.</p>

<pre><code>function removeAll(array, element) {
    let newLength = 0
    for (const elem of array) {
        if (elem !== number) {
            array[newLength++] = elem
        }
    }
    array.length = newLength
}
</code></pre>

<h1>Remove multiple elements, creating new object</h1>

<pre><code>array.filter(elem =&gt; elem !== number)
</code></pre>
"
"59968055","1","<p>I don't know if I'm the one that doesn't get the question right, but this just worked for me:
Use an onchange() event in your html, eg.</p>
<pre><code>&lt;select id=&quot;numberToSelect&quot; onchange=&quot;selectNum&quot;&gt;
    &lt;option value=&quot;1&quot;&gt;One&lt;/option&gt;
    &lt;option value=&quot;2&quot;&gt;Two&lt;/option&gt;
    &lt;option value=&quot;3&quot;&gt;Three&lt;/option&gt;
&lt;/select&gt;
</code></pre>
<p>//javascript</p>
<pre><code>function selectNum(){
    var strUser = numberToSelect.value;
}
</code></pre>
<p>This will give you whatever value is on the select dropdown per click</p>
"
"57982939","8","<p>You can create an index with an all accessors example:</p>

<pre><code>&lt;div &gt;
&lt;/div&gt;
</code></pre>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function getIndex($id){
  return (
    this.removeIndex($id)
    alert(""This element was removed"")
  )
}


function removeIndex(){
   const index = $id;
   this.accesor.id.splice(index.id) // You can use splice for slice index on
                                    // accessor id and return with message
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div&gt;
    &lt;fromList&gt;
        &lt;ul&gt;
            {...this.array.map( accesors =&gt; {
                &lt;li type=""hidden""&gt;&lt;/li&gt;
                &lt;li&gt;{...accesors}&lt;/li&gt;
            })

            }
        &lt;/ul&gt;
    &lt;/fromList&gt;

    &lt;form id=""form"" method=""post""&gt;
        &lt;input  id=""{this.accesors.id}""&gt;
        &lt;input type=""submit"" callbackforApplySend...getIndex({this.accesors.id}) name=""sendendform"" value=""removeIndex"" &gt;
    &lt;/form&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
"
"60363414","2","<p>As per the answer already given in comment with the link to <a href=""http://jsfiddle.net/AsRqx/"" rel=""nofollow noreferrer"">http://jsfiddle.net/AsRqx/</a>
Following one worked for me perfectly.</p>

<pre><code>function C(num) 
  { return +(Math.round(num + ""e+2"")  + ""e-2"");
  }

function N(num, places) 
  { return +(Math.round(num + ""e+"" + places)  + ""e-"" + places);
  }

C(1.005);

N(1.005,0);
N(1.005,1); //up to 1 decimal places
N(1.005,2); //up to 2 decimal places
N(1.005,3); //up to 3 decimal places
</code></pre>
"
"57991166","3","<p>I would like to suggest to remove one array item using delete and filter:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var arr = [1,2,3,4,5,5,6,7,8,9];
delete arr[5];
arr = arr.filter(function(item){ return item != undefined; });
//result: [1,2,3,4,5,6,7,8,9]

console.log(arr)</code></pre>
</div>
</div>
</p>
<p>So, we can remove only one specific array item instead of all items with the same value.</p>
"
"32382206","8","<p>Try this, </p>

<pre><code>$('#isAgeSelected').click(function() {
    if(this.checked){
        $(""#txtAge"").show();
    } else{
        $(""#txtAge"").hide();
    } 
});
</code></pre>
"
"60721066","0","<p>the proposed answers while generally correct doesn't consider the precision of the passed in number, which is not expressed as requirement in the original question, but may be a requirement in case of scientific application where 3 is different from 3.00 (for example) as the number of decimal digits represents the precision of the instrument that have acquired the value or the accuracy of a calculation.
In fact the proposed answers rounds 3.001 to 3 while by keeping the information about the precision of the number should be 3.00</p>

<p>below a function that takes in account that</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function roundTo(value, decimal) {

    let absValue = Math.abs(value);
    let int = Math.floor(absValue).toString().length;
    let dec = absValue.toString().length - int;
    dec -= (Number.isInteger(absValue) ? 0 : 1);
    return value.toPrecision(int + Math.min(dec, decimal));
  
}</code></pre>
</div>
</div>
</p>
"
"34235817","8","<p>Sure it's inefficient and many despise it, but it's one of the closest to the mentioned:</p>

<pre><code>var myStringArray = [""Hello"",""World""];
myStringArray.forEach(function(f){
    // Do something
})
</code></pre>
"
"60753125","24","<p>The easiest approach would be to use toFixed and then strip trailing zeros using the Number function:</p>

<pre><code>const number = 15.5;
Number(number.toFixed(2)); // 15.5
</code></pre>

<pre><code>const number = 1.7777777;
Number(number.toFixed(2)); // 1.78
</code></pre>
"
"61546711","2","<p>This function works for me. You just pass in the number and the places you want to round and it does what it needs to do easily.</p>

<pre><code>round(source,n) {
 let places = Math.pow(10,n);

 return Math.round(source * places) / places;
}
</code></pre>
"
"61961630","4","<p>A simple general rounding function could be following:</p>

<h1>Steps are:</h1>

<ol>
<li>Multiply the number by (10 to the power of number of decimal place) using <strong>Math.pow(10,places)</strong>.</li>
<li>Round the result to whole integer using <strong>Math.Round</strong>.</li>
<li>Divide the result back by (10 to the power of number of decimal place) <strong>Math.pow(10,places)</strong>.</li>
</ol>

<h1>Example:</h1>

<p>number is: 1.2375
to be rounded to 3 decimal places</p>

<ol>
<li>1.2375 * (10^3)  ==> 1.2375 * 1000 = 1237.5</li>
<li>Round to integer ==> 1238</li>
<li>Divide 1238 by (10^3) ==> 1238 / 1000 = 1.238</li>
</ol>

<p><em>(note: 10^3 means Math.pow(10,3)).</em></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code> function numberRoundDecimal(v,n) {
 return Math.round((v+Number.EPSILON)*Math.pow(10,n))/Math.pow(10,n)}


// ------- tests --------
console.log(numberRoundDecimal(-0.024641163062896567,3))  // -0.025
console.log(numberRoundDecimal(0.9993360575508052,3))     // 0.999
console.log(numberRoundDecimal(1.0020739645577939,3))     // 1.002
console.log(numberRoundDecimal(0.975,0))                  // 1
console.log(numberRoundDecimal(0.975,1))                  // 1
console.log(numberRoundDecimal(0.975,2))                  // 0.98
console.log(numberRoundDecimal(1.005,2))                  // 1.01</code></pre>
</div>
</div>
</p>
"
"35707349","82","<h3>Introduction</h3>
<p>Since my time in college, I've programmed in Java, JavaScript, Pascal, <a href=""https://en.wikipedia.org/wiki/ABAP"" rel=""noreferrer"">ABAP</a>, PHP, <a href=""https://en.wikipedia.org/wiki/OpenEdge_Advanced_Business_Language"" rel=""noreferrer"">Progress 4GL</a>, C/C++ and possibly a few other languages I can't think of right now.</p>
<p>While they all have their own linguistic idiosyncrasies, each of these languages share many of the same basic concepts. Such concepts include procedures / functions, <code>IF</code>-statements, <code>FOR</code>-loops, and <code>WHILE</code>-loops.</p>
<hr />
<h3>A traditional <code>for</code>-loop</h3>
<p>A traditional <code>for</code> loop has three components:</p>
<ol>
<li><strong>The initialization:</strong> executed before the look block is executed the first time</li>
<li><strong>The condition:</strong> checks a condition every time before the loop block is executed, and quits the loop if false</li>
<li><strong>The afterthought:</strong> performed every time after the loop block is executed</li>
</ol>
<p>These three components are separated from each other by a <code>;</code> symbol. Content for each of these three components is optional, which means that the following is the most minimal <code>for</code> loop possible:</p>
<pre><code>for (;;) {
    // Do stuff
}
</code></pre>
<p>Of course, you will need to include an <code>if(condition === true) { break; }</code>  or an <code>if(condition === true) { return; }</code> somewhere inside that <code>for</code>-loop to get it to stop running.</p>
<p>Usually, though, the initialization is used to declare an index, the condition is used to compare that index with a minimum or maximum value, and the afterthought is used to increment the index:</p>
<pre><code>for (var i = 0, length = 10; i &lt; length; i++) {
    console.log(i);
}
</code></pre>
<hr />
<h3>Using a traditional <code>for</code> loop to loop through an array</h3>
<p>The traditional way to loop through an array, is this:</p>
<pre><code>for (var i = 0, length = myArray.length; i &lt; length; i++) {
    console.log(myArray[i]);
}
</code></pre>
<p>Or, if you prefer to loop backwards, you do this:</p>
<pre><code>for (var i = myArray.length - 1; i &gt; -1; i--) {
    console.log(myArray[i]);
}
</code></pre>
<p>There are, however, many variations possible, like for example this one:</p>
<pre><code>for (var key = 0, value = myArray[key], length = myArray.length; key &lt; length; value = myArray[++key]) {
    console.log(value);
}
</code></pre>
<p>...or this one...</p>
<pre><code>var i = 0, length = myArray.length;
for (; i &lt; length;) {
    console.log(myArray[i]);
    i++;
}
</code></pre>
<p>...or this one:</p>
<pre><code>var key = 0, value;
for (; value = myArray[key++];){
    console.log(value);
}
</code></pre>
<p>Whichever works best is largely a matter of both personal taste and the specific use case you're implementing.</p>
<p>Note that each of these variations is supported by all browsers, including very very old ones!</p>
<hr />
<h3>A <code>while</code> loop</h3>
<p>One alternative to a <code>for</code> loop is a <code>while</code> loop. To loop through an array, you could do this:</p>
<pre><code>var key = 0;
while(value = myArray[key++]){
    console.log(value);
}
</code></pre>
<p>Like traditional <code>for</code> loops, <code>while</code> loops are supported by even the oldest of browsers.</p>
<p>Also, note that every while loop can be rewritten as a <code>for</code> loop. For example, the <code>while</code> loop hereabove behaves the exact same way as this <code>for</code>-loop:</p>
<pre><code>for(var key = 0; value = myArray[key++];){
    console.log(value);
}
</code></pre>
<hr />
<h3><code>For...in</code> and <code>for...of</code></h3>
<p>In JavaScript, you can also do this:</p>
<pre><code>for (i in myArray) {
    console.log(myArray[i]);
}
</code></pre>
<p>This should be used with care, however, as it doesn't behave the same as a traditional <code>for</code> loop in all cases, and there are potential side-effects that need to be considered. See <strong><a href=""https://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-such-a-bad-idea"">Why is using &quot;for...in&quot; for array iteration a bad idea?</a></strong> for more details.</p>
<p>As an alternative to <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in"" rel=""noreferrer""><strong><code>for...in</code></strong></a>, there's now also for <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"" rel=""noreferrer""><strong><code>for...of</code></strong></a>. The following example shows the difference between a <code>for...of</code> loop and a <code>for...in</code> loop:</p>
<pre><code>var myArray = [3, 5, 7];
myArray.foo = &quot;hello&quot;;

for (var i in myArray) {
  console.log(i); // logs 0, 1, 2, &quot;foo&quot;
}

for (var i of myArray) {
  console.log(i); // logs 3, 5, 7
}
</code></pre>
<p>Additionally, you need to consider that no version of Internet Explorer supports <code>for...of</code> (<a href=""https://www.microsoft.com/en-us/windows/microsoft-edge"" rel=""noreferrer""><strong>Edge 12+</strong></a> does) and that <code>for...in</code> requires at least Internet Explorer 10.</p>
<hr />
<h3><code>Array.prototype.forEach()</code></h3>
<p>An alternative to <code>for</code>-loops is <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"" rel=""noreferrer""><strong><code>Array.prototype.forEach()</code></strong></a>, which uses the following syntax:</p>
<pre><code>myArray.forEach(function(value, key, myArray) {
    console.log(value);
});
</code></pre>
<p><code>Array.prototype.forEach()</code> is supported by all modern browsers, as well as Internet Explorer 9 and later.</p>
<hr />
<h3>Libraries</h3>
<p>Finally, many utility libraries also have their own <code>foreach</code> variation. AFAIK, the three most popular ones are these:</p>
<p><a href=""http://api.jquery.com/jquery.each/"" rel=""noreferrer""><strong><code>jQuery.each()</code></strong></a>, in <a href=""https://jquery.com/"" rel=""noreferrer""><strong>jQuery</strong></a>:</p>
<pre><code>$.each(myArray, function(key, value) {
    console.log(value);
});
</code></pre>
<p><a href=""http://underscorejs.org/#each"" rel=""noreferrer""><strong><code>_.each()</code></strong></a>, in <a href=""http://underscorejs.org/"" rel=""noreferrer""><strong>Underscore.js</strong></a>:</p>
<pre><code>_.each(myArray, function(value, key, myArray) {
    console.log(value);
});
</code></pre>
<p><a href=""https://lodash.com/docs#forEach"" rel=""noreferrer""><strong><code>_.forEach()</code></strong></a>, in <a href=""https://lodash.com/"" rel=""noreferrer""><strong>Lodash</strong></a>:</p>
<pre><code>_.forEach(myArray, function(value, key) {
    console.log(value);
});
</code></pre>
"
"36298671","12","<p>If you want to use jQuery, it has a nice example in its documentation:</p>

<pre><code> $.each([ 52, 97 ], function( index, value ) {
      alert( index + "": "" + value );
 });
</code></pre>
"
"64503117","4","<p>I've read all the answers, the answers of similar questions and the complexity of the most &quot;good&quot; solutions didn't satisfy me. I don't want to put a huge round function set, or a small one but fails on scientific notation. So, I came up with this function. It may help someone in my situation:</p>
<pre><code>function round(num, dec) {
   const [sv, ev] = num.toString().split('e');
   return Number(Number(Math.round(parseFloat(sv + 'e' + dec)) + 'e-' + dec) + 'e' + (ev || 0));
}
</code></pre>
<p>I didn't run any performance test because I will call this just to update the UI of my application. The function gives the following results for a quick test:</p>
<pre><code>// 1/3563143 = 2.806510993243886e-7
round(1/3563143, 2)  // returns `2.81e-7`

round(1.31645, 4)    // returns 1.3165

round(-17.3954, 2)   // returns -17.4
</code></pre>
<p>This is enough for me.</p>
"
"36774966","14","<p>There are a couple of ways to do it in JavaScript. The first two examples are JavaScript samples. The third one makes use of a JavaScript library, that is, jQuery making use of the <code>.each()</code> function.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var myStringArray = [""hello"", ""World""];
for(var i in myStringArray) {
  alert(myStringArray[i]);
}</code></pre>
</div>
</div>
</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var myStringArray = [""hello"", ""World""];
for (var i=0; i &lt; myStringArray.length; i++) {
  alert(myStringArray[i]);
}</code></pre>
</div>
</div>
</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var myStringArray = [""hello"", ""World""];
$.each(myStringArray, function(index, value){
  alert(value);
})</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
"
"36934097","9","<pre><code>var myStringArray = [""hello"", ""World""];
myStringArray.forEach(function(val, index){
   console.log(val, index);
})
</code></pre>
"
"37466121","34","<p><strong>As of ECMAScript&nbsp;6:</strong></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>list = [0, 1, 2, 3]
for (let obj of list) {
    console.log(obj)
}</code></pre>
</div>
</div>
</p>

<p>Where <code>of</code> avoids the oddities associated with <code>in</code> and makes it work like the <code>for</code> loop of any other language, and <code>let</code> binds <code>i</code> within the loop as opposed to within the function.</p>

<p>The braces (<code>{}</code>) can be omitted when there is only one command (e.g. in the example above).</p>
"
"60507869","6","<p>Try</p>

<pre><code>`${Date()}`.slice(4,15)
</code></pre>

<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>console.log( `${Date()}`.slice(4,15) )</code></pre>
</div>
</div>
</p>

<p>We use here standard JS functionalities: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"" rel=""noreferrer"">template literals</a>, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"" rel=""noreferrer"">Date object</a> which is cast to string, and <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice"" rel=""noreferrer"">slice</a>. This is probably shortest solution which meet OP requirements (no time, only date)</p>
"
"61115991","0","<p>For anyone looking for a date format like this <strong>09-Apr-2020</strong></p>

<pre><code>function getDate(){
  var months = [""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"", ""Oct"", ""Nov"", ""Dec""]

  var today = new Date();
  var dd    = String(today.getDate()).padStart(2, '0');
  var mm    = months[today.getMonth()];
  var yyyy  = today.getFullYear();

  today = dd + ""-"" + mm + ""-"" + yyyy;
  return today;
}

getDate();
</code></pre>
"
"39205401","170","<p>Use:</p>

<pre><code>&lt;input type=""checkbox"" name=""planned_checked"" checked id=""planned_checked""&gt; Planned

$(""#planned_checked"").change(function() {
    if($(this).prop('checked')) {
        alert(""Checked Box Selected"");
    } else {
        alert(""Checked Box deselect"");
    }
});
</code></pre>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>    $(""#planned_checked"").change(function() {
        if($(this).prop('checked')) {
            alert(""Checked Box Selected"");
        } else {
            alert(""Checked Box deselect"");
        }
    });</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;input type=""checkbox"" name=""planned_checked"" checked id=""planned_checked""&gt; Planned</code></pre>
</div>
</div>
</p>
"
"39667584","22","<p>As @livefree75 said:</p>

<p><strong>jQuery 1.5.x and below</strong></p>

<p>You can also extend the $.fn object with new methods:</p>

<pre><code>(function($)  {
   $.fn.extend({
      check : function()  {
         return this.filter("":radio, :checkbox"").attr(""checked"", true);
      },
      uncheck : function()  {
         return this.filter("":radio, :checkbox"").removeAttr(""checked"");
      }
   });
}(jQuery));
</code></pre>

<p>But in new versions of jQuery, we have to use something like this:</p>

<p><strong>jQuery 1.6+</strong></p>

<pre><code>    (function($)  {
       $.fn.extend({
          check : function()  {
             return this.filter("":radio, :checkbox"").prop(""checked"", true);
          },
          uncheck : function()  {
             return this.filter("":radio, :checkbox"").prop(""checked"",false);
          }
       });
    }(jQuery));
</code></pre>

<p>Then you can just do:</p>

<pre><code>    $("":checkbox"").check();
    $("":checkbox"").uncheck();
</code></pre>
"
"39772342","10","<p>This may help someone.</p>

<p>HTML5</p>

<pre><code> &lt;input id=""check_box"" type=""checkbox"" onclick=""handleOnClick()""&gt;
</code></pre>

<p>JavaScript.</p>

<pre><code>  function handleOnClick(){

      if($(""#check_box"").prop('checked'))
      {        
          console.log(""current state: checked"");
      }
      else
      {         
          console.log(""current state: unchecked"");
      }    
 }
</code></pre>
"
"40013409","56","<p><strong>This code will help you</strong></p>

<pre><code>$('#isAgeSelected').click(function(){
   console.log(this.checked);
   if(this.checked == true) {
        $(""#txtAge"").show();
    } else {
       $(""#txtAge"").hide();
   }
});
</code></pre>
"
"58687501","7","<p>You can create a prototype for that. Just pass the array element and the value which you want to remove from the array element:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>Array.prototype.removeItem = function(array,val) {
    array.forEach((arrayItem,index) =&gt; {
        if (arrayItem == val) {
            array.splice(index, 1);
        }
    });
    return array;
}
var DummyArray = [1, 2, 3, 4, 5, 6];
console.log(DummyArray.removeItem(DummyArray, 3));</code></pre>
</div>
</div>
</p>
"
"40257774","12","<p>The best way in my opinion is to use the Array.forEach function. If you cannot use that I would suggest to get the polyfill from MDN. To make it available, it is certainly the safest way to iterate over an array in JavaScript.</p>

<p><em><a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"" rel=""nofollow noreferrer"">Array.prototype.forEach()</a></em></p>

<p>So as others has suggested, this is almost always what you want:</p>

<pre><code>var numbers = [1,11,22,33,44,55,66,77,88,99,111];
var sum = 0;
numbers.forEach(function(n){
  sum += n;
});
</code></pre>

<p>This ensures that anything you need in the scope of processing the array stays within that scope, and that you are only processing the values of the array, not the object properties and other members, which is what <code>for ..</code> in does.</p>

<p>Using a regular C-style <code>for</code> loop works in most cases. It is just important to remember that everything within the loop shares its scope with the rest of your program, the { } does not create a new scope.</p>

<p>Hence:</p>

<pre><code>var sum = 0;
var numbers = [1,11,22,33,44,55,66,77,88,99,111];

for(var i = 0; i&lt;numbers.length; ++i){
  sum += numbers[i];
}

alert(i);
</code></pre>

<p>will output ""11"" - which may or may not be what you want.</p>

<p>A working jsFiddle example:
<a href=""https://jsfiddle.net/workingClassHacker/pxpv2dh5/7/"" rel=""nofollow noreferrer"">https://jsfiddle.net/workingClassHacker/pxpv2dh5/7/</a></p>
"
"43309349","22","<p>ECMAScript&nbsp;5 (the version on JavaScript) to work with Arrays:</p>

<p><strong>forEach</strong> - Iterates through every item in the array and do whatever you need with each item.</p>

<pre><code>['C', 'D', 'E'].forEach(function(element, index) {
  console.log(element + "" is #"" + (index+1) + "" in the musical scale"");
});

// Output
// C is the #1 in musical scale
// D is the #2 in musical scale
// E is the #3 in musical scale
</code></pre>

<p>In case, more interested on operation on array using some inbuilt feature.</p>

<p><strong>map</strong> - It creates a new array with the result of the callback function. This method is good to be used when you need to format the elements of your array.</p>

<pre><code>// Let's upper case the items in the array
['bob', 'joe', 'jen'].map(function(elem) {
  return elem.toUpperCase();
});

// Output: ['BOB', 'JOE', 'JEN']
</code></pre>

<p><strong>reduce</strong> - As the name says, it reduces the array to a single value by calling the given function passing in the current element and the result of the previous execution.</p>

<pre><code>[1,2,3,4].reduce(function(previous, current) {
  return previous + current;
});
// Output: 10
// 1st iteration: previous=1, current=2 =&gt; result=3
// 2nd iteration: previous=3, current=3 =&gt; result=6
// 3rd iteration: previous=6, current=4 =&gt; result=10
</code></pre>

<p><strong>every</strong> - Returns true or false if all the elements in the array pass the test in the callback function.</p>

<pre><code>// Check if everybody has 18 years old of more.
var ages = [30, 43, 18, 5];
ages.every(function(elem) {
  return elem &gt;= 18;
});

// Output: false
</code></pre>

<p><strong>filter</strong> - Very similar to every except that filter returns an array with the elements that return true to the given function.</p>

<pre><code>// Finding the even numbers
[1,2,3,4,5,6].filter(function(elem){
  return (elem % 2 == 0)
});

// Output: [2,4,6]
</code></pre>
"
"63215394","-1","<pre><code>Date.prototype.toLocalFullDateStringYYYYMMDDHHMMSS = function () {
if (this != null &amp;&amp; this != undefined) {
    let str = this.getFullYear();
    str += &quot;-&quot; + round(this.getMonth() + 1);
    str += &quot;-&quot; + round(this.getDate());
    str += &quot;T&quot;;
    str += round(this.getHours());
    str += &quot;:&quot; + round(this.getMinutes());
    str += &quot;:&quot; + round(this.getSeconds());
    return str;
} else {
    return this;
}

function round(n){
    if(n &lt; 10){
        return &quot;0&quot; + n;
    }
    else return n;
}};
</code></pre>
"
"58993184","0","<p>Check this. I'm sure it will help you:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Click the button to do a global search and replace for ""is"" in a string.&lt;/p&gt;
&lt;button onclick=""myFunction()""&gt;Try it&lt;/button&gt;
&lt;p id=""demo""&gt;&lt;/p&gt;
&lt;script&gt;
function myFunction() {
  var str = 'Is this ""3"" dris ""3""?';
  var allvar= '""3""';
  var patt1 = new RegExp( allvar, 'g' );
  document.getElementById(""demo"").innerHTML = str.replace(patt1,'""5""');
}
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Here is the <a href=""https://jsfiddle.net/Wsmemon/23ykfjh8/41/"" rel=""nofollow noreferrer"">JSFiddle link</a>.</p>
"
"43895482","23","<p>There are <strong>a few ways</strong> to loop through an array in JavaScript, as below:</p>

<p><strong>for</strong> - it's <strong>the most common one</strong>. Full block of code for looping <br/></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var languages = [""Java"", ""JavaScript"", ""C#"", ""Python""];
var i, len, text;
for (i = 0, len = languages.length, text = """"; i &lt; len; i++) {
    text += languages[i] + ""&lt;br&gt;"";
}
document.getElementById(""example"").innerHTML = text;</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;p id=""example""&gt;&lt;/p&gt;</code></pre>
</div>
</div>
</p>

<p><strong>while</strong> - loop while a condition is through. It seems to be the fastest loop <br/></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var text = """";
var i = 0;
while (i &lt; 10) {
    text +=  i + "") something&lt;br&gt;"";
    i++;
}
document.getElementById(""example"").innerHTML = text;</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;p id=""example""&gt;&lt;/p&gt;</code></pre>
</div>
</div>
</p>

<p><strong>do/while</strong> - also loop through a block of code while the condition is true, will run at least one time <br/></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var text = """"
var i = 0;

do {
    text += i + "") something &lt;br&gt;"";
    i++;
}
while (i &lt; 10);

document.getElementById(""example"").innerHTML = text;</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;p id=""example""&gt;&lt;/p&gt;</code></pre>
</div>
</div>
</p>

<p><strong>Functional loops</strong> - <code>forEach</code>, <code>map</code>, <code>filter</code>, also <code>reduce</code> (they loop through the function, but they are used if you need to do something with your array, etc.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// For example, in this case we loop through the number and double them up using the map function
var numbers = [65, 44, 12, 4];
document.getElementById(""example"").innerHTML = numbers.map(function(num){return num * 2});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;p id=""example""&gt;&lt;/p&gt;</code></pre>
</div>
</div>
</p>

<p>For more information and examples about functional programming on arrays, look at the blog post <em><a href=""http://cryto.net/~joepie91/blog/2015/05/04/functional-programming-in-javascript-map-filter-reduce/"" rel=""noreferrer"">Functional programming in JavaScript: map, filter and reduce</a></em>.</p>
"
"44059078","7","<p>I'm using jQuery 1.11.1 and I had troubles with setting and reading checkbox value as well.</p>

<p>I finally solved it by these two functions:</p>

<pre><code>function setCheckboxValue(checkBoxId, checked) {
    if (checkBoxId &amp;&amp; (checked === true || checked === false)) {
        var elem = $('#' + checkBoxId);
        if (checked === true) {
            elem.attr('checked', 'checked');
        } else {
            elem.removeAttr('checked');
        }
    }
}

function isChecked(checkBoxId) {
    return $('#' + checkBoxId).attr('checked') != null;
}
</code></pre>

<p>It might looks a little bit dirty but it solves all the wired issue I had among different types of browsers.</p>
"
"44212505","36","<p><strong>Yes</strong>, you can do the same in JavaScript using a loop, but <strong>not limited</strong> to that. There are many ways to do a loop over arrays in JavaScript. Imagine you have this array below, and you'd like to do a loop over it:</p>
<pre><code>var arr = [1, 2, 3, 4, 5];
</code></pre>
<p>These are the solutions:</p>
<p><strong>1) For loop</strong></p>
<p>A <code>for</code> loop is a common way looping through arrays in JavaScript, but it is no considered as the fastest solutions for large arrays:</p>
<pre><code>for (var i=0, l=arr.length; i&lt;l; i++) {
  console.log(arr[i]);
}
</code></pre>
<p><strong>2) While loop</strong></p>
<p>A while loop is considered as the fastest way to loop through long arrays, but it is usually less used in the JavaScript code:</p>
<pre><code>let i=0;

while (arr.length&gt;i) {
    console.log(arr[i]);
    i++;
}
</code></pre>
<p><strong>3) Do while</strong><br>
A <code>do while</code> is doing the same thing as <code>while</code> with some syntax difference as below:</p>
<pre><code>let i=0;
do {
  console.log(arr[i]);
  i++;
}
while (arr.length&gt;i);
</code></pre>
<p>These are the main ways to do JavaScript loops, but there are a few more ways to do that.</p>
<p>Also we use a <code>for in</code> loop for looping over objects in JavaScript.</p>
<p>Also look at the <code>map()</code>, <code>filter()</code>, <code>reduce()</code>, etc. functions on an Array in JavaScript. They may do things much faster and better than using <code>while</code> and <code>for</code>.</p>
<p>This is a good article if you like to learn more about the asynchronous functions over arrays in JavaScript.</p>
<blockquote>
<p>Functional programming has been making quite a splash in the
development world these days. And for good reason: Functional
techniques can help you write more declarative code that is easier to
understand at a glance, refactor, and test.</p>
<p>One of the cornerstones of functional programming is its special use
of lists and list operations. And those things are exactly what the
sound like they are: arrays of things, and the stuff you do to them.
But the functional mindset treats them a bit differently than you
might expect.</p>
<p>This article will take a close look at what I like to call the &quot;big
three&quot; list operations: map, filter, and reduce. Wrapping your head
around these three functions is an important step towards being able
to write clean functional code, and opens the doors to the vastly
powerful techniques of functional and reactive programming.</p>
<p>It also means you'll never have to write a for loop again.</p>
</blockquote>
<p>Read more&gt;&gt; <a href=""https://code.tutsplus.com/tutorials/how-to-use-map-filter-reduce-in-javascript--cms-26209"" rel=""noreferrer"">here</a>:</p>
"
"47947336","18","<p>Using <code>location.replace()</code> will redirect you, but without saving the history of the previous page. This is better to use when a form is submitted.</p>

<p>But when you want to keep your history you have to use <code>location.href=//path</code>.</p>

<p><strong>Examples:</strong></p>

<pre><code>// Form with steps
document.getElementById('#next').onclick = function() {
   window.location.href='/step2' // Iteration of steps;
}

// Go to next step
document.getElementById('#back').onclick = function() {
   window.history.back();
}

// Finish
document.getElementById('#finish').onclick = function() {
   window.location.href = '/success';
}

// On success page
window.onload = function() {
    setTimeout(function() {
       window.location.replace('/home'); // I can't go back to success page by pressing the back button
    },3000);
}
</code></pre>
"
"48785042","16","<p>You can write the Url.Action for the Button click event in the script section as follows.</p>

<pre><code>function onclick() {
    location.href = '@Url.Action(""Index"", ""Home"")';
}
</code></pre>
"
"59252554","54","<h2>Performance</h2>
<p>Today (2019-12-09) I conduct performance tests on macOS v10.13.6 (High Sierra) for chosen solutions. I show <code>delete</code> (A), but I do not use it in comparison with other methods, because it left empty space in the array.</p>
<p>The conclusions</p>
<ul>
<li>the fastest solution is <code>array.splice</code> (C) (except Safari for small arrays where it has the second time)</li>
<li>for big arrays, <code>array.slice+splice</code> (H) is the fastest immutable solution for Firefox and Safari; <code>Array.from</code> (B) is fastest in Chrome</li>
<li>mutable solutions are usually 1.5x-6x faster than immutable</li>
<li>for small tables on Safari, surprisingly the mutable solution (C) is slower than the immutable solution (G)</li>
</ul>
<h2>Details</h2>
<p>In tests, I remove the middle element from the array in different ways. The <strong>A, C</strong> solutions are in-place. The <strong>B, D, E, F, G, H</strong> solutions are immutable.</p>
<p><strong>Results for an array with 10 elements</strong></p>
<p><a href=""https://i.stack.imgur.com/foNhq.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/foNhq.png"" alt=""Enter image description here"" /></a></p>
<p>In Chrome the <code>array.splice</code> (C) is the fastest in-place solution. The <code>array.filter</code> (D) is the fastest immutable solution. The slowest is <code>array.slice</code> (F). You can perform the test on your machine <a href=""https://jsperf.com/small-array-remove-element"" rel=""noreferrer"">here</a>.</p>
<p><strong>Results for an array with 1.000.000 elements</strong></p>
<p><a href=""https://i.stack.imgur.com/7zCJt.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/7zCJt.png"" alt=""Enter image description here"" /></a></p>
<p>In Chrome the <code>array.splice</code> (C) is the fastest in-place solution (the <code>delete</code> (C) is similar fast - but it left an empty slot in the array (so it does not perform a 'full remove')). The <code>array.slice-splice</code> (H) is the fastest immutable solution. The slowest is <code>array.filter</code> (D and E). You can perform the test on your machine <a href=""https://jsperf.com/big-array-remove-element"" rel=""noreferrer"">here</a>.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
var log = (letter,array) =&gt; console.log(letter, array.join `,`);

function A(array) {
  var index = array.indexOf(5);
  delete array[index];
  log('A', array);
}

function B(array) {
  var index = array.indexOf(5);
  var arr = Array.from(array);
  arr.splice(index, 1)
  log('B', arr);
}

function C(array) {
  var index = array.indexOf(5);
  array.splice(index, 1);
  log('C', array);
}

function D(array) {
  var arr = array.filter(item =&gt; item !== 5)
  log('D', arr);
}

function E(array) {
  var index = array.indexOf(5);
  var arr = array.filter((item, i) =&gt; i !== index)
  log('E', arr);
}

function F(array) {
  var index = array.indexOf(5);
  var arr = array.slice(0, index).concat(array.slice(index + 1))
  log('F', arr);
}

function G(array) {
  var index = array.indexOf(5);
  var arr = [...array.slice(0, index), ...array.slice(index + 1)]
  log('G', arr);
}

function H(array) {
  var index = array.indexOf(5);
  var arr = array.slice(0);
  arr.splice(index, 1);
  log('H', arr);
}

A([...a]);
B([...a]);
C([...a]);
D([...a]);
E([...a]);
F([...a]);
G([...a]);
H([...a]);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>This snippet only presents code used in performance tests - it does not perform tests itself.</code></pre>
</div>
</div>
</p>
<p>Comparison for browsers: Chrome v78.0.0, Safari v13.0.4, and Firefox v71.0.0</p>
<p><a href=""https://i.stack.imgur.com/Ct9DN.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/Ct9DN.png"" alt=""Enter image description here"" /></a></p>
"
"59406346","6","<p>Remove a specific element from an array can be done in one line with the filter option, and it's supported by all browsers: <a href=""https://caniuse.com/#search=filter%20array"" rel=""noreferrer"">https://caniuse.com/#search=filter%20array</a></p>

<pre><code>function removeValueFromArray(array, value) {
    return array.filter(e =&gt; e != value)
}
</code></pre>

<p>I tested this function here: <a href=""https://bit.dev/joshk/jotils/remove-value-from-array/~code#test.ts"" rel=""noreferrer"">https://bit.dev/joshk/jotils/remove-value-from-array/~code#test.ts</a></p>
"
"47205719","8","<p>A way closest to your idea would be to use <code>Array.forEach()</code> which accepts a closure function which will be executed for each element of the array.</p>

<pre><code>myArray.forEach(
  (item) =&gt; {
    // Do something
    console.log(item);
  }
);
</code></pre>

<p>Another viable way would be to use <code>Array.map()</code> which works in the same way, but it also takes all values that you return and returns them in a new array (essentially mapping each element to a new one), like this:</p>

<pre><code>var myArray = [1, 2, 3];
myArray = myArray.map(
  (item) =&gt; {
    return item + 1;
  }
);

console.log(myArray); // [2, 3, 4]
</code></pre>
"
"47234998","7","<p>The lambda syntax doesn't usually work in Internet&nbsp;Explorer&nbsp;10  or below.</p>

<p>I usually use the</p>

<pre><code>[].forEach.call(arrayName,function(value,index){
    console.log(""value of the looped element"" + value);
    console.log(""index of the looped element"" + index);
});
</code></pre>

<p>If you are a jQuery <em>fan</em> and already have a jQuery file running, you should reverse the positions of the index and value parameters</p>

<pre><code>$(""#ul&gt;li"").each(function(**index, value**){
    console.log(""value of the looped element"" + value);
    console.log(""index of the looped element"" + index);
});
</code></pre>
"
"48213322","1","<pre><code>var a = [""car"", ""bus"", ""truck""]
a.forEach(function(item, index) {
    console.log(""Index"" + index);
    console.log(""Element"" + item);
})
</code></pre>
"
"48946857","38","<p>Some use cases of looping through an array in <strong>the functional programming way</strong> in JavaScript:</p>

<h3>1. Just loop through an array</h3>

<pre><code>const myArray = [{x:100}, {x:200}, {x:300}];

myArray.forEach((element, index, array) =&gt; {
    console.log(element.x); // 100, 200, 300
    console.log(index); // 0, 1, 2
    console.log(array); // same myArray object 3 times
});
</code></pre>

<p>Note: Array.prototype.forEach() is not a functional way strictly speaking, as the function it takes as the input parameter is not supposed to return a value, which thus cannot be regarded as a pure function.</p>

<h3>2. Check if any of the elements in an array pass a test</h3>

<pre><code>const people = [
    {name: 'John', age: 23}, 
    {name: 'Andrew', age: 3}, 
    {name: 'Peter', age: 8}, 
    {name: 'Hanna', age: 14}, 
    {name: 'Adam', age: 37}];

const anyAdult = people.some(person =&gt; person.age &gt;= 18);
console.log(anyAdult); // true
</code></pre>

<h3>3. Transform to a new array</h3>

<pre><code>const myArray = [{x:100}, {x:200}, {x:300}];

const newArray= myArray.map(element =&gt; element.x);
console.log(newArray); // [100, 200, 300]
</code></pre>

<p>Note: The map() method creates a new array with the results of calling a provided function on every element in the calling array.</p>

<h3>4. Sum up a particular property, and calculate its average</h3>

<pre><code>const myArray = [{x:100}, {x:200}, {x:300}];

const sum = myArray.map(element =&gt; element.x).reduce((a, b) =&gt; a + b, 0);
console.log(sum); // 600 = 0 + 100 + 200 + 300

const average = sum / myArray.length;
console.log(average); // 200
</code></pre>

<h3>5. Create a new array based on the original but without modifying it</h3>

<pre><code>const myArray = [{x:100}, {x:200}, {x:300}];

const newArray= myArray.map(element =&gt; {
    return {
        ...element,
        x: element.x * 2
    };
});

console.log(myArray); // [100, 200, 300]
console.log(newArray); // [200, 400, 600]
</code></pre>

<h3>6. Count the number of each category</h3>

<pre><code>const people = [
    {name: 'John', group: 'A'}, 
    {name: 'Andrew', group: 'C'}, 
    {name: 'Peter', group: 'A'}, 
    {name: 'James', group: 'B'}, 
    {name: 'Hanna', group: 'A'}, 
    {name: 'Adam', group: 'B'}];

const groupInfo = people.reduce((groups, person) =&gt; {
    const {A = 0, B = 0, C = 0} = groups;
    if (person.group === 'A') {
        return {...groups, A: A + 1};
    } else if (person.group === 'B') {
        return {...groups, B: B + 1};
    } else {
        return {...groups, C: C + 1};
    }
}, {});

console.log(groupInfo); // {A: 3, C: 1, B: 2}
</code></pre>

<h3>7. Retrieve a subset of an array based on particular criteria</h3>

<pre><code>const myArray = [{x:100}, {x:200}, {x:300}];

const newArray = myArray.filter(element =&gt; element.x &gt; 250);
console.log(newArray); // [{x:300}] 
</code></pre>

<p>Note: The filter() method creates a new array with all elements that pass the test implemented by the provided function.</p>

<h3>8. Sort an array</h3>

<pre><code>const people = [
  { name: ""John"", age: 21 },
  { name: ""Peter"", age: 31 },
  { name: ""Andrew"", age: 29 },
  { name: ""Thomas"", age: 25 }
];

let sortByAge = people.sort(function (p1, p2) {
  return p1.age - p2.age;
});

console.log(sortByAge);
</code></pre>

<p><a href=""https://i.stack.imgur.com/scSsS.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/scSsS.png"" alt=""enter image description here""></a></p>

<h3>9. Find an element in an array</h3>

<pre><code>const people = [ {name: ""john"", age:23},
                {name: ""john"", age:43},
                {name: ""jim"", age:101},
                {name: ""bob"", age:67} ];

const john = people.find(person =&gt; person.name === 'john');
console.log(john);
</code></pre>

<p><a href=""https://i.stack.imgur.com/ODT69.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/ODT69.png"" alt=""enter image description here""></a></p>

<p>The Array.prototype.find() method returns the value of the first element in the array that satisfies the provided testing function.</p>

<h3>References</h3>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some"" rel=""noreferrer"">Array.prototype.some()</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"" rel=""noreferrer"">Array.prototype.forEach()</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"" rel=""noreferrer"">Array.prototype.map()</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"" rel=""noreferrer"">Array.prototype.filter()</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"" rel=""noreferrer"">Array.prototype.sort()</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"" rel=""noreferrer"">Spread syntax</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"" rel=""noreferrer"">Array.prototype.find()</a></li>
</ul>
"
"59503209","30","<h2>Performance</h2>
<p>Today 27.12.2019 I perform tests on <a href=""https://en.wikipedia.org/wiki/MacOS_High_Sierra"" rel=""noreferrer"">macOS v10.13.6</a> (High Sierra) for the chosen solutions.</p>
<p><strong>Conclusions</strong></p>
<ul>
<li>The <code>str.replace(/abc/g, '');</code> (<strong>C</strong>) is a good cross-browser fast solution for all strings.</li>
<li>Solutions based on <code>split-join</code> (<strong>A,B</strong>) or <code>replace</code> (<strong>C,D</strong>) are fast</li>
<li>Solutions based on <code>while</code> (<strong>E,F,G,H</strong>) are slow - usually ~4 times slower for small strings and about ~3000 times (!) slower for long strings</li>
<li>The recurrence solutions (<strong>RA,RB</strong>) are slow and do not work for long strings</li>
</ul>
<p>I also create my own solution. It looks like currently it is the shortest one which does the question job:</p>
<pre><code>str.split`abc`.join``
</code></pre>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>str = ""Test abc test test abc test test test abc test test abc"";
str = str.split`abc`.join``

console.log(str);</code></pre>
</div>
</div>
</p>
<h2>Details</h2>
<p>The tests were performed on Chrome 79.0, Safari 13.0.4 and Firefox 71.0 (64 bit). The tests <code>RA</code> and <code>RB</code> use recursion. Results</p>
<p><a href=""https://i.stack.imgur.com/si5UK.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/si5UK.png"" alt=""Enter image description here"" /></a></p>
<h2>Short string - 55 characters</h2>
<p>You can run tests on your machine <a href=""https://jsperf.com/remove-substring-small/1"" rel=""noreferrer"">HERE</a>. Results for Chrome:</p>
<p><a href=""https://i.stack.imgur.com/Ctf18.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/Ctf18.png"" alt=""Enter image description here"" /></a></p>
<h2>Long string: 275 000 characters</h2>
<p>The recursive solutions <strong>RA</strong> and <strong>RB</strong> gives</p>
<blockquote>
<p>RangeError: Maximum call stack size exceeded</p>
</blockquote>
<p>For 1M characters they even break Chrome</p>
<p><a href=""https://i.stack.imgur.com/dNkYp.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/dNkYp.png"" alt=""enter image description here"" /></a></p>
<p>I try to perform tests for 1M characters for other solutions, but <strong>E,F,G,H</strong> takes so much time that browser ask me to break script so I shrink test string to 275K characters. You can run tests on your machine <a href=""https://jsperf.com/remove-substring-big/1"" rel=""noreferrer"">HERE</a>. Results for Chrome</p>
<p><a href=""https://i.stack.imgur.com/0uEgk.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/0uEgk.png"" alt=""enter image description here"" /></a></p>
<p>Code used in tests</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var t=""Test abc test test abc test test test abc test test abc""; // .repeat(5000)
var log = (version,result) =&gt; console.log(`${version}: ${result}`);


function A(str) {
  return str.split('abc').join('');
}

function B(str) {
  return str.split`abc`.join``; // my proposition
}


function C(str) {
  return str.replace(/abc/g, '');
}

function D(str) {
  return str.replace(new RegExp(""abc"", ""g""), '');
}

function E(str) {
  while (str.indexOf('abc') !== -1) { str = str.replace('abc', ''); }
  return str;
}

function F(str) {
  while (str.indexOf('abc') !== -1) { str = str.replace(/abc/, ''); }
  return str;
}

function G(str) {
  while(str.includes(""abc"")) { str = str.replace('abc', ''); }
  return str;
}

// src: https://stackoverflow.com/a/56989553/860099
function H(str)
{
    let i = -1
    let find = 'abc';
    let newToken = '';

    if (!str)
    {
        if ((str == null) &amp;&amp; (find == null)) return newToken;
        return str;
    }

    while ((
        i = str.indexOf(
            find, i &gt;= 0 ? i + newToken.length : 0
        )) !== -1
    )
    {
        str = str.substring(0, i) +
            newToken +
            str.substring(i + find.length);
    }
    return str;
}

// src: https://stackoverflow.com/a/22870785/860099
function RA(string, prevstring) {
  var omit = 'abc';
  var place = '';
  if (prevstring &amp;&amp; string === prevstring)
    return string;
  prevstring = string.replace(omit, place);
  return RA(prevstring, string)
}

// src: https://stackoverflow.com/a/26107132/860099
function RB(str) {
  var find = 'abc';
  var replace = '';
  var i = str.indexOf(find);
  if (i &gt; -1){
    str = str.replace(find, replace);
    i = i + replace.length;
    var st2 = str.substring(i);
    if(st2.indexOf(find) &gt; -1){
      str = str.substring(0,i) + RB(st2, find, replace);
    }
  }
  return str;
}




log('A ', A(t));
log('B ', B(t));
log('C ', C(t));
log('D ', D(t));
log('E ', E(t));
log('F ', F(t));
log('G ', G(t));
log('H ', H(t));
log('RA', RA(t)); // use reccurence
log('RB', RB(t)); // use reccurence</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;p style=""color:red""&gt;This snippet only presents codes used in tests. It not perform test itself!&lt;p&gt;</code></pre>
</div>
</div>
</p>
"
"59661328","9","<p>I found this blog post which is showing nine ways to do it:</p>

<p><em><a href=""https://love2dev.com/blog/javascript-remove-from-array/"" rel=""noreferrer"">9 Ways to Remove Elements From A JavaScript Array - Plus How to Safely Clear JavaScript Arrays</a></em></p>

<p>I prefer to use <code>filter()</code>:</p>

<pre><code>var filtered_arr = arr.filter(function(ele){
   return ele != value;
})
</code></pre>
"
"51204865","5","<p>If you have a massive array you should use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators"" rel=""noreferrer""><strong><code>iterators</code></strong></a> to gain some efficiency. Iterators are a property of certain JavaScript collections (like <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"" rel=""noreferrer""><code>Map</code></a>, <a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Set"" rel=""noreferrer""><code>Set</code></a>, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" rel=""noreferrer""><code>String</code></a>, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"" rel=""noreferrer""><code>Array</code></a>). Even, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"" rel=""noreferrer""><strong><code>for..of</code></strong></a> uses <strong><code>iterator</code></strong> under-the-hood.</p>

<p>Iterators improve efficiency by letting you consume the items in a list one at a time as if they were a stream. What makes an iterator special is how it traverses a collection. Other loops need to load the entire collection up front in order to iterate over it, whereas an iterator only needs to know the current position in the collection.             </p>

<p>You access the current item by calling the iterator’s <code>next</code> method. The next method will return the <strong><code>value</code></strong> of the current item and a <strong><code>boolean</code></strong> to indicate when you have reached the end of the collection. The following is an example of creating an iterator from an array.               </p>

<p>Transform your regular array to iterator using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values"" rel=""noreferrer""><code>values()</code></a> method like this:               </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>    const myArr = [2,3,4]

let it = myArr.values();

console.log(it.next());
console.log(it.next());
console.log(it.next());
console.log(it.next());</code></pre>
</div>
</div>
</p>

<p>You can also transform your regular array to iterator using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator"" rel=""noreferrer""><code>Symbol.iterator</code></a> like this:         </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const myArr = [2,3,4]

let it = myArr[Symbol.iterator]();

console.log(it.next());
console.log(it.next());
console.log(it.next());
console.log(it.next());</code></pre>
</div>
</div>
</p>

<p>You can also transform your regular <code>array</code> to an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators"" rel=""noreferrer""><code>iterator</code></a> like this:          </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let myArr = [8, 10, 12];

function makeIterator(array) {
    var nextIndex = 0;
    
    return {
       next: function() {
           return nextIndex &lt; array.length ?
               {value: array[nextIndex++], done: false} :
               {done: true};
       }
    };
};

var it = makeIterator(myArr);

console.log(it.next().value);   // {value: 8, done: false}
console.log(it.next().value);   // {value: 10, done: false}
console.log(it.next().value);   // {value: 12, done: false}
console.log(it.next().value);   // {value: undefined, done: true}</code></pre>
</div>
</div>
</p>

<p><strong>NOTE</strong>:                </p>

<ul>
<li>Iterators are exhaustible in nature. </li>
<li>Objects are not <code>iterable</code> by default. Use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in"" rel=""noreferrer""><code>for..in</code></a> in that case because instead of values it works with keys.</li>
</ul>

<p>You can read more about <code>iteration protocol</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols"" rel=""noreferrer"">here</a>.  </p>
"
"51336430","13","<p>Simply use it like below</p>

<pre><code> $('#isAgeSelected').change(function() {
     if ($(this).is("":checked"")) { // or if($(""#isAgeSelected"").attr('checked') == true){
         $('#txtAge').show();
     } else {
         $('#txtAge').hide();
     }
 });
</code></pre>
"
"51381464","7","<p>You can call forEach like this:</p>

<p><code>forEach</code> will iterate over the array you provide and for each iteration it will have <code>element</code> which holds the value of that iteration. If you need index you can get the current index by passing the <code>i</code> as the second parameter in the callback function for forEach. </p>

<p>Foreach is basically a High Order Function, Which takes another function as its parameter. </p>

<pre><code>let theArray= [1,3,2];

theArray.forEach((element) =&gt; {
  // Use the element of the array
  console.log(element)
}
</code></pre>

<p>Output:</p>

<pre><code>1
3
2
</code></pre>

<p>You can also iterate over an array like this:</p>

<pre><code>for (let i=0; i&lt;theArray.length; i++) {
  console.log(i); // i will have the value of each index
}
</code></pre>
"
"51939755","24","<p>If anybody is interested in the performance side of the multiple mechanisms available for Array iterations, I've prepared the following JSPerf tests:</p>

<p><a href=""https://jsperf.com/fastest-array-iterator"" rel=""nofollow noreferrer"">https://jsperf.com/fastest-array-iterator</a></p>

<p><a href=""https://i.stack.imgur.com/UOJ9F.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/UOJ9F.jpg"" alt=""Performance results""></a></p>

<h2>Results:</h2>

<p>The traditional <code>for()</code> iterator, is by far the fastest method, especially when used with the <strong>array length cached</strong>.</p>

<pre><code>let arr = [1,2,3,4,5];

for(let i=0, size=arr.length; i&lt;size; i++){
    // Do something
}
</code></pre>

<p>The <code>Array.prototype.forEach()</code> and the <code>Array.prototype.map()</code> methods are the slowest approximations, probably as a consequence of the <strong>function call overhead</strong>.</p>
"
"60989209","37","<h1>ES10 Update</h1>
<p>This post summarizes common approaches to element removal from an array as of ECMAScript 2019 (ES10).</p>
<h2>1. General cases</h2>
<h3>1.1. Removing Array element by value using <code>.splice()</code></h3>
<p>| <strong>In-place</strong>: Yes | <br/>
| <strong>Removes duplicates</strong>: Yes(loop), No(indexOf) | <br/>
| <strong>By value / index</strong>: By index |</p>
<p>If you know the value you want to remove from an array you can use the splice method. First, you must identify the index of the target item. You then use the index as the start element and remove just one element.</p>
<pre class=""lang-js prettyprint-override""><code>// With a 'for' loop
const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];
for( let i = 0; i &lt; arr.length; i++){
  if ( arr[i] === 5) {
    arr.splice(i, 1);
  }
} // =&gt; [1, 2, 3, 4, 6, 7, 8, 9, 0]

// With the .indexOf() method
const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];
const i = arr.indexOf(5);
arr.splice(i, 1); // =&gt; [1, 2, 3, 4, 6, 7, 8, 9, 0]
</code></pre>
<h3>1.2. Removing Array element using the <code>.filter()</code> method</h3>
<p>| <strong>In-place</strong>: No | <br/>
| <strong>Removes duplicates</strong>: Yes | <br/>
| <strong>By value / index</strong>: By value | <br/></p>
<p>The specific element can be <em><strong>filtered out</strong></em> from the array, by providing a filtering function. Such function is then called for every element in the array.</p>
<pre class=""lang-js prettyprint-override""><code>const value = 3
let arr = [1, 2, 3, 4, 5, 3]
arr = arr.filter(item =&gt; item !== value)
console.log(arr)
// [ 1, 2, 4, 5 ]
</code></pre>
<h3>1.3. Removing Array element by extending <code>Array.prototype</code></h3>
<p>| <strong>In-place</strong>: Yes/No (Depends on implementation) | <br/>
| <strong>Removes duplicates</strong>: Yes/No (Depends on implementation) | <br/>
| <strong>By value / index</strong>: By index / By value (Depends on implementation) |</p>
<p>The prototype of Array can be extended with additional methods. Such methods will be then available to use on created arrays.</p>
<p><strong>Note:</strong> Extending prototypes of objects from the standard library of JavaScript (like Array) is considered by some as an antipattern.</p>
<pre class=""lang-js prettyprint-override""><code>// In-place, removes all, by value implementation
Array.prototype.remove = function(item) {
    for (let i = 0; i &lt; this.length; i++) {
        if (this[i] === item) {
            this.splice(i, 1);
        }
    }
}
const arr1 = [1,2,3,1];
arr1.remove(1) // arr1 equals [2,3]

// Non-stationary, removes first, by value implementation
Array.prototype.remove = function(item) {
    const arr = this.slice();
    for (let i = 0; i &lt; this.length; i++) {
        if (arr[i] === item) {
            arr.splice(i, 1);
            return arr;
        }
    }
    return arr;
}
let arr2 = [1,2,3,1];
arr2 = arr2.remove(1) // arr2 equals [2,3,1]
</code></pre>
<h3>1.4. Removing Array element using the <code>delete</code> operator</h3>
<p>| <strong>In-place</strong>: Yes | <br/>
| <strong>Removes duplicates</strong>: No | <br/>
| <strong>By value / index</strong>: By index |</p>
<p>Using the delete operator does not affect the length property. Nor does it affect the indexes of subsequent elements. The array becomes sparse, which is a fancy way of saying the deleted item is not removed but becomes undefined.</p>
<pre class=""lang-js prettyprint-override""><code>const arr = [1, 2, 3, 4, 5, 6];
delete arr[4]; // Delete element with index 4
console.log( arr ); // [1, 2, 3, 4, undefined, 6]
</code></pre>
<p>The delete operator is designed to remove properties from JavaScript objects, which arrays are objects.</p>
<h3>1.5. Removing Array element using <code>Object</code> utilities (&gt;= ES10)</h3>
<p>| <strong>In-place</strong>: No | <br/>
| <strong>Removes duplicates</strong>: Yes | <br/>
| <strong>By value / index</strong>: By value |</p>
<p>ES10 introduced <code>Object.fromEntries</code>, which can be used to create the desired Array from any Array-like object and filter unwanted elements during the process.</p>
<pre class=""lang-js prettyprint-override""><code>const object = [1,2,3,4];
const valueToRemove = 3;
const arr = Object.values(Object.fromEntries(
  Object.entries(object)
  .filter(([ key, val ]) =&gt; val !== valueToRemove)
));
console.log(arr); // [1,2,4]
</code></pre>
<h2>2. Special cases</h2>
<h3>2.1 Removing element if it's at the end of the Array</h3>
<strong>2.1.1. Changing Array <code>length</code></strong>
<p>| <strong>In-place</strong>: Yes | <br/>
| <strong>Removes duplicates</strong>: No | <br/>
| <strong>By value / index</strong>: N/A |</p>
<p>JavaScript Array elements can be removed from the end of an array by setting the length property to a value less than the current value. Any element whose index is greater than or equal to the new length will be removed.</p>
<pre class=""lang-js prettyprint-override""><code>const arr = [1, 2, 3, 4, 5, 6];
arr.length = 5; // Set length to remove element
console.log( arr ); // [1, 2, 3, 4, 5]
</code></pre>
<strong>2.1.2. Using <code>.pop()</code> method</strong>
<p>| <strong>In-place</strong>: Yes | <br/>
| <strong>Removes duplicates</strong>: No | <br/>
| <strong>By value / index</strong>: N/A |</p>
<p>The pop method removes the last element of the array, returns that element, and updates the length property. The pop method modifies the array on which it is invoked, This means unlike using delete the last element is removed completely and the array length reduced.</p>
<pre class=""lang-js prettyprint-override""><code>const arr = [1, 2, 3, 4, 5, 6];
arr.pop(); // returns 6
console.log( arr ); // [1, 2, 3, 4, 5]
</code></pre>
<h3>2.2. Removing element if it's at the beginning of the Array</h3>
<p>| <strong>In-place</strong>: Yes | <br/>
| <strong>Removes duplicates</strong>: No | <br/>
| <strong>By value / index</strong>: N/A |</p>
<p>The <code>.shift()</code> method works much like the pop method except it removes the first element of a JavaScript array instead of the last. When the element is removed the remaining elements are shifted down.</p>
<pre class=""lang-js prettyprint-override""><code>const arr = [1, 2, 3, 4];
arr.shift(); // returns 1
console.log( arr ); // [2, 3, 4]
</code></pre>
<h3>2.3. Removing element if it's the only element in the Array</h3>
<p>| <strong>In-place</strong>: Yes | <br/>
| <strong>Removes duplicates</strong>: N/A | <br/>
| <strong>By value / index</strong>: N/A |</p>
<p>The fastest technique is to set an array variable to an empty array.</p>
<pre class=""lang-js prettyprint-override""><code>let arr = [1];
arr = []; //empty array
</code></pre>
<p>Alternatively technique from 2.1.1 can be used by setting length to 0.</p>
"
"61980611","0","<p>I added the function below to this perf test page in the ""library"" section:</p>

<p><a href=""https://jsben.ch/LFfWA"" rel=""nofollow noreferrer"">https://jsben.ch/LFfWA</a></p>

<pre><code>function _replace(t, s, r){
    var i = t.indexOf(s);
    if (i == -1) return t;
    return t.slice(0, i) + r + _replace(t.slice(i + s.length, t.length), s,r);
}
</code></pre>

<p>..and put this in as the test:</p>

<pre><code>var replaced = _replace(testString, 'abc','123');
</code></pre>

<p>.. and that function performs about 34% faster for me than split or regex. The idea / hope was to end up pasting smaller and smaller pieces of the string onto the stack and then building the entire result by unrolling the stack, thereby minimizing extra string copies and extra searches through the same string data and hopefully optimizing use of the CPU cache.</p>

<p>Part of the thought was that if the string isn't too big, it may end up in the CPU cache; passing it and pasting pieces of it puts those bits into the cache, and then the searching can operate entirely using CPU cached data. Now whether or not that's actually what ends up happening I'm sure is entirely js implementation dependant.</p>

<p>This isn't as fast as possible, but it's as fast as I could manage without mutable strings. Arrays in JavaScript probably have a pointer for each element, so, a solution involving a lot of array elements is not likely to be as CPU cache friendly as this.</p>
"
"52144568","4","<p>I need to check the checked property of a checkbox and perform an action based on the checked property using jQuery. </p>

<p>E.X - </p>

<p>1) Run On load to get checkbox value if the age checkbox is checked, then I need to show a text box to enter age, else hide the text box. </p>

<p>2) if the age checkbox is checked, then I need to show a text box to enter age, else hide the text box using click event of checkbox. </p>

<p><strong>so code not returns false by default:</strong> </p>

<p>Try the following:</p>

<pre><code>&lt;html&gt;
        &lt;head&gt;
            &lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
        &lt;/head&gt;
        &lt;body&gt;
            &lt;h1&gt;Jquery Demo&lt;/h1&gt;
            &lt;input type=""checkbox"" name=""isAge"" checked id=""isAge""&gt; isAge &lt;br/&gt;
            &lt;div id=""Age"" style=""display:none""&gt;
              &lt;label&gt;Enter your age&lt;/label&gt;
              &lt;input type=""number"" name=""age""&gt;
            &lt;/div&gt;
            &lt;script type=""text/javascript""&gt;
            if(document.getElementById('isAge').checked) {
                $('#Age').show();
            } else {
                $('#Age').hide();
            }   
            $('#isAge').click(function() {
                if(document.getElementById('isAge').checked) {
                    $('#Age').show();
                } else {
                    $('#Age').hide();
                }
            }); 
            &lt;/script&gt;
        &lt;/body&gt;
    &lt;/html&gt;
</code></pre>

<p>Here is a modified version : <a href=""https://jsfiddle.net/sedhal/0hygLtrz/7/"" rel=""nofollow noreferrer"">https://jsfiddle.net/sedhal/0hygLtrz/7/</a></p>
"
"62508583","4","<p>Here's very simple solution.
You can assign a new method to String object</p>
<pre><code>String.prototype.replaceAll = function(search, replace){
   return this.replace(new RegExp(search, 'g'), replace)
}

var str = &quot;Test abc test test abc test test test abc test test abc&quot;;
str = str.replaceAll('abc', '');

console.log(str) // -&gt; Test  test test  test test test  test test
</code></pre>
"
"52233252","6","<h2>Summary:</h2>

<p>When iterating over an array, we often want to accomplish one of the following goals:</p>

<ol>
<li><p>We want to iterate over the array and create a new array:</p>

<p><code>Array.prototype.map</code> <br><br></p></li>
<li><p>We want to iterate over the array and don't create a new array:</p>

<p><code>Array.prototype.forEach</code> <br><br>
<code>for..of</code> <strong>loop</strong></p></li>
</ol>

<p>In JavaScript, there are many ways of accomplishing both of these goals. However, some are more convenient than others. Below you can find some commonly used methods (the most convenient IMO) to accomplish array iteration in JavaScript.</p>

<h2>Creating new array: <code>Map</code></h2>

<p><code>map()</code> is a function located on <code>Array.prototype</code> which can transform every element of an array and then returns a <strong>new</strong> array. <code>map()</code> takes as an argument a callback function and works in the following manner:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let arr = [1, 2, 3, 4, 5];

let newArr = arr.map((element, index, array) =&gt; {
  return element * 2;
})

console.log(arr);
console.log(newArr);</code></pre>
</div>
</div>
</p>

<p>The callback which we have passed into <code>map()</code> as an argument gets executed for every element. Then an array gets returned which has the same length as the original array. In this new array element is transformed by the callback function passed in as an argument to <code>map()</code>.</p>

<p>The distinct difference between <code>map</code> and another loop mechanism like <code>forEach</code> and a <code>for..of</code> loop is that <strong><code>map</code> returns a new array and leaves the old array intact</strong> (except if you explicitly manipulate it with thinks like <code>splice</code>).</p>

<p>Also, note that the <code>map</code> function's callback provides the index number of the current iteration as a second argument. Furthermore, does the third argument provide the array on which <code>map</code> was called? Sometimes these properties can be very useful.</p>

<h2>Loop using <code>forEach</code></h2>

<p><code>forEach</code> is a function which is located on <code>Array.prototype</code> which takes a callback function as an argument. It then executes this callback function for every element in the array. In contrast to the <code>map()</code> function, the forEach function returns nothing (<code>undefined</code>). For example:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let arr = [1, 2, 3, 4, 5];

arr.forEach((element, index, array) =&gt; {

  console.log(element * 2);

  if (index === 4) {
    console.log(array)
  }
  // index, and oldArray are provided as 2nd and 3th argument by the callback

})

console.log(arr);</code></pre>
</div>
</div>
</p>

<p>Just like the <code>map</code> function, the <code>forEach</code> callback provides the index number of the current iteration as a second argument. Also, does the third argument provide the array on which <code>forEach</code> was called?</p>

<h2>Loop through elements using <code>for..of</code></h2>

<p>The <code>for..of</code> loop loops through every element of an array (or any other iterable object). It works in the following manner:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let arr = [1, 2, 3, 4, 5];

for(let element of arr) {
  console.log(element * 2);
}</code></pre>
</div>
</div>
</p>

<p>In the above example, <code>element</code> stands for an array element and <code>arr</code> is the array which we want to loop. Note that the name <code>element</code> is arbitrary, and we could have picked any other name like 'el' or something more declarative when this is applicable.</p>

<p>Don't confuse the <code>for..in</code> loop with the <code>for..of</code> loop. <code>for..in</code> will loop through all enumerable properties of the array whereas the <code>for..of</code> loop will only loop through the array elements. For example:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let arr = [1, 2, 3, 4, 5];

arr.foo = 'foo';

for(let element of arr) {
  console.log(element);
}

for(let element in arr) {
  console.log(element);
}</code></pre>
</div>
</div>
</p>
"
"63418797","9","<p>In ES6, the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"" rel=""noreferrer"">Set</a> collection provides a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete"" rel=""noreferrer"">delete</a> method to delete a specific value from the array, then convert the Set collection to an array by <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"" rel=""noreferrer"">spread operator</a>.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function deleteItem(list, val) {
    const set = new Set(list);
    set.delete(val);
    
    return [...set];
}

const letters = ['A', 'B', 'C', 'D', 'E'];
console.log(deleteItem(letters, 'C')); // ['A', 'B', 'D', 'E']</code></pre>
</div>
</div>
</p>
"
"63572807","0","<p>I would suggest adding a global method for string class by appending it to prototype chain.</p>
<pre><code>String.prototype.replaceAll = function(fromReplace, toReplace, {ignoreCasing} = {}) { return this.replace(new RegExp(fromReplace, ignoreCasing ? 'ig': 'g'), toReplace);}
</code></pre>
<p>and it can be used like</p>
<pre><code>'stringwithpattern'.replaceAll('pattern','new-pattern')
</code></pre>
"
"52722041","3","<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var array = ['hai', 'hello', 'how', 'are', 'you']
$(document).ready(function () {
  $('#clickButton').click(function () {
    for (var i = 0; i &lt; array.length; i++) {
      alert(array[i])
    }
  })
})</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;input id=""clickButton"" value=""click Me"" type=""button""/&gt;
&lt;div id=""show""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
"
"52728745","10","<p><strong>Using loops with ECMAScript 6  <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"" rel=""noreferrer"">destructuring</a> and the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"" rel=""noreferrer"">spread operator</a></strong></p>
<p>Destructuring and using of the spread operator have proven quite useful for newcomers to ECMAScript 6 as being more human-readable/aesthetic, although some JavaScript veterans might consider it messy. Juniors or some other people might find it useful.</p>
<blockquote>
<p>The following examples will use the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"" rel=""noreferrer""><code>for...of</code></a> statement and the <a href=""https://developer.mozilla.org/ro/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"" rel=""noreferrer""><code>.forEach</code></a> method.</p>
<p><strong>Examples 6, 7, and 8</strong> can be used with any functional loops like <code>.map</code>, <code>.filter</code>, <code>.reduce</code>, <code>.sort</code>, <code>.every</code>, <code>.some</code>. For more information about these methods, check out the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"" rel=""noreferrer"">Array Object</a>.</p>
</blockquote>
<p><strong>Example 1:</strong> Normal <code>for...of</code> loop - no tricks here.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let arrSimple = ['a', 'b', 'c'];

for (let letter of arrSimple) {
  console.log(letter);
}</code></pre>
</div>
</div>
</p>
<p><strong>Example 2:</strong> Split words to characters</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let arrFruits = ['apple', 'orange', 'banana'];

for (let [firstLetter, ...restOfTheWord] of arrFruits) {
  // Create a shallow copy using the spread operator
  let [lastLetter] = [...restOfTheWord].reverse();
  console.log(firstLetter, lastLetter, restOfTheWord);
}</code></pre>
</div>
</div>
</p>
<p><strong>Example 3:</strong> Looping with a <code>key</code> and <code>value</code></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// let arrSimple = ['a', 'b', 'c'];

// Instead of keeping an index in `i` as per example `for(let i = 0 ; i&lt;arrSimple.length;i++)`
// this example will use a multi-dimensional array of the following format type:
// `arrWithIndex: [number, string][]`

let arrWithIndex = [
  [0, 'a'],
  [1, 'b'],
  [2, 'c'],
];

// Same thing can be achieved using `.map` method
// let arrWithIndex = arrSimple.map((i, idx) =&gt; [idx, i]);

// Same thing can be achieved using `Object.entries`
// NOTE: `Object.entries` method doesn't work on Internet Explorer  unless it's polyfilled
// let arrWithIndex = Object.entries(arrSimple);

for (let [key, value] of arrWithIndex) {
  console.log(key, value);
}</code></pre>
</div>
</div>
</p>
<p><strong>Example 4:</strong> Get object properties inline</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let arrWithObjects = [{
    name: 'Jon',
    age: 32
  },
  {
    name: 'Elise',
    age: 33
  }
];

for (let { name, age: aliasForAge } of arrWithObjects) {
  console.log(name, aliasForAge);
}</code></pre>
</div>
</div>
</p>
<p><strong>Example 5:</strong> Get deep object properties of what you need</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let arrWithObjectsWithArr = [{
    name: 'Jon',
    age: 32,
    tags: ['driver', 'chef', 'jogger']
  },
  {
    name: 'Elise',
    age: 33,
    tags: ['best chef', 'singer', 'dancer']
  }
];

for (let { name, tags: [firstItemFromTags, ...restOfTags] } of arrWithObjectsWithArr) {
  console.log(name, firstItemFromTags, restOfTags);
}</code></pre>
</div>
</div>
</p>
<p><strong>Example 6:</strong> Is <strong>Example 3</strong> used with <code>.forEach</code></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let arrWithIndex = [
  [0, 'a'],
  [1, 'b'],
  [2, 'c'],
];

// Not to be confused here, `forEachIndex` is the real index
// `mappedIndex` was created by ""another user"", so you can't really trust it

arrWithIndex.forEach(([mappedIndex, item], forEachIndex) =&gt; {
  console.log(forEachIndex, mappedIndex, item);
});</code></pre>
</div>
</div>
</p>
<p><strong>Example 7:</strong> Is <strong>Example 4</strong> used with <code>.forEach</code></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let arrWithObjects = [{
    name: 'Jon',
    age: 32
  },
  {
    name: 'Elise',
    age: 33
  }
];
// NOTE: Destructuring objects while using shorthand functions
// are required to be surrounded by parentheses
arrWithObjects.forEach( ({ name, age: aliasForAge }) =&gt; {
  console.log(name, aliasForAge)
});</code></pre>
</div>
</div>
</p>
<p><strong>Example 8:</strong> Is <strong>Example 5</strong> used with <code>.forEach</code></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let arrWithObjectsWithArr = [{
    name: 'Jon',
    age: 32,
    tags: ['driver', 'chef', 'jogger']
  },
  {
    name: 'Elise',
    age: 33,
    tags: ['best chef', 'singer', 'dancer']
  }
];

arrWithObjectsWithArr.forEach(({
  name,
  tags: [firstItemFromTags, ...restOfTags]
}) =&gt; {
  console.log(name, firstItemFromTags, restOfTags);
});</code></pre>
</div>
</div>
</p>
"
"53741678","0","<p>I come from Python, and I found this way much clearer.</p>

<p>theArray being the array, and <code>instance</code> being the elements of the array:</p>

<pre><code>for (let instance of theArray)
{
    console.log(""The instance"", instance);
}
</code></pre>

<p>or</p>

<pre><code>for (instance in theArray)
{
    console.log(""The instance"", instance);
}
</code></pre>

<p>compare to:</p>

<pre><code>theArray.forEach(function(instance) {
    console.log(instance);
});
</code></pre>

<p>But at the end of the day both are doing the same thing.</p>
"
"54008708","6","<h1>Edited on 2019 January</h1>

<p>You can use: <a href=""https://api.jquery.com/prop/#prop-propertyName"" rel=""noreferrer""><strong>.prop( propertyName )</strong></a> - <em>version added: 1.6</em></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>p {margin: 20px 0 0;}
b {color: red;}
label {color: red;}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!doctype html&gt;
&lt;html lang=""en""&gt;
&lt;head&gt;
  &lt;meta charset=""utf-8""&gt;
  &lt;script src=""https://code.jquery.com/jquery-1.10.2.js""&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
 
&lt;input id=""check1"" type=""checkbox"" checked=""checked""&gt;
&lt;label for=""check1""&gt;Check here&lt;/label&gt;
&lt;p&gt;&lt;/p&gt;
 
&lt;script&gt;
$( ""input"" ).change(function() {
  var $input = $( this );
  $( ""p"" ).html(
    ""The .attr( \""checked\"" ): &lt;b&gt;"" + $input.attr( ""checked"" ) + ""&lt;/b&gt;&lt;br&gt;"" +
    ""The .prop( \""checked\"" ): &lt;b&gt;"" + $input.prop( ""checked"" ) + ""&lt;/b&gt;&lt;br&gt;"" +
    ""The .is( \"":checked\"" ): &lt;b&gt;"" + $input.is( "":checked"" ) + ""&lt;/b&gt;"" );
}).change();
&lt;/script&gt;
 
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</p>

<h1>On Angular Framework</h1>

<h1>Example 1</h1>

<p><em>In your .html file</em></p>

<pre><code>&lt;input type=""checkbox"" (change)=""toggleEditable($event)""&gt;
</code></pre>

<p><em>In your .ts file</em></p>

<pre><code>toggleEditable(event) {
     if ( event.target.checked ) {
         this.contentEditable = true;
    }
}
</code></pre>

<h1>Example 2</h1>

<p><em>In your .html file</em></p>

<pre><code>&lt;input type=""checkbox"" [(ngModel)]=""isChecked"" (change)=""checkAction(isChecked ? 'Action1':'Action2')"" /&gt;
</code></pre>
"
"54494357","2","<p>If you want to keep your code in the functional way, use <code>map</code>:</p>

<pre><code>theArray.map(instance =&gt; do_something);
</code></pre>

<p>In this way you will generate a new array to future operation and will skip any not desirable side effect.</p>
"
"55064854","6","<p>If you want to loop through an array of objects with the arrow function:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let arr = [{name:'john', age:50}, {name:'clark', age:19}, {name:'mohan', age:26}];

arr.forEach((person)=&gt;{
  console.log('I am ' + person.name + ' and I am ' + person.age + ' old');
})</code></pre>
</div>
</div>
</p>
"
"55098213","1","<p>You can use the forEach() API (provided by JavaScript) which accepts a function as a callback and runs one time for each element present inside the array.</p>

<p>See <em><a href=""https://fullstackgeek.blogspot.com/2019/01/arrays-in-javascript-part-2.html"" rel=""nofollow noreferrer"">Arrays in JavaScript: Part 2</a></em>.</p>
"
"55409844","7","<p>You Can Try This code: </p>

<pre><code>$('#isAgeSelected').click(function(){
   console.log(this.checked);
   if(this.checked == true) {
        $(""#txtAge"").show();
    } else {
       $(""#txtAge"").hide();
   }
});
</code></pre>
"
"63778064","2","<p>This solution combines some previous answers and conforms somewhat better to the proposed August 2020 standard solution. This solution is still viable for me in September 2020, as <code>String.replaceAll</code> is not available in the <code>node</code> binary I am using.</p>
<hr />
<p><code>RegExp.escape</code> is a separate issue to deal with, but is important here because the official proposed solution will automatically escape <code>string</code>-based <code>find</code> input. This <code>String.replaceAll</code> polyfill would not without the <code>RegExp.escape</code> logic.</p>
<p>I have added an answer which doesn't polyfill <code>RegExp.Escape</code>, in the case that you don't want that.</p>
<hr />
<p>If you pass a <code>RegExp</code> to <code>find</code>, you <em>MUST</em> include <code>g</code> as a flag. This polyfill won't provide a nice TypeError for you and will cause you a major bad time.</p>
<p>If you need exact standards conformance, for an application which is rigorously relying on the standard implementation, then I suggest using <code>babel</code> or some other tool to get you the 'right answer' every time instead of SO dot com. That way you won't have any surprises.</p>
<hr />
<p>Code:</p>
<pre><code>if (!Object.prototype.hasOwnProperty.call(RegExp, 'escape')) {
  RegExp.escape = function(string) {
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping
    // https://github.com/benjamingr/RegExp.escape/issues/37
    return string.replace(/[.*+\-?^${}()|[\]\\]/g, '\\$&amp;'); // $&amp; means the whole matched string
  };
}

if (!Object.prototype.hasOwnProperty.call(String, 'replaceAll')) {
  String.prototype.replaceAll = function(find, replace) {
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll
    // If you pass a RegExp to 'find', you _MUST_ include 'g' as a flag.
    // TypeError: &quot;replaceAll must be called with a global RegExp&quot; not included, will silently cause significant errors. _MUST_ include 'g' as a flag for RegExp.
    // String parameters to 'find' do not require special handling.
    // Does not conform to &quot;special replacement patterns&quot; when &quot;Specifying a string as a parameter&quot; for replace
    // Does not conform to &quot;Specifying a function as a parameter&quot; for replace
    return this.replace(
          Object.prototype.toString.call(find) == '[object RegExp]' ?
            find :
            new RegExp(RegExp.escape(find), 'g'),
          replace
        );
  }
}
</code></pre>
<p>Code, Minified:</p>
<pre><code>Object.prototype.hasOwnProperty.call(RegExp,&quot;escape&quot;)||(RegExp.escape=function(e){return e.replace(/[.*+\-?^${}()|[\]\\]/g,&quot;\\$&amp;&quot;)}),Object.prototype.hasOwnProperty.call(String,&quot;replaceAll&quot;)||(String.prototype.replaceAll=function(e,t){return this.replace(&quot;[object RegExp]&quot;==Object.prototype.toString.call(e)?e:new RegExp(RegExp.escape(e),&quot;g&quot;),t)});
</code></pre>
<hr />
<p>Example:</p>
<pre><code>console.log(
  't*.STVAL'
    .replaceAll(
      new RegExp(RegExp.escape('T*.ST'), 'ig'),
      'TEST'
    )
);

console.log(
  't*.STVAL'
    .replaceAll(
      't*.ST',
      'TEST'
    );
);
</code></pre>
<hr />
<p>Code without <code>RegExp.Escape</code>:</p>
<pre><code>if (!Object.prototype.hasOwnProperty.call(String, 'replaceAll')) {
  String.prototype.replaceAll = function(find, replace) {
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll
    // If you pass a RegExp to 'find', you _MUST_ include 'g' as a flag.
    // TypeError: &quot;replaceAll must be called with a global RegExp&quot; not included, will silently cause significant errors. _MUST_ include 'g' as a flag for RegExp.
    // String parameters to 'find' do not require special handling.
    // Does not conform to &quot;special replacement patterns&quot; when &quot;Specifying a string as a parameter&quot; for replace
    // Does not conform to &quot;Specifying a function as a parameter&quot; for replace
    return this.replace(
          Object.prototype.toString.call(find) == '[object RegExp]' ?
            find :
            new RegExp(find.replace(/[.*+\-?^${}()|[\]\\]/g, '\\$&amp;'), 'g'),
          replace
        );
  }
}
</code></pre>
<p>Code without <code>RegExp.Escape</code>, Minified:</p>
<pre><code>Object.prototype.hasOwnProperty.call(String,&quot;replaceAll&quot;)||(String.prototype.replaceAll=function(e,t){return this.replace(&quot;[object RegExp]&quot;==Object.prototype.toString.call(e)?e:new RegExp(e.replace(/[.*+\-?^${}()|[\]\\]/g,&quot;\\$&amp;&quot;),&quot;g&quot;),t)});
</code></pre>
<hr />
"
"64655512","7","<p>The simplest possible way to do this is probably using the filter function. Here's an example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let array = [""hello"", ""world""]
let newarray = array.filter(item =&gt; item !== ""hello"");
console.log(newarray);
// [""world""]</code></pre>
</div>
</div>
</p>
"
"64738813","6","<p>splice() function is able to give you back item in array as well as remove item/ items from specific index</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function removeArrayItem(index, array) {
 array.splice(index, 1);
 return array;
}

let array = [1,2,3,4];
let index = 2;
array = removeArrayItem(index, array);
console.log(array);</code></pre>
</div>
</div>
</p>
"
"65107068","22","<p><a href=""https://i.stack.imgur.com/Nmcnb.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/Nmcnb.jpg"" alt=""enter image description here"" /></a></p>
<h1>2021 UPDATE</h1>
<p>Your question is about how to remove a specific item from an array. By specific item you are referring to a number eg. remove number 5 from array. What I understand you are looking for something like:</p>
<pre><code>// PSEUDOCODE, SCROLL FOR COPY-PASTE CODE
[1,2,3,4,5,6,8,5].remove(5) // result: [1,2,3,4,6,8]
</code></pre>
<p>As for 2021 the best way to achieve it is to use array filter function:</p>
<pre><code>const input = [1,2,3,4,5,6,8,5];
const removeNumber = 5;
const result = input.filter(
    item =&gt; item != removeNumber
);
</code></pre>
<p>Above example uses <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"" rel=""noreferrer"">array.prototype.filter</a> function. It iterates over all array items, and returns only those satisfying <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"" rel=""noreferrer"">arrow function</a>. As a result, old array stays intact, while a new array called result contains all items that are not equal to five. You can test it yourself <a href=""https://jsfiddle.net/ngtkd7ua/"" rel=""noreferrer"">online</a>.</p>
<p>You can visualize how <a href=""https://summonthejson.com/blogs/news/array-prototype-filter"" rel=""noreferrer"">array.prototype.filter</a> like this:</p>
<p><a href=""https://i.stack.imgur.com/TePmK.gif"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/TePmK.gif"" alt=""enter image description here"" /></a></p>
<h2>Considerations</h2>
<p><strong>Code quality</strong></p>
<p>Array.filter.prototype is far the most readable method to remove a number in this case. It leaves little place for mistakes and uses core JS functionality.</p>
<p><strong>Why not array.prototype.map?</strong></p>
<p>Array.prototype.map is sometimes consider as an alternative for array.prototype.filter for that use case. But it should not be used. The reason is that <strong>array.prototype.filter</strong> is conceptually used to <strong>filter items</strong> that satisfy arrow function (exactly what we need), while <strong>array.prototype.map</strong> is used to <strong>transform</strong> items. Since we don't change items while iterating over them, the proper function to use is array.prototype.filter.</p>
<p><strong>Support</strong></p>
<p>As of today (2.12.2020) 97,05% of Internet users <a href=""https://caniuse.com/?search=Array%20filter"" rel=""noreferrer"">browsers support</a> array.prototype.filter. So generally speaking it is safe to use. However, IE6 - 8 does not support it. So if your use case requires support for these browsers there is a nice <a href=""https://vanillajstoolkit.com/polyfills/arrayfilter/"" rel=""noreferrer"">polyfill</a> made by Chris Ferdinanti.</p>
<p><strong>Performance</strong></p>
<p>Array.prototype.filter is great for most use cases. However if you are looking for some performance improvements for advanced data processing you can explore some <a href=""https://stackoverflow.com/questions/31459395/why-using-for-is-faster-than-some-or-filter/31471843"">other options</a> like using pure for. Another great option is to rethink if really array you are processing has to be so big, it may be a sign that JavaScript should receive reduced array for processing from the data source.</p>
"
"65755145","5","<p>This function removes an element from an array from a specific position.</p>
<p><code>array.remove(position);</code></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>Array.prototype.remove = function (pos) {
    this.splice(pos, 1);
}

var arr = [""a"", ""b"", ""c"", ""d"", ""e""];
arr.remove(2); // remove ""c""
console.log(arr);</code></pre>
</div>
</div>
</p>
<p>If you don't know the location of the item to delete use this:</p>
<pre><code>array.erase(element);
</code></pre>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>Array.prototype.erase = function(el) {
    let p = this.indexOf(el); // indexOf use strict equality (===)
    if(p != -1) {
        this.splice(p, 1);
    }
}

var arr = [""a"", ""b"", ""c"", ""d"", ""e""];
arr.erase(""c"");
console.log(arr);</code></pre>
</div>
</div>
</p>
"
"56353259","20","<p><strong>Please try below code to check checkbox is checked or not</strong> </p>

<pre><code>$(document).ready(function(){

    $(""#isAgeSelected"").on('change',function(){

    if($(""#isAgeSelected"").is(':checked'))
        $(""#txtAge"").show();  // checked
    else{
        $(""#txtAge"").hide();  // unchecked
    }

   });

});
</code></pre>
"
"57503659","10","<p>The formal (and perhaps old) way is <code>Array.prototype.forEach(...)</code>:</p>
<pre><code>var arr = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;mango&quot;];
arr.forEach(function(item, index, _) {
   console.log(&quot;[&quot; + index + &quot;] = '&quot; + item + &quot;'&quot;);
});
</code></pre>
"
"57685157","3","<p>In pure js checkbox state is easier to read</p>

<pre><code>isAgeSelected.checked
</code></pre>

<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function check() {
  txtAge.style.display= isAgeSelected.checked ? 'block':'none';
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""&gt;&lt;/script&gt;

Age &lt;input type=""checkbox"" id=""isAgeSelected""/&gt;

&lt;button onclick=""check()""&gt;Check&lt;/button&gt;

&lt;div id=""txtAge"" style=""display:none""&gt;
Age is selected
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
"
"66280226","2","<p>You can use filter for that</p>
<pre><code>function removeNumber(arr, num){
    return arr.filter(el =&gt; {return el !== num});
 }

 let numbers = [1,2,3,4];
 numbers = removeNumber(numbers, 3);
 console.log(numbers); // [1,2,4]
</code></pre>
"
"58215046","51","<p>You can try the <code>change</code> event of checkbox to track the <code>:checked</code> state change.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(""#isAgeSelected"").on('change', function() {
  if ($(""#isAgeSelected"").is(':checked'))
    alert(""checked"");
  else {
    alert(""unchecked"");
  }
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;input type=""checkbox"" id=""isAgeSelected"" /&gt;
&lt;div id=""txtAge"" style=""display:none""&gt;
  Age is selected
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
"
"58216558","22","<p>To act on a checkbox being checked or unchecked on click.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$('#customCheck1').click(function() {
  if (this.checked) {
    console.log('checked');
  } else {
    console.log('un-checked');
  }
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;

&lt;input type=""checkbox"" id=""customCheck1""&gt;</code></pre>
</div>
</div>
</p>
<p>EDIT: Not a nice programming expression <code>if (boolean == true)</code> though <code>.checked</code> property might return other type variables as well..</p>
<p>It is better to use <code>.prop(&quot;checked&quot;)</code> instead. It returns <code>true</code> and <code>false</code> only.</p>
"
"66547880","16","<p>There are many ways to <strong>remove a specific element</strong> from a Javascript array. Following are 05 best available methods I could came up with in my research.</p>
<p><strong>1. Using 'splice()' method directly</strong></p>
<p>In the following code segment, elements in a specific pre-determined location is/are removed from the array.</p>
<ul>
<li>syntax: <em>array_name.splice(begin_index,number_of_elements_remove);</em></li>
<li>application:</li>
</ul>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

console.log(""Original array: "" + arr);

var removed = arr.splice(4, 2);

console.log(""Modified array: "" + arr);

console.log(""Elements removed: "" + removed);</code></pre>
</div>
</div>
</p>

<p><strong>2. Remove elements by 'value' using 'splice()' method</strong></p>
<p>In the following code segment we can remove all the elements equal to a pre-determined value (ex: all the elements equal to value 6) using a if condition inside a for loop.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var arr = [1, 2, 6, 3, 2, 6, 7, 8, 9, 10];

console.log(""Original array: "" + arr);

for (var i = 0; i &lt; arr.length; i++) {

  if (arr[i] === 6) {

    var removed = arr.splice(i, 1);
    i--;
  }

}

console.log(""Modified array: "" + arr); // 6 is removed
console.log(""Removed elements: "" + removed);</code></pre>
</div>
</div>
</p>
<p><strong>3. Using the 'filter()' method remove elements selected by value</strong></p>
<p>Similar to the implementation using 'splice()' method, but instead of mutating the existing array, it create a new array of elements having removed the unwanted element.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

var filtered = array.filter(function(value, index, arr) {
  return value != 6 ;
});

console.log(""Original array: ""+array);

console.log(""New array created: ""+filtered); // 6 is removed</code></pre>
</div>
</div>
</p>
<p><strong>4. Using the 'remove()' method in 'Lodash' Javascript library</strong></p>
<p>In the following code segment, there remove() method in the Javascript library called 'Lodash'. This method is also similar to the filter method.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
console.log(""Original array: "" + array);

var removeElement = _.remove(array, function(n) {
  return n === 6;
});

console.log(""Modified array: "" + array);
console.log(""Removed elements: "" + removeElement); // 6 is removed</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
<p><strong>5. making a custom remove method</strong></p>
<p>There is no native 'array.remove' method in JavaScript but we can create one utilizing above methods we utilized as implemented in the following code snippet.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

function arrayRemove(arr, value) {

  return arr.filter(function(element) {
    return element != value;
  });
}

console.log(""Original array: "" + array);
console.log(""Modified array: "" + arrayRemove(array, 6)); // 6 is removed</code></pre>
</div>
</div>
</p>
<p>The final method (number 05) is more appropriate for solving the above issue.</p>
<p>I wanted to make an answer with simple methods we can utilize to remove an element from the array. Your valuable feedback and comments are highly appreciated to improve my answer.</p>
"
"66814188","3","<p>If you're using a modern browser, you can use .filter.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>Array.prototype.remove = function(x){
    return this.filter(function(v){
        return v !== x;
    });
};

var a = [""a"",""b"",""c""];
var b = a.remove('a');</code></pre>
</div>
</div>
</p>
"
"66956107","10","<p>I like this one-liner:</p>
<pre><code>arr.includes(val) &amp;&amp; arr.splice(arr.indexOf(val), 1)
</code></pre>
<ul>
<li>ES6 (no IE support)</li>
<li>Removal in done in-place.</li>
<li>Fast: no redundant iterations or duplications are made.</li>
<li>Support removing values such <code>null</code> or <code>undefined</code></li>
</ul>
<p>As a prototype</p>
<pre><code>// remove by value. return true if value found and removed, false otherwise
Array.prototype.remove = function(val)
{
    return this.includes(val) &amp;&amp; !!this.splice(this.indexOf(val), 1);
}
</code></pre>
<p>(yes, i read all other answers and couldn't find one that combines <code>includes</code> and <code>splice</code> in the same line)</p>
"
"67158214","5","<p>Try this code using the <code>filter</code> method and you can remove any specific item from an array.</p>
<pre class=""lang-js prettyprint-override""><code>let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
function removeItem(arr, value) {
  return arr.filter(function (ele) {
    return ele !== value;
  });
}
console.log(removeItem(arr, 6));
</code></pre>
"
"59397020","8","<h2>Performance</h2>

<p>Today (2019-12-18) I perform test on my <a href=""https://en.wikipedia.org/wiki/MacOS_High_Sierra"" rel=""nofollow noreferrer"">macOS v10.13.6</a> (High Sierra), on Chrome v 79.0, Safari v13.0.4 and Firefox v71.0 (64 bit) - conclusions about optimisation (and <em><a href=""https://stackoverflow.com/questions/3470990/is-micro-optimization-worth-the-time/3471000#3471000"">micro-optimisation</a></em> which usually is not worth to introduce it to code because the benefit is small, but code complexity grows).</p>

<ul>
<li><p>It looks like the traditional <code>for i</code> (<strong>Aa</strong>) is a good choice to write fast code on all browsers.</p></li>
<li><p>The other solutions, like <code>for-of</code> (<strong>Ad</strong>), all in group <strong>C.</strong>... are usually 2 - 10 (and more) times slower than <strong>Aa</strong>, but for small arrays it is ok to use it - for the sake of increase code clarity.</p></li>
<li><p>The loops with array length cached in <code>n</code> (<strong>Ab, Bb, Be</strong>) are sometimes faster, sometimes not. Probably compilers automatically detect this situation and introduce caching. The speed differences between the cached and no-cached versions (<strong>Aa, Ba, Bd</strong>) are about ~1%, so it looks like introduce <code>n</code> is a <em><a href=""https://stackoverflow.com/questions/3470990/is-micro-optimization-worth-the-time/3471000#3471000"">micro-optimisation</a></em>.</p></li>
<li><p>The <code>i--</code> like solutions where the loop starts from the last array element (<strong>Ac, Bc</strong>) are usually ~30% slower than forward solutions - probably the reason is the way of <a href=""https://stackoverflow.com/questions/1950878/c-for-loop-indexing-is-forward-indexing-faster-in-new-cpus"">CPU memory cache working</a> - forward memory reading is more optimal for CPU caching). <strong>Is recommended to NOT USE such solutions.</strong></p></li>
</ul>

<h2>Details</h2>

<p>In tests we calculate the sum of array elements. I perform a test for small arrays (10 elements) and big arrays (1M elements) and divide them into three groups:</p>

<ul>
<li><strong>A</strong> - <code>for</code> tests</li>
<li><strong>B</strong> - <code>while</code> tests</li>
<li><strong>C</strong> - other/alternative methods</li>
</ul>

<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
//let arr = Array.from(Array(1000000), (x, i) =&gt; i%10);

function Aa(a, s=0) {
  for(let i=0; i&lt;a.length; i++) {
    s += a[i];
  }
  console.log('Aa=', s);
}

function Ab(a, s=0) {
  let n = a.length;
  for(let i=0; i&lt;n; i++) {
    s += a[i];
  }
  console.log('Ab=', s);
}

function Ac(a, s=0) {
  for(let i=a.length; i--;) {
    s += a[i];
  }
  console.log('Ac=', s);
}

function Ad(a, s=0) {
  for(let x of a) {
    s += x;
  }
  console.log('Ad=', s);
}

function Ae(a, s=0) {
  for(let i in a) if (a.hasOwnProperty(i)) {
    s += a[i];
  }
  console.log('Ae=', s);
}

function Ba(a, s=0) {
  let i = -1;
  while(++i &lt; a.length) {
    s+= a[i];
  }
  console.log('Ba=', s);
}

function Bb(a, s=0) {
  let i = -1;
  let n = a.length;
  while(++i &lt; n) {
    s+= a[i];
  }
  console.log('Bb=', s);
}

function Bc(a, s=0) {
  let i = a.length;
  while(i--) {
    s += a[i];
  }
  console.log('Bc=', s);
}

function Bd(a, s=0) {
  let i = 0;
  do {
    s+= a[i]
  } while (++i &lt; a.length);
  console.log('Bd=', s);
}

function Be(a, s=0) {
  let i = 0;
  let n = a.length;
  do {
    s += a[i]
  } while (++i &lt; n);
  console.log('Be=', s);
}

function Bf(a, s=0) {
  const it = a.values(); 
  let e;
  while (!(e = it.next()).done) { 
    s+= e.value; 
  }
  console.log('Bf=', s);
}

function Ca(a, s=0) {
  a.map(x =&gt; { s+=x });
  console.log('Ca=', s);
}

function Cb(a, s=0) {
  a.forEach(x =&gt; { s+=x });
  console.log('Cb=', s);
}

function Cc(a, s=0) {
  a.every(x =&gt; (s += x, 1));
  console.log('Cc=', s);
}

function Cd(a, s=0) {
  a.filter(x =&gt; { s+=x });
  console.log('Cd=',s);
}

function Ce(a, s=0) {
  a.reduce((z, c) =&gt; { s+=c }, 0);
  console.log('Ce=', s);
}

function Cf(a, s=0) {
  a.reduceRight((z, c) =&gt; { s += c }, 0);
  console.log('Cf=', s);
}

function Cg(a, s=0) {
  a.some(x =&gt; { s += x } );
  console.log('Cg=', s);
}

function Ch(a, s=0) {
  Array.from(a, x=&gt; s += x);
  console.log('Cc=', s);
}


Aa(arr);
Ab(arr);
Ac(arr);
Ad(arr);
Ae(arr);

Ba(arr);
Bb(arr);
Bc(arr);
Bd(arr);
Be(arr);
Bf(arr);

Ca(arr);
Cb(arr);
Cc(arr);
Cd(arr);
Ce(arr);
Cf(arr);
Cg(arr);
Ch(arr);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;p style=""color: red""&gt;This snippets only PRESENTS code used for benchmark - it not perform test itself&lt;/p&gt;</code></pre>
</div>
</div>
</p>

<p><strong>Cross browser results</strong></p>

<p>Results for all tested browsers</p>

<p><a href=""https://i.stack.imgur.com/bSXp2.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/bSXp2.png"" alt=""Enter image description here""></a>browsers**</p>

<p><strong>Array with 10 elements</strong></p>

<p>Results for Chrome. You can perform the test on your machine <a href=""https://jsbench.me/pxk4bicjru"" rel=""nofollow noreferrer"">here</a>.</p>

<p><a href=""https://i.stack.imgur.com/VuCMw.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/VuCMw.png"" alt=""Enter image description here""></a></p>

<p><strong>Array with 1,000,000 elements</strong></p>

<p>Results for Chrome. You can perform the test on your machine <a href=""https://jsbench.me/9uk4bj4svg"" rel=""nofollow noreferrer"">here</a></p>

<p><a href=""https://i.stack.imgur.com/8JQf6.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8JQf6.png"" alt=""Enter image description here""></a></p>
"
"59409790","4","<p>You can use:</p>

<ol>
<li><p>ForEach</p>

<pre><code>theArray.forEach(function (array, index) {
    console.log(index);
    console.log(array);
});
</code></pre></li>
<li><p>for</p>

<pre><code>for(var i=0; i&lt;theArray.length; i++) {
    console.log(i)
}
</code></pre></li>
<li><p>map</p>

<pre><code>theArray.map(x =&gt; console.log(x));
</code></pre></li>
<li><p>map</p>

<pre><code>theArray.filter(x =&gt; console.log(x));
</code></pre></li>
</ol>

<p>And there are many others for iteration.</p>
"
"59460408","3","<p>I'd argue that <code>for/of</code> is the way to go:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const arr = ['a', 'b', 'c'];

for (const v of arr) {
  console.log(v); // Prints ""a"", ""b"", ""c""
}</code></pre>
</div>
</div>
</p>

<ul>
<li><p>Unlike <code>for/in</code>, <code>for/of</code> skips non-numeric properties on the array. For example, if you set <code>arr.foo = 'test'</code>, <code>for (var v in arr)</code> will loop through the <code>'foo'</code> key.</p></li>
<li><p>Unlike <code>forEach()</code>, <code>for/of</code> doesn't skip ""holes"" in arrays. <code>const arr = ['a',, 'c']</code> is valid JavaScript, just the 2nd element is a ""hole"". The array is functionally equivalent to <code>['a', undefined, 'c']</code>.</p></li>
</ul>

<p>You can read more in <a href=""https://thecodebarbarian.com/for-vs-for-each-vs-for-in-vs-for-of-in-javascript"" rel=""nofollow noreferrer"">this blog post on <code>for/of</code> vs <code>forEach()</code>.</a></p>
"
"68125524","0","<p>You could using the standard  <strong>proto</strong> of JavaScript and defined this function. for example.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let data = [];
data.__proto__.remove = (n) =&gt; { data = data.flatMap((v) =&gt; { return v !== n ? v : []; }) };

data = [1, 2, 3];
data.remove(2);
console.log(data); // [1,3]

data = ['a','b','c'];
data.remove('b');
console.log(data); // [a,c]</code></pre>
</div>
</div>
</p>
"
"59926311","-2","<p>Using the <strong>grep</strong> function in jQuery, for example:</p>

<pre><code>$.grep([0, 1, 2], function(n, i) {
    return n &gt; 0;
});
</code></pre>
"
"60034027","14","<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(document).on(""click"",""#isAgeSelected"",function(){
  if($(this).prop(""checked"") == true){
    $(""#txtAge"").show();
  }
  else if($(this).prop(""checked"") == false){
    $(""#txtAge"").hide();
  }
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""&gt;&lt;/script&gt;

 &lt;input type=""checkbox"" id=""isAgeSelected""/&gt;

&lt;div id=""txtAge"" style=""display:none""&gt;
&lt;input type=""text"" name=""age"" placeholder=""Please enter age"" /&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
"
"60908003","3","<p>Suppose we have a array of subjects:</p>

<pre><code>  let ddl = new Array();
    if (subjects) {
      subjects.forEach(function (s) {ddl.push({""id"": s.id,""label"": s.name});});
    }
</code></pre>
"
"46181","5702","<p>Using <a href=""http://en.wikipedia.org/wiki/Regular_expression"" rel=""noreferrer"">regular expressions</a> is probably the best way. You can see a bunch of tests <a href=""http://jsfiddle.net/ghvj4gy9/embedded/result,js/"" rel=""noreferrer"">here</a> (taken from <a href=""https://cs.chromium.org/chromium/src/third_party/blink/web_tests/fast/forms/resources/ValidityState-typeMismatch-email.js?q=ValidityState-typeMismatch-email.js&amp;sq=package:chromium&amp;dr"" rel=""noreferrer"">chromium</a>)</p>
<pre><code>function validateEmail(email) {
    const re = /^(([^&lt;&gt;()[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(String(email).toLowerCase());
}
</code></pre>
<p>Here's the example of regular expresion that accepts unicode:</p>
<pre><code>const re = /^(([^&lt;&gt;()[\]\.,;:\s@\&quot;]+(\.[^&lt;&gt;()[\]\.,;:\s@\&quot;]+)*)|(\&quot;.+\&quot;))@(([^&lt;&gt;()[\]\.,;:\s@\&quot;]+\.)+[^&lt;&gt;()[\]\.,;:\s@\&quot;]{2,})$/i;
</code></pre>
<p>But keep in mind that one should not rely only upon JavaScript validation. JavaScript can easily be disabled. This should be validated on the server side as well.</p>
<p>Here's an example of the above in action:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function validateEmail(email) {
  const re = /^(([^&lt;&gt;()[\]\\.,;:\s@\""]+(\.[^&lt;&gt;()[\]\\.,;:\s@\""]+)*)|(\"".+\""))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(email);
}

function validate() {
  const $result = $(""#result"");
  const email = $(""#email"").val();
  $result.text("""");

  if (validateEmail(email)) {
    $result.text(email + "" is valid :)"");
    $result.css(""color"", ""green"");
  } else {
    $result.text(email + "" is not valid :("");
    $result.css(""color"", ""red"");
  }
  return false;
}

$(""#validate"").on(""click"", validate);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""&gt;&lt;/script&gt;

&lt;form&gt;
  &lt;p&gt;Enter an email address:&lt;/p&gt;
  &lt;input id='email'&gt;
  &lt;button type='submit' id='validate'&gt;Validate!&lt;/button&gt;
&lt;/form&gt;

&lt;h2 id='result'&gt;&lt;/h2&gt;</code></pre>
</div>
</div>
</p>
"
"221297","5308","<h1>Short &amp; Snazzy:</h1>
<pre><code>+ new Date()
</code></pre>
<p>A unary operator like <code>plus</code> triggers the <code>valueOf</code> method in the <code>Date</code> object and it returns the timestamp (without any alteration).</p>
<p><strong>Details:</strong></p>
<p>On almost all current browsers you can use <a href=""http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.4.4"" rel=""noreferrer""><code>Date.now()</code></a> to get the UTC timestamp in <strong>milliseconds</strong>; a notable exception to this is IE8 and earlier (see <a href=""http://kangax.github.io/compat-table/es5/#Date.now"" rel=""noreferrer"">compatibility table</a>).</p>
<p>You can easily make a shim for this, though:</p>
<pre><code>if (!Date.now) {
    Date.now = function() { return new Date().getTime(); }
}
</code></pre>
<p>To get the timestamp in <strong>seconds</strong>, you can use:</p>
<pre><code>Math.floor(Date.now() / 1000)
</code></pre>
<p>Or alternatively you could use:</p>
<pre><code>Date.now() / 1000 | 0
</code></pre>
<p>Which should be slightly faster, but also less readable.<br />
(also <a href=""https://stackoverflow.com/questions/7487977/using-bitwise-or-0-to-floor-a-number"">see this answer</a> or <a href=""https://stackoverflow.com/a/11446757/1519836"">this</a> with further explaination to bitwise operators).</p>
<p>I would recommend using <code>Date.now()</code> (with compatibility shim). It's slightly better because it's shorter &amp; doesn't create a new <code>Date</code> object. However, if you don't want a shim &amp; maximum compatibility, you could use the &quot;old&quot; method to get the timestamp in <strong>milliseconds</strong>:</p>
<pre><code>new Date().getTime()
</code></pre>
<p>Which you can then convert to seconds like this:</p>
<pre><code>Math.round(new Date().getTime()/1000)
</code></pre>
<p>And you can also use the <code>valueOf</code> method which we showed above:</p>
<pre><code>new Date().valueOf()
</code></pre>
<p><strong>Timestamp in Milliseconds</strong></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var timeStampInMs = window.performance &amp;&amp; window.performance.now &amp;&amp; window.performance.timing &amp;&amp; window.performance.timing.navigationStart ? window.performance.now() + window.performance.timing.navigationStart : Date.now();

console.log(timeStampInMs, Date.now());</code></pre>
</div>
</div>
</p>
"
"221357","154","<pre><code>var time = Date.now || function() {
  return +new Date;
};

time();
</code></pre>
"
"67718846","2","<p>The <strong>jQuery prop()</strong> method provides a simple, effective, and reliable way to track down the current status of a checkbox. It works pretty well in all conditions because every checkbox has a <strong>checked property</strong> which specifies its checked or unchecked status.</p>
<p>Do not misunderstand it with the checked attribute. The checked attribute only define the initial state of a checkbox, and not the current state. Let's see how it works:</p>
<pre><code>&lt;script&gt;
    $(document).ready(function(){
        $('input[type=&quot;checkbox&quot;]').click(function(){
            if($(this).prop(&quot;checked&quot;) == true){
                console.log(&quot;Checkbox is checked.&quot;);
            }
            else if($(this).prop(&quot;checked&quot;) == false){
                console.log(&quot;Checkbox is unchecked.&quot;);
            }
        });
    });
&lt;/script&gt;
</code></pre>
<p>For Detailed Explaination: <a href=""https://www.tutorialrepublic.com/faq/how-to-check-a-checkbox-is-checked-or-not-using-jquery.php"" rel=""nofollow noreferrer"">jQuery prop()</a></p>
<p>However, you can use the <strong>is() function</strong> of jQuery too.</p>
<pre><code>if($(&quot;#isAgeSelected&quot;).is(':checked'))
    $(&quot;#txtAge&quot;).show();  // Age is selected - Show the Age
else
    $(&quot;#txtAge&quot;).hide();  // Age is not selected - Hide the Age
</code></pre>
"
"67987811","7","<p>There are 4 ways of array iteration:</p>
<pre><code>// 1: for

for (let i = 0; i &lt; arr.length; ++i) {
  console.log(arr[i]);
}

// 2: forEach

arr.forEach((v, i) =&gt; console.log(v));

// 3: for in

for (let i in arr) {
  console.log(arr[i]);
}

// 4: for of

for (const v of arr) {
  console.log(v);
}
</code></pre>
<p>Summary: 1 and 3 solutions create extra variable, 2 - create extra function context. The best way is 4th - &quot;for of&quot;.</p>
"
"3552493","1569","<p>For custom-delimited date formats, you have to pull out the date (or time)
components from a <a href=""//developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"" rel=""noreferrer""><code>DateTimeFormat</code></a> object (which is part of the
<a href=""//developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl"" rel=""noreferrer"">ECMAScript Internationalization API</a>), and then manually create a string
with the delimiters you want.</p>
<p>To do this, you can use <a href=""//developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts"" rel=""noreferrer""><code>DateTimeFormat#formatToParts</code></a>. You could
destructure the array, but that is not ideal, as the array output depends on the
locale:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>{ // example 1
   let f = new Intl.DateTimeFormat('en');
   let a = f.formatToParts();
   console.log(a);
}
{ // example 2
   let f = new Intl.DateTimeFormat('hi');
   let a = f.formatToParts();
   console.log(a);
}</code></pre>
</div>
</div>
</p>
<p>Better would be to map a format array to resultant strings:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function join(t, a, s) {
   function format(m) {
      let f = new Intl.DateTimeFormat('en', m);
      return f.format(t);
   }
   return a.map(format).join(s);
}

let a = [{day: 'numeric'}, {month: 'short'}, {year: 'numeric'}];
let s = join(new Date, a, '-');
console.log(s);</code></pre>
</div>
</div>
</p>
<p>You can also pull out the parts of a <code>DateTimeFormat</code> one-by-one using
<a href=""//developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/format"" rel=""noreferrer""><code>DateTimeFormat#format</code></a>, but note that when using this method, as of March
2020, there is <a href=""//stackoverflow.com/questions/60544534#60545316"">a bug</a> in the ECMAScript implementation when it comes to
leading zeros on minutes and seconds (this bug is circumvented by the approach
above).</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let d = new Date(2010, 7, 5);
let ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d);
let mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(d);
let da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d);
console.log(`${da}-${mo}-${ye}`);</code></pre>
</div>
</div>
</p>
<p>When working with dates and times, it is usually worth using a library (eg.
<a href=""//momentjs.com"" rel=""noreferrer"">moment.js</a>, <a href=""//moment.github.io/luxon"" rel=""noreferrer"">luxon</a>) because of the many hidden complexities of the
field.</p>
<p>Note that the ECMAScript Internationalization API, used in the solutions above
is not supported <a href=""//caniuse.com#search=datetimeformat"" rel=""noreferrer"">in IE10</a> (<a href=""//gs.statcounter.com/browser-version-market-share"" rel=""noreferrer"">0.03%</a> global browser market share in Feb
2020).</p>
"
"5166806","69","<p>Correct validation of email address in compliance with the RFCs is not something that can be achieved with a one-liner regular expression. An article with the best solution I've found in PHP is <em><a href=""http://www.dominicsayers.com/isemail/"" rel=""noreferrer"">What is a valid email address?</a></em>. Obviously, it has been ported to Java. <strike>I think the function is too complex to be ported and used in JavaScript.</strike> JavaScript/node.js port: <a href=""https://www.npmjs.com/package/email-addresses"" rel=""noreferrer"">https://www.npmjs.com/package/email-addresses</a>.</p>

<p>A good practice is to validate your data on the client, but double-check the validation on the server. With this in mind, you can simply check whether a string looks like a valid email address on the client and perform the strict check on the server.</p>

<p>Here's the JavaScript function I use to check if a string looks like a valid mail address:</p>

<pre><code>function looksLikeMail(str) {
    var lastAtPos = str.lastIndexOf('@');
    var lastDotPos = str.lastIndexOf('.');
    return (lastAtPos &lt; lastDotPos &amp;&amp; lastAtPos &gt; 0 &amp;&amp; str.indexOf('@@') == -1 &amp;&amp; lastDotPos &gt; 2 &amp;&amp; (str.length - lastDotPos) &gt; 2);
}
</code></pre>

<p>Explanation:</p>

<ul>
<li><p><code>lastAtPos &lt; lastDotPos</code>: Last <code>@</code> should be before last <code>.</code> since <code>@</code> cannot be part of server name (as far as I know).</p></li>
<li><p><code>lastAtPos &gt; 0</code>: There should be something (the email username) before the last <code>@</code>.</p></li>
<li><p><code>str.indexOf('@@') == -1</code>: There should be no <code>@@</code> in the address. Even if <code>@</code> appears as the last character in email username, it has to be quoted so <code>""</code> would be between that <code>@</code> and the last <code>@</code> in the address.</p></li>
<li><p><code>lastDotPos &gt; 2</code>: There should be at least three characters before the last dot, for example <code>a@b.com</code>.</p></li>
<li><p><code>(str.length - lastDotPos) &gt; 2</code>: There should be enough characters after the last dot to form a two-character domain. I'm not sure if the brackets are necessary.</p></li>
</ul>
"
"5971324","294","<p>JavaScript works with the number of milliseconds since the epoch whereas most other languages work with the seconds. You could work with milliseconds but as soon as you pass a value to say PHP, the PHP native functions will probably fail. So to be sure I always use the seconds, not milliseconds.</p>

<p>This will give you a Unix timestamp (in seconds):</p>

<pre><code>var unix = Math.round(+new Date()/1000);
</code></pre>

<p>This will give you the milliseconds since the epoch (not Unix timestamp):</p>

<pre><code>var milliseconds = new Date().getTime();
</code></pre>
"
"8565823","25","<p>You should not use regular expressions to validate an input string to check if it's an email. It's too complicated and would not cover all the cases.</p>

<p>Now since you can only cover 90% of the cases, write something like:</p>

<pre><code>function isPossiblyValidEmail(txt) {
   return txt.length &gt; 5 &amp;&amp; txt.indexOf('@')&gt;0;
}
</code></pre>

<p>You can refine it. For instance, 'aaa@' is valid. But overall you get the gist. And don't get carried away... A simple 90% solution is better than 100% solution that does not work. </p>

<p>The world needs simpler code...</p>
"
"8676471","146","<p>I think you can just use the <strong>non-standard</strong> Date method <code>toLocaleFormat(formatString)</code></p>

<p><strong>formatString:</strong> A format string in the same format expected by the <a href=""http://www.cplusplus.com/reference/clibrary/ctime/strftime/"" rel=""noreferrer"" title=""strftime""><code>strftime()</code></a> function in C.</p>

<pre><code>var today = new Date();
today.toLocaleFormat('%d-%b-%Y'); // 30-Dec-2011
</code></pre>

<p><strong>References:</strong></p>

<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat"" rel=""noreferrer"" title=""toLocaleFormat"">tolocaleformat</a></li>
<li><a href=""http://www.cplusplus.com/reference/clibrary/ctime/strftime/"" rel=""noreferrer"" title=""strftime"">strftime</a></li>
</ul>
"
"9204568","1032","<p>I've slightly modified <a href=""https://stackoverflow.com/a/48800/4832311"">Jaymon's answer</a> for people who want really simple validation in the form of:</p>
<pre><code>anystring@anystring.anystring
</code></pre>
<p>The regular expression:</p>
<pre><code>/\S+@\S+\.\S+/
</code></pre>
<p>To prevent matching multiple @ signs:</p>
<pre><code>/^[^\s@]+@[^\s@]+$/
</code></pre>
<p>Example JavaScript function:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function validateEmail(email) 
    {
        var re = /\S+@\S+\.\S+/;
        return re.test(email);
    }
    
console.log(validateEmail('anystring@anystring.anystring'));</code></pre>
</div>
</div>
</p>
"
"10428184","28","<p>The <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime""><code>Date.getTime()</code></a> method can be used with a little tweak:</p>

<blockquote>
  <p>The value returned by the getTime method is the number of milliseconds
  since 1 January 1970 00:00:00 UTC.</p>
</blockquote>

<p>Divide the result by 1000 to get the Unix timestamp, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor""><code>floor</code></a> if necessary:</p>

<pre><code>(new Date).getTime() / 1000
</code></pre>

<hr>

<p><sup>The <code>Date.valueOf()</code> method is functionally equivalent to <code>Date.getTime()</code>, which makes it possible to use arithmetic operators on date object to achieve identical results. In my opinion, this approach affects readability.</sup></p>
"
"10906478","13","<p>In contrast to <em>squirtle</em>, here is a complex solution, but it does a mighty fine job of validating emails properly:</p>

<pre><code>function isEmail(email) { 
    return /^((([a-z]|\d|[!#\$%&amp;'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&amp;'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(email);
} 
</code></pre>

<p>Use like so:<br><br></p>

<pre><code>if (isEmail('youremail@yourdomain.com')){ console.log('This is email is valid'); }
</code></pre>
"
"11172083","460","<p>Well, what I wanted was to convert today's date to a <a href=""http://en.wikipedia.org/wiki/MySQL"" rel=""noreferrer"">MySQL</a> friendly date string like 2012-06-23, and to use that string as a parameter in one of my queries. The simple solution I've found is this:</p>

<pre><code>var today = new Date().toISOString().slice(0, 10);
</code></pre>

<p>Keep in mind that the above solution does <strong>not</strong> take into account your timezone offset.</p>

<p>You might consider using this function instead:</p>

<pre><code>function toJSONLocal (date) {
    var local = new Date(date);
    local.setMinutes(date.getMinutes() - date.getTimezoneOffset());
    return local.toJSON().slice(0, 10);
}
</code></pre>

<p>This will give you the correct date in case you are executing this code around the start/end of the day.</p>

<ul>
<li>Example: <a href=""http://jsfiddle.net/simo/sapuhzmm/"" rel=""noreferrer"">http://jsfiddle.net/simo/sapuhzmm/</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString"" rel=""noreferrer"">Date.toISOString</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON"" rel=""noreferrer"">Date.toJSON</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice"" rel=""noreferrer"">String.slice</a></li>
</ul>
"
"11261424","4","<p>Add the <a href=""http://en.wikipedia.org/wiki/JQuery_UI"" rel=""nofollow"">jQuery UI</a> plugin to your page:</p>

<pre><code>function DateFormate(dateFormate, datetime) {
    return $.datepicker.formatDate(dateFormate, datetime);
};
</code></pre>
"
"11446757","143","<p><em><strong>I provide multiple solutions with descriptions in this answer. Feel free to ask questions if anything is unclear</strong></em></p>
<hr />
<p><strong>Quick and dirty solution:</strong></p>
<pre><code>Date.now() /1000 |0
</code></pre>
<blockquote>
<p><em><strong>Warning</strong>: it <strong>might</strong> break in 2038 and return negative numbers if you do the <code>|0</code> magic. Use <code>Math.floor()</code> instead by that time</em></p>
</blockquote>
<p><strong><code>Math.floor()</code> solution:</strong></p>
<pre><code>Math.floor(Date.now() /1000);
</code></pre>
<hr />
<p><strong>Some nerdy alternative by <a href=""//stackoverflow.com/users/283863"">Derek 朕會功夫</a> taken from the comments below this answer:</strong></p>
<pre><code>new Date/1e3|0
</code></pre>
<hr />
<p><strong>Polyfill to get <code>Date.now()</code> working:</strong></p>
<p>To get it working in IE you could do this (Polyfill from <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now"" rel=""noreferrer"">MDN</a>):</p>
<pre><code>if (!Date.now) {
    Date.now = function now() {
        return new Date().getTime();
    };
}
</code></pre>
<hr />
<p><strong>If you do not care about the year / day of week / daylight saving time you need to remember this for dates after 2038:</strong></p>
<p>Bitwise operations will cause usage of 32 Bit Integers instead of 64 Bit Floating Point.</p>
<p>You will need to properly use it as:</p>
<pre><code>Math.floor(Date.now() / 1000)
</code></pre>
<hr />
<p>If you just want to know the relative time from the point of when the code was run through first you could use something like this:</p>
<pre><code>const relativeTime = (() =&gt; {
    const start = Date.now();
    return () =&gt; Date.now() - start;
})();
</code></pre>
<hr />
<p><strong>In case you are using jQuery you could use <code>$.now()</code> as described in <a href=""http://api.jquery.com/jquery.now/"" rel=""noreferrer"">jQuery's Docs</a> which makes the polyfill obsolete since <code>$.now()</code> internally does the same thing: <code>(new Date).getTime()</code></strong></p>
<p>If you are just happy about jQuery's version, consider upvoting <a href=""//stackoverflow.com/a/15434736/1519836""><strong>this</strong></a> answer since I did not find it myself.</p>
<hr />
<p><strong>Now a tiny explaination of what <code>|0</code> does:</strong></p>
<p>By providing <code>|</code>, you tell the interpreter to do a binary OR operation.<br />
Bit operations require absolute numbers which turns the decimal result from <code>Date.now() / 1000</code> into an integer.</p>
<p>During that conversion, decimals are removed, resulting in a similar result to what using <code>Math.floor()</code> would output.</p>
<blockquote>
<p><strong>Be warned though:</strong> it will convert a 64 bit double to a 32 bit integer.<br />
This will result in information loss when dealing with huge numbers.<br />
Timestamps will break after 2038 due to 32 bit integer overflow unless Javascript moves to 64 Bit Integers in Strict Mode.</p>
</blockquote>
<hr />
<p><strong>For further information about <code>Date.now</code> follow this link: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now"" rel=""noreferrer""><code>Date.now()</code> @ MDN</a></strong></p>
"
"12199843","6","<p>Sectrean's solution works great, but it was failing my <a href=""https://en.wikipedia.org/wiki/Lint_%28software%29"" rel=""nofollow"">linter</a>. So I added some escapes:</p>

<pre><code>function validateEmail(email){ 
     var re = /^(([^&lt;&gt;()[]\\.,;:\s@\""]+(\.[^&lt;&gt;()[]\\.,;:\s@\""]+)*)|(\"".+\""))@(([[0-9]{1,3}\‌​.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/; 
     return re.test(email); 
}
</code></pre>
"
"12536800","43","<p>Just to add up, here's a function to return a timestamp string in Javascript. 
Example: 15:06:38 PM</p>

<pre><code>function displayTime() {
    var str = """";

    var currentTime = new Date()
    var hours = currentTime.getHours()
    var minutes = currentTime.getMinutes()
    var seconds = currentTime.getSeconds()

    if (minutes &lt; 10) {
        minutes = ""0"" + minutes
    }
    if (seconds &lt; 10) {
        seconds = ""0"" + seconds
    }
    str += hours + "":"" + minutes + "":"" + seconds + "" "";
    if(hours &gt; 11){
        str += ""PM""
    } else {
        str += ""AM""
    }
    return str;
}
</code></pre>
"
"12894223","-7","<pre><code>function validateEmail(elementValue){        
    var emailPattern = /^[a-zA-Z0-9._]+[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[a-zA-Z]{2,4}$/;  
    return emailPattern.test(elementValue);   
  }   
</code></pre>

<p>It returns true if the email address is valid. Otherwise, it will return false.</p>
"
"13975255","103","<p>In modern browsers you can build on top of @Sushil's answer with pure JavaScript and the <a href=""http://en.wikipedia.org/wiki/Document_Object_Model"" rel=""noreferrer"">DOM</a>:</p>

<pre><code>function validateEmail(value) {
  var input = document.createElement('input');

  input.type = 'email';
  input.required = true;
  input.value = value;

  return typeof input.checkValidity === 'function' ? input.checkValidity() : /\S+@\S+\.\S+/.test(value);
}
</code></pre>

<p>I've put together an example in the fiddle <a href=""http://jsfiddle.net/boldewyn/2b6d5/"" rel=""noreferrer"">http://jsfiddle.net/boldewyn/2b6d5/</a>. Combined with feature detection and the bare-bones validation from <a href=""https://stackoverflow.com/a/9204568/324094"">Squirtle's Answer</a>, it frees you from the regular expression massacre and does not bork on old browsers.</p>
"
"14622590","10","<pre><code>&lt;form name=""validation"" onSubmit=""return checkbae()""&gt;
    Please input a valid email address:&lt;br /&gt;

    &lt;input type=""text"" size=18 name=""emailcheck""&gt;
    &lt;input type=""submit"" value=""Submit""&gt;
&lt;/form&gt;

&lt;script language=""JavaScript1.2""&gt;
    var testresults
    function checkemail(){
        var str = document.validation.emailcheck.value
        var filter = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i
        if (filter.test(str))
            testresults = true
        else {
            alert(""Please input a valid email address!"")
            testresults = false
        }
        return (testresults)
    }
&lt;/script&gt;

&lt;script&gt;
    function checkbae(){
        if (document.layers || document.getElementById || document.all)
            return checkemail()
        else
            return true
    }
&lt;/script&gt;
</code></pre>
"
"16014483","12","<p>My knowledge of <a href=""http://en.wikipedia.org/wiki/Regular_expression"" rel=""noreferrer"">regular expressions</a> is not that good. That's why I check the general syntax with a simple regular expression first and check more specific options with other functions afterwards. This may not be not the best technical solution, but this way I'm way more flexible and faster.</p>

<p>The most common errors I've come across are spaces (especially at the beginning and end) and occasionally a double dot.</p>

<pre><code>function check_email(val){
    if(!val.match(/\S+@\S+\.\S+/)){ // Jaymon's / Squirtle's solution
        // Do something
        return false;
    }
    if( val.indexOf(' ')!=-1 || val.indexOf('..')!=-1){
        // Do something
        return false;
    }
    return true;
}

check_email('check@thiscom'); // Returns false
check_email('check@this..com'); // Returns false
check_email(' check@this.com'); // Returns false
check_email('check@this.com'); // Returns true
</code></pre>
"
"16016476","71","<p>This is the correct RFC822 version.</p>

<pre><code>function checkEmail(emailAddress) {
  var sQtext = '[^\\x0d\\x22\\x5c\\x80-\\xff]';
  var sDtext = '[^\\x0d\\x5b-\\x5d\\x80-\\xff]';
  var sAtom = '[^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+';
  var sQuotedPair = '\\x5c[\\x00-\\x7f]';
  var sDomainLiteral = '\\x5b(' + sDtext + '|' + sQuotedPair + ')*\\x5d';
  var sQuotedString = '\\x22(' + sQtext + '|' + sQuotedPair + ')*\\x22';
  var sDomain_ref = sAtom;
  var sSubDomain = '(' + sDomain_ref + '|' + sDomainLiteral + ')';
  var sWord = '(' + sAtom + '|' + sQuotedString + ')';
  var sDomain = sSubDomain + '(\\x2e' + sSubDomain + ')*';
  var sLocalPart = sWord + '(\\x2e' + sWord + ')*';
  var sAddrSpec = sLocalPart + '\\x40' + sDomain; // complete RFC822 email address spec
  var sValidEmail = '^' + sAddrSpec + '$'; // as whole string

  var reValidEmail = new RegExp(sValidEmail);

  return reValidEmail.test(emailAddress);
}
</code></pre>
"
"16406643","20","<p>Here's is some code I just wrote to handle the date formatting for a project I'm working on. It mimics the PHP date formatting functionality to suit my needs. Feel free to use it, it's just extending the already existing Date() object. This may not be the most elegant solution but it's working for my needs.</p>

<pre><code>var d = new Date(); 
d_string = d.format(""m/d/Y h:i:s"");

/**************************************
 * Date class extension
 * 
 */
    // Provide month names
    Date.prototype.getMonthName = function(){
        var month_names = [
                            'January',
                            'February',
                            'March',
                            'April',
                            'May',
                            'June',
                            'July',
                            'August',
                            'September',
                            'October',
                            'November',
                            'December'
                        ];

        return month_names[this.getMonth()];
    }

    // Provide month abbreviation
    Date.prototype.getMonthAbbr = function(){
        var month_abbrs = [
                            'Jan',
                            'Feb',
                            'Mar',
                            'Apr',
                            'May',
                            'Jun',
                            'Jul',
                            'Aug',
                            'Sep',
                            'Oct',
                            'Nov',
                            'Dec'
                        ];

        return month_abbrs[this.getMonth()];
    }

    // Provide full day of week name
    Date.prototype.getDayFull = function(){
        var days_full = [
                            'Sunday',
                            'Monday',
                            'Tuesday',
                            'Wednesday',
                            'Thursday',
                            'Friday',
                            'Saturday'
                        ];
        return days_full[this.getDay()];
    };

    // Provide full day of week name
    Date.prototype.getDayAbbr = function(){
        var days_abbr = [
                            'Sun',
                            'Mon',
                            'Tue',
                            'Wed',
                            'Thur',
                            'Fri',
                            'Sat'
                        ];
        return days_abbr[this.getDay()];
    };

    // Provide the day of year 1-365
    Date.prototype.getDayOfYear = function() {
        var onejan = new Date(this.getFullYear(),0,1);
        return Math.ceil((this - onejan) / 86400000);
    };

    // Provide the day suffix (st,nd,rd,th)
    Date.prototype.getDaySuffix = function() {
        var d = this.getDate();
        var sfx = [""th"",""st"",""nd"",""rd""];
        var val = d%100;

        return (sfx[(val-20)%10] || sfx[val] || sfx[0]);
    };

    // Provide Week of Year
    Date.prototype.getWeekOfYear = function() {
        var onejan = new Date(this.getFullYear(),0,1);
        return Math.ceil((((this - onejan) / 86400000) + onejan.getDay()+1)/7);
    } 

    // Provide if it is a leap year or not
    Date.prototype.isLeapYear = function(){
        var yr = this.getFullYear();

        if ((parseInt(yr)%4) == 0){
            if (parseInt(yr)%100 == 0){
                if (parseInt(yr)%400 != 0){
                    return false;
                }
                if (parseInt(yr)%400 == 0){
                    return true;
                }
            }
            if (parseInt(yr)%100 != 0){
                return true;
            }
        }
        if ((parseInt(yr)%4) != 0){
            return false;
        } 
    };

    // Provide Number of Days in a given month
    Date.prototype.getMonthDayCount = function() {
        var month_day_counts = [
                                    31,
                                    this.isLeapYear() ? 29 : 28,
                                    31,
                                    30,
                                    31,
                                    30,
                                    31,
                                    31,
                                    30,
                                    31,
                                    30,
                                    31
                                ];

        return month_day_counts[this.getMonth()];
    } 

    // format provided date into this.format format
    Date.prototype.format = function(dateFormat){
        // break apart format string into array of characters
        dateFormat = dateFormat.split("""");

        var date = this.getDate(),
            month = this.getMonth(),
            hours = this.getHours(),
            minutes = this.getMinutes(),
            seconds = this.getSeconds();
        // get all date properties ( based on PHP date object functionality )
        var date_props = {
            d: date &lt; 10 ? '0'+date : date,
            D: this.getDayAbbr(),
            j: this.getDate(),
            l: this.getDayFull(),
            S: this.getDaySuffix(),
            w: this.getDay(),
            z: this.getDayOfYear(),
            W: this.getWeekOfYear(),
            F: this.getMonthName(),
            m: month &lt; 10 ? '0'+(month+1) : month+1,
            M: this.getMonthAbbr(),
            n: month+1,
            t: this.getMonthDayCount(),
            L: this.isLeapYear() ? '1' : '0',
            Y: this.getFullYear(),
            y: this.getFullYear()+''.substring(2,4),
            a: hours &gt; 12 ? 'pm' : 'am',
            A: hours &gt; 12 ? 'PM' : 'AM',
            g: hours % 12 &gt; 0 ? hours % 12 : 12,
            G: hours &gt; 0 ? hours : ""12"",
            h: hours % 12 &gt; 0 ? hours % 12 : 12,
            H: hours,
            i: minutes &lt; 10 ? '0' + minutes : minutes,
            s: seconds &lt; 10 ? '0' + seconds : seconds           
        };

        // loop through format array of characters and add matching data else add the format character (:,/, etc.)
        var date_string = """";
        for(var i=0;i&lt;dateFormat.length;i++){
            var f = dateFormat[i];
            if(f.match(/[a-zA-Z]/g)){
                date_string += date_props[f] ? date_props[f] : '';
            } else {
                date_string += f;
            }
        }

        return date_string;
    };
/*
 *
 * END - Date class extension
 * 
 ************************************/
</code></pre>
"
"16666424","20","<p>Here is a simple function to generate timestamp in the format: mm/dd/yy hh:mi:ss </p>

<pre><code>function getTimeStamp() {
    var now = new Date();
    return ((now.getMonth() + 1) + '/' +
            (now.getDate()) + '/' +
             now.getFullYear() + "" "" +
             now.getHours() + ':' +
             ((now.getMinutes() &lt; 10)
                 ? (""0"" + now.getMinutes())
                 : (now.getMinutes())) + ':' +
             ((now.getSeconds() &lt; 10)
                 ? (""0"" + now.getSeconds())
                 : (now.getSeconds())));
}
</code></pre>
"
"17290569","24","<p>Simply check out if the entered email address is valid or not using HTML.</p>

<pre><code>&lt;input type=""email""/&gt;
</code></pre>

<p>There isn't any need to write a function for validation.</p>
"
"19718337","-6","<p><a href=""http://en.wikipedia.org/wiki/W3Schools"" rel=""nofollow"">W3Schools</a> gives a good simple and efficient script to validate an email:  </p>

<pre><code>function validateEmail(email) {
    var atpos=email.indexOf(""@"");
    var dotpos=email.lastIndexOf(""."");
    if (atpos &lt; 1 || dotpos &lt; atpos+2 || dotpos+2 &gt;= email.length) {
        alert(""Not a valid e-mail address"");
        return false;
    }
    return true;
}
</code></pre>

<p>Note that you will have to remove spaces if there are any though, with something like this:</p>

<pre><code>.replace(/ /g,'')
</code></pre>

<p>Source: <em><a href=""http://www.w3schools.com/js/js_form_validation.asp"" rel=""nofollow"">JavaScript Form Validation</a></em></p>
"
"20285787","14","<p>Use this code inside your validator function:</p>

<pre><code>var emailID = document.forms[""formName""][""form element id""].value;
atpos = emailID.indexOf(""@"");
dotpos = emailID.lastIndexOf(""."");
if (atpos &lt; 1 || ( dotpos - atpos &lt; 2 ))
{
    alert(""Please enter correct email ID"")
    return false;
}
</code></pre>

<p>Else you can use <a href=""http://en.wikipedia.org/wiki/JQuery"" rel=""noreferrer"">jQuery</a>. Inside rules define:</p>

<pre><code>eMailId: {
    required: true,
    email: true
}
</code></pre>
"
"21397719","3","<pre><code>&lt;pre&gt;
**The personal_info part contains the following ASCII characters.
1.Uppercase (A-Z) and lowercase (a-z) English letters.
2.Digits (0-9).
3.Characters ! # $ % &amp; ' * + - / = ? ^ _ ` { | } ~
4.Character . ( period, dot or fullstop) provided that it is not the first or last character and it will not come one after the other.**
&lt;/pre&gt;
*Example of valid email id*
&lt;pre&gt;
yoursite@ourearth.com
my.ownsite@ourearth.org
mysite@you.me.net
xxxx@gmail.com
xxxxxx@yahoo.com
&lt;/pre&gt;
&lt;pre&gt;
xxxx.ourearth.com [@ is not present] 
xxxx@.com.my [ tld (Top Level domain) can not start with dot ""."" ]
@you.me.net [ No character before @ ]
xxxx123@gmail.b [ "".b"" is not a valid tld ]
xxxx@.org.org [ tld can not start with dot ""."" ]
.xxxx@mysite.org [ an email should not be start with ""."" ]
xxxxx()*@gmail.com [ here the regular expression only allows character, digit, underscore and dash ]
xxxx..1234@yahoo.com [double dots are not allowed
&lt;/pre&gt;
**javascript mail code**

    function ValidateEmail(inputText)
    {
    var mailformat = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
    if(inputText.value.match(mailformat))
    {
    document.form1.text1.focus();
    return true;
    }
    else
    {
    alert(""You have entered an invalid email address!"");
    document.form1.text1.focus();
    return false;
    }
    }
</code></pre>
"
"22039047","-3","<p>Very simple in <code>JavaScript</code>. follow this code.</p>

<pre><code>function validate(){
    var email = document.getElementById('Email');
    var filter = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;

    if (!filter.test(email.value))
    {
        alert('Please Enter the valid email address');
        email.focus;
        return false;
    }
    else
{
        return true;
    }
</code></pre>

<p><code>HTML</code> code for this:</p>

<pre><code>form name=""form""
     enctype=""multipart/form-data""
     name=""form""
     action=""register.php""
     method=""POST"" onsubmit=""return validate();"" &gt;
    &lt;input type=""text"" placeholder=""Enter ur Email Id"" id=""Email"" name=""Email"" /&gt;
    &lt;input type=""submit"" id=""submit"" value=""save"" name=""Like"" class=""button"" /&gt;
&lt;/form&gt;
</code></pre>
"
"23816968","1","<p>Here is another solution to generate a timestamp in JavaScript - including a padding method for single numbers - using day, month, year, hour, minute and seconds in its result (working example at <a href=""http://jsfiddle.net/AcLzd/9/"" rel=""nofollow"">jsfiddle</a>):</p>

<pre><code>var pad = function(int) { return int &lt; 10 ? 0 + int : int; };
var timestamp = new Date();

    timestamp.day = [
        pad(timestamp.getDate()),
        pad(timestamp.getMonth() + 1), // getMonth() returns 0 to 11.
        timestamp.getFullYear()
    ];

    timestamp.time = [
        pad(timestamp.getHours()),
        pad(timestamp.getMinutes()),
        pad(timestamp.getSeconds())
    ];

timestamp.now = parseInt(timestamp.day.join("""") + timestamp.time.join(""""));
alert(timestamp.now);
</code></pre>
"
"24704328","0","<p>One of my coworker shared this regex with me. I like it a lot.</p>

<pre><code>function isValidEmailAddress (email) {
    var validEmail = false;
    if (email) {
        email = email.trim().toLowerCase();
        var pattern = /^[\w-']+(\.[\w-']+)*@([a-zA-Z0-9]+[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*?\.[a-zA-Z]{2,6}|(\d{1,3}\.){3}\d{1,3})(:\d{4})?$/;
        validEmail = pattern.exec(email);
    }

    return validEmail;
}

if (typeof String.prototype.trim !== 'function') {
    String.prototype.trim = function() {
        return this.replace(/^\s+|\s+$/g, '');
    };
}
</code></pre>
"
"24806549","-5","<pre><code>function validatecontactEmail(email) { 

 if (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email))  
  {  
    return (true)  
  }  

    return (false)  

}
</code></pre>
"
"25125279","5","<p>Here is a function I use for front end email validation. (The Regular Expression came from parsley.js)</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Our Company&lt;/title&gt;
    &lt;style&gt;
        .form-style {
            color: #ccc;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Email Validation Form Example&lt;/h1&gt;
    &lt;input type=""text"" name=""email"" id=""emailInput"" class=""form-style""&gt;
    &lt;script&gt;
        function validateEmail(emailAddress) {
            var regularExpression = /^((([a-z]|\d|[!#\$%&amp;'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&amp;'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))){2,6}$/i;
             return regularExpression.test(emailAddress);
        }

        function showEmailValidationState(event) {
            if (validateEmail(event.target.value)) {
                document.getElementById(""emailInput"").style.color = 'black';
            }
        }
    document.getElementById(""emailInput"").addEventListener(""keyup"", showEmailValidationState);
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
"
"26973870","15","<p>If you are using jQuery UI in your code, there is an inbuilt function called <code>formatDate()</code>. I am using it this way to format today's date:</p>

<pre><code>var testdate = Date();
testdate = $.datepicker.formatDate( ""d-M-yy"",new Date(testdate));
alert(testdate);
</code></pre>

<p>You can see  <a href=""http://api.jqueryui.com/datepicker/#option-dateFormat"" rel=""noreferrer"">many other examples of formatting date in the jQuery UI documentation</a>.</p>
"
"28057591","-6","<p>Validation regex for email:</p>

<pre><code>var rex_email = /^(([^&lt;&gt;()[\]\\.,;:\s@\""]+(\.[^&lt;&gt;()[\]\\.,;:\s@\""]+)*)|(\"".+\""))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

if(email=="""") {
    window.plugins.toast.showShortBottom( ""Please enter the details. "", function(a) {
        console.log('toast success: ' + a);
    }, function(b) { });
} else if(!rex_email.test(email)) {
    window.plugins.toast.showShortBottom( ""Please enter the valid email id. "", function(a) {
        console.log('toast success: ' + a);
    }, function(b) { });
}
</code></pre>
"
"28579110","1","<p>I know its not regex but any way...</p>

<p>This is example with node and npm package <a href=""https://www.npmjs.com/package/email-existence"" rel=""nofollow"">email-existence</a> this is ultimate checking if email exist and if its in the right form :)</p>

<p>This will ping the email if its responding if it got no response it will return false or else true.</p>

<pre><code>function doesEmailExist(email) {
    var emailExistence = require('email-existence');
    return emailExistence.check(email,function (err,status) {
            if (status) {
                return status;
            }
            else {
                throw new Error('Email does not exist');
            }
        });
}
</code></pre>
"
"28804496","4","<p><strong><em>Following Regex validations:</em></strong></p>

<ul>
<li>No spacial characters before @ </li>
<li>(-) and (.) should not be together
after @ No special characters after @ 2 characters must before @
Email length should be less 128 characters</li>
</ul>



<pre><code>function validateEmail(email) {
var chrbeforAt = email.substr(0, email.indexOf('@'));
if (!($.trim(email).length &gt; 127)) {
    if (chrbeforAt.length &gt;= 2) {
        var re = /^(([^&lt;&gt;()[\]{}'^?\\.,!|//#%*-+=&amp;;:\s@\""]+(\.[^&lt;&gt;()[\]\\.,;:\s@\""]+)*)|(\"".+\""))@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;
        //var re = /[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;
        return re.test(email);
    } else {
        return false;
    }
} else {
    return false;
}
}
</code></pre>
"
"28804516","2","<p><strong><em>Following Regex validations:</em></strong></p>

<ul>
<li>No spacial characters before @ </li>
<li>(-) and (.) should not be together after @ </li>
<li>No special characters after @ 2 characters must before @</li>
<li><p>Email length should be less 128 characters</p>

<pre><code>function validateEmail(email) {
    var chrbeforAt = email.substr(0, email.indexOf('@'));
    if (!($.trim(email).length &gt; 127)) {
        if (chrbeforAt.length &gt;= 2) {
            var re = /^(([^&lt;&gt;()[\]{}'^?\\.,!|//#%*-+=&amp;;:\s@\""]+(\.[^&lt;&gt;()[\]\\.,;:\s@\""]+)*)|(\"".+\""))@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;
            return re.test(email);
        } else {
            return false;
        }
    } else {
        return false;
    }
}
</code></pre></li>
</ul>
"
"31236206","22","<p>For a timestamp with microsecond resolution, there's <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Performance/now"" rel=""noreferrer""><code>performance.now</code></a>:</p>

<pre><code>function time() { 
  return performance.now() + performance.timing.navigationStart;
}
</code></pre>

<p>This could for example yield <code>1436140826653.139</code>, while <code>Date.now</code> only gives <code>1436140826653</code>.</p>
"
"31971270","3","<p>the best one :D (RFC-friendly &amp; no error ""too complex"") :</p>

<pre><code>function    isMail(mail)
{
    pattuser = /^([A-Z0-9_%+\-!#$&amp;'*\/=?^`{|}~]+\.?)*[A-Z0-9_%+\-!#$&amp;'*\/=?^`{|}~]+$/i;
    pattdomain = /^([A-Z0-9-]+\.?)*[A-Z0-9-]+(\.[A-Z]{2,9})+$/i;

    tab = mail.split(""@"");
    if (tab.length != 2)
        return false;
    return (pattuser.test(tab[0]) &amp;&amp; pattdomain.test(tab[1]));
}
</code></pre>
"
"33028757","14","<p>This seems to work.</p>

<pre><code>console.log(clock.now);
// returns 1444356078076

console.log(clock.format(clock.now));
//returns 10/8/2015 21:02:16

console.log(clock.format(clock.now + clock.add(10, 'minutes'))); 
//returns 10/8/2015 21:08:18

var clock = {
    now:Date.now(),
    add:function (qty, units) {
            switch(units.toLowerCase()) {
                case 'weeks'   :  val = qty * 1000 * 60 * 60 * 24 * 7;  break;
                case 'days'    :  val = qty * 1000 * 60 * 60 * 24;  break;
                case 'hours'   :  val = qty * 1000 * 60 * 60;  break;
                case 'minutes' :  val = qty * 1000 * 60;  break;
                case 'seconds' :  val = qty * 1000;  break;
                default       :  val = undefined;  break;
                }
            return val;
            },
    format:function (timestamp){
            var date = new Date(timestamp);
            var year = date.getFullYear();
            var month = date.getMonth() + 1;
            var day = date.getDate();
            var hours = date.getHours();
            var minutes = ""0"" + date.getMinutes();
            var seconds = ""0"" + date.getSeconds();
            // Will display time in xx/xx/xxxx 00:00:00 format
            return formattedTime = month + '/' + 
                                day + '/' + 
                                year + ' ' + 
                                hours + ':' + 
                                minutes.substr(-2) + 
                                ':' + seconds.substr(-2);
            }
};
</code></pre>
"
"33131028","26","<p>The code <code>Math.floor(new Date().getTime() / 1000)</code> can be shortened to <code>new Date / 1E3 | 0</code>.</p>

<p>Consider to skip direct <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime"" rel=""noreferrer""><code>getTime()</code></a> invocation and use <code>| 0</code> as a replacement for <a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor"" rel=""noreferrer""><code>Math.floor()</code></a> function.
It's also good to remember <code>1E3</code> is a shorter equivalent for <code>1000</code> (uppercase E is preferred than lowercase to indicate <code>1E3</code> as a constant).</p>

<p>As a result you get the following:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var ts = new Date / 1E3 | 0;

console.log(ts);</code></pre>
</div>
</div>
</p>
"
"34015511","2356","<p>If you need slightly less control over formatting than the currently accepted answer, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString"" rel=""noreferrer""><code>Date#toLocaleDateString</code></a> can be used to create standard locale-specific renderings. The <code>locale</code> and <code>options</code> arguments let applications specify the language whose formatting conventions should be used, and allow some customization of the rendering.</p>

<h3>Options key examples:</h3>

<ol>
<li><strong>day:</strong> <br/>
The representation of the day. <br/>
Possible values are ""numeric"", ""2-digit"".</li>
<li><strong>weekday:</strong> <br/>
The representation of the weekday. <br/>
Possible values are ""narrow"", ""short"", ""long"".</li>
<li><strong>year:</strong> <br/>
The representation of the year. <br/>
Possible values are ""numeric"", ""2-digit"".</li>
<li><strong>month:</strong> <br/>
The representation of the month. <br/>
Possible values are ""numeric"", ""2-digit"", ""narrow"", ""short"", ""long"".</li>
<li><strong>hour:</strong> <br/>
The representation of the hour. <br/>
Possible values are ""numeric"", ""2-digit"".</li>
<li><strong>minute:</strong>
The representation of the minute. <br/>
 Possible values are ""numeric"", ""2-digit"".</li>
<li><strong>second:</strong> <br/>
The representation of the second. <br/>
Possible values are ""numeric"", 2-digit"".</li>
</ol>

<p>All these keys are optional.  You can change the number of options values based on your requirements, and this will also reflect the presence of each date time term.</p>

<p>Note: If you would only like to configure the content options, but still use the current locale, passing <code>null</code> for the first parameter will cause an error.  Use <code>undefined</code> instead.</p>

<h3>For different languages:</h3>

<ol>
<li><strong>""en-US"":</strong> For English</li>
<li><strong>""hi-IN"":</strong> For Hindi</li>
<li><strong>""ja-JP"":</strong> For Japanese</li>
</ol>

<p>You can use more language options.</p>

<h3>For example</h3>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
var today  = new Date();

console.log(today.toLocaleDateString(""en-US"")); // 9/17/2016
console.log(today.toLocaleDateString(""en-US"", options)); // Saturday, September 17, 2016
console.log(today.toLocaleDateString(""hi-IN"", options)); // शनिवार, 17 सितंबर 2016</code></pre>
</div>
</div>
</p>

<p>You can also use the <code>toLocaleString()</code> method for the same purpose. The only difference is this function provides the time when you don't pass any options.</p>

<pre><code>// Example
9/17/2016, 1:21:34 PM
</code></pre>

<h3>References:</h3>

<ul>
<li><p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString"" rel=""noreferrer""><code>toLocaleString()</code></a></p></li>
<li><p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString"" rel=""noreferrer""><code>toLocaleDateString()</code></a></p></li>
</ul>
"
"34400345","3","<p>Short, widely compatible approach:</p>

<pre class=""lang-js prettyprint-override""><code>function formatDate(date) {
    date.toISOString()
    .replace(/^(\d+)-(\d+)-(\d+).*$/, // Only extract Y-M-D
        function (a,y,m,d) {
            return [
                d, // Day
                ['Jan','Feb','Mar','Apr','May','Jun',  // Month Names
                'Jul','Ago','Sep','Oct','Nov','Dec']
                [m-1], // Month
                y  // Year
            ].join('-') // Stitch together
        })
}
</code></pre>

<p>Or, as a single line:
</p>

<pre><code>date.toISOString().replace(/^(\d+)-(\d+)-(\d+)T(\d+):(\d+):(\d+).(\d+)Z$/, function (a,y,m,d) {return [d,['Jan','Feb','Mar','Apr','May','Jun','Jul','Ago','Sep','Oct','Nov','Dic'][m-1],y].join('-')})
</code></pre>
"
"34544619","6","<p>Try this:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function init(){
    var d = new Date();
    var day = d.getDate();
    var x = d.toDateString().substr(4, 3);
    var year = d.getFullYear();
    document.querySelector(""#mydate"").innerHTML = day + '-' + x + '-' + year;
}
window.onload = init;</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""mydate""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
"
"37540637","4","<p>Use the regular expression:</p>

<pre class=""lang-none prettyprint-override""><code> /^[a-z][a-zA-Z0-9_.]*(\.[a-zA-Z][a-zA-Z0-9_.]*)?@[a-z][a-zA-Z-0-9]*\.[a-z]+(\.[a-z]+)?$/
</code></pre>

<p>Example:</p>

<pre><code>function validateEmail(email) {
    var re = /^[a-z][a-zA-Z0-9_.]*(\.[a-zA-Z][a-zA-Z0-9_.]*)?@[a-z][a-zA-Z-0-9]*\.[a-z]+(\.[a-z]+)?$/;
    return re.test(email);
}
</code></pre>

<p>It should allow only  @ ,  . , _</p>
"
"38064836","6","<p>I've mixed @mevius and @Boldewyn Code to Create this ultimate code for email verification using JavaScript.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function ValidateEmail(email){
 
  var re = /^(([^&lt;&gt;()\[\]\\.,;:\s@""]+(\.[^&lt;&gt;()\[\]\\.,;:\s@""]+)*)|("".+""))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
 
  var input = document.createElement('input');
 
  input.type = 'email';
  input.value = email;
 
  return typeof input.checkValidity == 'function' ? input.checkValidity() : re.test(email);
 
}</code></pre>
</div>
</div>
</p>

<p>I have shared this code on my blog <a href=""http://mycodingtricks.com/snippets/javascript/javascript-regex-email-validation/"" rel=""noreferrer"">here</a>.</p>
"
"38676384","14","<p>This is how I implemented for my npm plugins</p>

<pre><code>var monthNames = [
  ""January"", ""February"", ""March"",
  ""April"", ""May"", ""June"", ""July"",
  ""August"", ""September"", ""October"",
  ""November"", ""December""
];

var Days = [
  ""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"",
  ""Thursday"", ""Friday"", ""Saturday""
];

var formatDate = function(dt,format){
  format = format.replace('ss', pad(dt.getSeconds(),2));
  format = format.replace('s', dt.getSeconds());
  format = format.replace('dd', pad(dt.getDate(),2));
  format = format.replace('d', dt.getDate());
  format = format.replace('mm', pad(dt.getMinutes(),2));
  format = format.replace('m', dt.getMinutes());
  format = format.replace('MMMM', monthNames[dt.getMonth()]);
  format = format.replace('MMM', monthNames[dt.getMonth()].substring(0,3));
  format = format.replace('MM', pad(dt.getMonth()+1,2));
  format = format.replace(/M(?![ao])/, dt.getMonth()+1);
  format = format.replace('DD', Days[dt.getDay()]);
  format = format.replace(/D(?!e)/, Days[dt.getDay()].substring(0,3));
  format = format.replace('yyyy', dt.getFullYear());
  format = format.replace('YYYY', dt.getFullYear());
  format = format.replace('yy', (dt.getFullYear()+"""").substring(2));
  format = format.replace('YY', (dt.getFullYear()+"""").substring(2));
  format = format.replace('HH', pad(dt.getHours(),2));
  format = format.replace('H', dt.getHours());
  return format;
}

pad = function(n, width, z) {
  z = z || '0';
  n = n + '';
  return n.length &gt;= width ? n : new Array(width - n.length + 1).join(z) + n;
}
</code></pre>
"
"39101907","4","<p>If you fancy a short, human-readable, function - this is easily adjustable to suit you.</p>

<p>The <strong>timeStamp</strong> parameter is milliseconds from 1970 - it is returned by <code>new Date().getTime()</code> and many other devices...</p>

<p>OK, I changed my mind. I included an extra function for zero padding. Curses!</p>

<pre><code> function zeroPad(aNumber) {
     return (""0""+aNumber).slice(-2);
 }
 function humanTime(timeStamp) {
    var M = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    var D = new Date(timeStamp); // 23 Aug 2016 16:45:59 &lt;-- Desired format.
    return D.getDate() + "" "" + M[D.getMonth()] + "" "" + D.getFullYear() + "" "" + D.getHours() + "":"" + zeroPad(d.getMinutes()) + "":"" + zeroPad(D.getSeconds());
 }
</code></pre>
"
"43365158","319","<h2>Custom formatting function:</h2>
<p>For fixed formats, a simple function make the job. The following example generates the international format YYYY-MM-DD:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function dateToYMD(date) {
    var d = date.getDate();
    var m = date.getMonth() + 1; //Month from 0 to 11
    var y = date.getFullYear();
    return '' + y + '-' + (m&lt;=9 ? '0' + m : m) + '-' + (d &lt;= 9 ? '0' + d : d);
}

console.log(dateToYMD(new Date(2017,10,5))); // Nov 5</code></pre>
</div>
</div>
</p>
<p>The OP format may be generated like:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function dateToYMD(date) {
    var strArray=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    var d = date.getDate();
    var m = strArray[date.getMonth()];
    var y = date.getFullYear();
    return '' + (d &lt;= 9 ? '0' + d : d) + '-' + m + '-' + y;
}
console.log(dateToYMD(new Date(2017,10,5))); // Nov 5</code></pre>
</div>
</div>
</p>
<p>Note: It is, however, usually not a good idea to extend the JavaScript standard libraries (e.g. by adding this function to the prototype of Date).</p>
<p>A more advanced function could generate configurable output based on a format parameter.</p>
<p>If to write a formatting function is too long, there are plenty of libraries around which does it. Some other answers already enumerate them. But increasing dependencies also has it counter-part.</p>
<h2>Standard ECMAScript formatting functions:</h2>
<p>Since more recent versions of ECMAScript, the <code>Date</code> class has some specific formatting functions:</p>
<blockquote>
<p><strong>toDateString</strong>: Implementation dependent, show only the date.</p>
<p><a href=""https://262.ecma-international.org/#sec-date.prototype.todatestring"" rel=""noreferrer"">https://262.ecma-international.org/#sec-date.prototype.todatestring</a></p>
<pre><code>new Date().toDateString(); // e.g. &quot;Fri Nov 11 2016&quot;
</code></pre>
</blockquote>
<hr />
<blockquote>
<p><strong>toISOString</strong>: Show ISO 8601 date and time.</p>
<p><a href=""https://262.ecma-international.org/#sec-date.prototype.toisostring"" rel=""noreferrer"">https://262.ecma-international.org/#sec-date.prototype.toisostring</a></p>
<pre><code>new Date().toISOString(); // e.g. &quot;2016-11-21T08:00:00.000Z&quot;
</code></pre>
</blockquote>
<hr />
<blockquote>
<p><strong>toJSON</strong>: Stringifier for JSON.</p>
<p><a href=""https://262.ecma-international.org/#sec-date.prototype.tojson"" rel=""noreferrer"">https://262.ecma-international.org/#sec-date.prototype.tojson</a></p>
<pre><code>new Date().toJSON(); // e.g. &quot;2016-11-21T08:00:00.000Z&quot;
</code></pre>
</blockquote>
<hr />
<blockquote>
<p><strong>toLocaleDateString</strong>: Implementation dependent, a date in locale format.</p>
<p><a href=""https://262.ecma-international.org/#sec-date.prototype.tolocaledatestring"" rel=""noreferrer"">https://262.ecma-international.org/#sec-date.prototype.tolocaledatestring</a></p>
<pre><code>new Date().toLocaleDateString(); // e.g. &quot;21/11/2016&quot;
</code></pre>
</blockquote>
<hr />
<blockquote>
<p><strong>toLocaleString</strong>: Implementation dependent, a date&amp;time in locale format.</p>
<p><a href=""https://262.ecma-international.org/#sec-date.prototype.tolocalestring"" rel=""noreferrer"">https://262.ecma-international.org/#sec-date.prototype.tolocalestring</a></p>
<pre><code>new Date().toLocaleString(); // e.g. &quot;21/11/2016, 08:00:00 AM&quot;
</code></pre>
</blockquote>
<hr />
<blockquote>
<p><strong>toLocaleTimeString</strong>: Implementation dependent, a time in locale format.</p>
<p><a href=""https://262.ecma-international.org/#sec-date.prototype.tolocaletimestring"" rel=""noreferrer"">https://262.ecma-international.org/#sec-date.prototype.tolocaletimestring</a></p>
<pre><code>new Date().toLocaleTimeString(); // e.g. &quot;08:00:00 AM&quot;
</code></pre>
</blockquote>
<hr />
<blockquote>
<p><strong>toString</strong>: Generic toString for Date.</p>
<p><a href=""https://262.ecma-international.org/#sec-date.prototype.tostring"" rel=""noreferrer"">https://262.ecma-international.org/#sec-date.prototype.tostring</a></p>
<pre><code>new Date().toString(); // e.g. &quot;Fri Nov 21 2016 08:00:00 GMT+0100 (W. Europe Standard Time)&quot;
</code></pre>
</blockquote>
<p>Note: it is possible to generate custom output out of those formatting &gt;</p>
<blockquote>
<pre><code>new Date().toISOString().slice(0,10); //return YYYY-MM-DD
</code></pre>
</blockquote>
<p>Examples snippets:
<div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>console.log(""1) ""+  new Date().toDateString());
console.log(""2) ""+  new Date().toISOString());
console.log(""3) ""+  new Date().toJSON());
console.log(""4) ""+  new Date().toLocaleDateString());
console.log(""5) ""+  new Date().toLocaleString());
console.log(""6) ""+  new Date().toLocaleTimeString());
console.log(""7) ""+  new Date().toString());
console.log(""8) ""+  new Date().toISOString().slice(0,10));</code></pre>
</div>
</div>
</p>
<h2>Specifying the locale for standard functions:</h2>
<p>Some of the standard functions listed above are dependent on the locale:</p>
<ul>
<li><code>toLocaleDateString()</code></li>
<li><code>toLocaleTimeString()</code></li>
<li><code>toLocalString()</code></li>
</ul>
<p>This is because different cultures make uses of different formats, and express their date or time in different ways.
The function by default will return the format configured on the device it runs, but this can be specified by setting the arguments (ECMA-402).</p>
<pre><code>toLocaleDateString([locales[, options]])
toLocaleTimeString([locales[, options]])
toLocaleString([locales[, options]])
//e.g. toLocaleDateString('ko-KR');
</code></pre>
<p>The <code>option</code> second parameter, allow for configuring more specific format inside the selected locale. For instance, the month can be show as full-text or abreviation.</p>
<pre><code>toLocaleString('en-GB', { month: 'short' })
toLocaleString('en-GB', { month: 'long' })
</code></pre>
<p>Examples snippets:
<div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>console.log(""1) ""+  new Date().toLocaleString('en-US'));
console.log(""2) ""+  new Date().toLocaleString('ko-KR'));
console.log(""3) ""+  new Date().toLocaleString('de-CH'));

console.log(""4) ""+  new Date().toLocaleString('en-GB', { hour12: false }));
console.log(""5) ""+  new Date().toLocaleString('en-GB', { hour12: true }));</code></pre>
</div>
</div>
</p>
<p>Some good practices regarding locales:</p>
<ul>
<li>Most people don't like their dates to appear in a foreigner format, consequently, keep the default locale whenever possible (over setting 'en-US' everywhere).</li>
<li>Implementing conversion from/to UTC can be challenging (considering DST, time-zone not multiple of 1 hour, etc.). Use a well-tested library when possible.</li>
<li>Don't assume the locale correlate to a country: several countries have many of them (Canada, India, etc.)</li>
<li>Avoid detecting the locale through non-standard ways. Here you can read about the multiple pitfalls: detecting the keyboard layout, detecting the locale by the geographic location, etc..</li>
</ul>
"
"44601723","2","<p>How about creating a function which will test any string against emails' pattern using regular expression in JavaScript, as we know email addresses can be quite different in different regions, like in UK and Australia it usually ends up with <code>.co.uk</code> or <code>.com.au</code>, so I tried to cover those as well, also check if the string passed to the function, something like this:</p>

<pre><code>var isEmail = function(str) {
  return typeof str==='string' &amp;&amp; /^[\w+\d+._]+\@[\w+\d+_+]+\.[\w+\d+._]{2,8}$/.test(str);
}
</code></pre>

<p>and check if it's email like below:</p>

<pre><code>isEmail('alex@example.com'); //true
isEmail('alireza@test.co.uk'); //true
isEmail('peter.example@yahoo.com.au'); //true
isEmail('alex@example.com'); //true
isEmail('peter_123@news.com'); //true
isEmail('hello7___@ca.com.pt'); //true
isEmail('example@example.co'); //true
isEmail('hallo@example.coassjj#sswzazaaaa'); //false
isEmail('hallo2ww22@example....caaaao'); //false
</code></pre>
"
"44671643","10","<p><strong>Wikipedia standard mail syntax :</strong></p>

<p><a href=""https://en.wikipedia.org/wiki/Email_address#Examples"" rel=""noreferrer"">https://en.wikipedia.org/wiki/Email_address#Examples</a>
<a href=""https://fr.wikipedia.org/wiki/Adresse_%C3%A9lectronique#Syntaxe_exacte"" rel=""noreferrer"">https://fr.wikipedia.org/wiki/Adresse_%C3%A9lectronique#Syntaxe_exacte</a></p>

<pre><code>function validMail(mail)
{
    return /^(([^&lt;&gt;()\[\]\.,;:\s@\""]+(\.[^&lt;&gt;()\[\]\.,;:\s@\""]+)*)|(\"".+\""))@(([^&lt;&gt;()\.,;\s@\""]+\.{0,1})+([^&lt;&gt;()\.,;:\s@\""]{2,}|[\d\.]+))$/.test(mail);
}

// VALID MAILS

validMail('Abc@example.com') // Return true
validMail('Abc@example.com.') // Return true
validMail('Abc@10.42.0.1') // Return true
validMail('user@localserver') // Return true
validMail('Abc.123@example.com') // Return true
validMail('user+mailbox/department=shipping@example.com') // Return true
validMail('""very.(),:;&lt;&gt;[]\"".VERY.\""very@\\ \""very\"".unusual""@strange.example.com') // Return true
validMail('!#$%&amp;\'*+-/=?^_`.{|}~@example.com') // Return true
validMail('""()&lt;&gt;[]:,;@\\\""!#$%&amp;\'-/=?^_`{}| ~.a""@example.org') // Return true
validMail('""Abc@def""@example.com') // Return true
validMail('""Fred Bloggs""@example.com') // Return true
validMail('""Joe.\\Blow""@example.com') // Return true
validMail('Loïc.Accentué@voilà.fr') // Return true
validMail('"" ""@example.org') // Return true
validMail('user@[IPv6:2001:DB8::1]') // Return true

// INVALID MAILS

validMail('Abc.example.com') // Return false
validMail('A@b@c@example.com') // Return false
validMail('a""b(c)d,e:f;g&lt;h&gt;i[j\k]l@example.com') // Return false
validMail('just""not""right@example.com') // Return false
validMail('this is""not\allowed@example.com') // Return false
validMail('this\ still\""not\\allowed@example.com') // Return false
validMail('john..doe@example.com') // Return false
validMail('john.doe@example..com') // Return false
</code></pre>

<p><strong>Show this test : <a href=""https://regex101.com/r/LHJ9gU/1"" rel=""noreferrer"">https://regex101.com/r/LHJ9gU/1</a></strong></p>
"
"46970951","1","<p>The following code will allow you to format the date to either <code>DD-MM-YYYY</code> (27-12-2017) or <code>DD MMM YYYY</code> (27 Dec 2017) :</p>

<pre><code>/** Pad number to fit into nearest power of 10 */
function padNumber(number, prependChar, count) {
  var out = '' + number; var i;
  if (number &lt; Math.pow(10, count))
    while (out.length &lt; ('' + Math.pow(10, count)).length) out = prependChar + out;

  return out;
}

/* Format the date to 'DD-MM-YYYY' or 'DD MMM YYYY' */
function dateToDMY(date, useNumbersOnly) {
  var months = [
    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 
    'Nov', 'Dec'
  ];

  return '' + padNumber(date.getDate(), '0', 1) + 
   (useNumbersOnly? '-' + padNumber(date.getMonth() + 1, '0', 1) + '-' : ' ' + months[date.getMonth()] + ' ')
    + date.getFullYear();
}
</code></pre>

<p>Change the order of <code>date.getFullYear()</code> and <code>padNumber(date.getDate(), '0', 1)</code> to make a <code>dateToYMD()</code> function.</p>

<p>See <a href=""https://repl.it/NUI4/2"" rel=""nofollow noreferrer"">repl.it example</a> for details.</p>
"
"47437070","5","<p><code>DateFormatter.formatDate(new Date(2010,7,10), 'DD-MMM-YYYY')</code></p>

<p>=><code>10-Aug-2010</code></p>

<p><code>DateFormatter.formatDate(new Date(), 'YYYY-MM-DD HH:mm:ss')</code></p>

<p>=><code>2017-11-22 19:52:37</code></p>

<p><code>DateFormatter.formatDate(new Date(2005, 1, 2, 3, 4, 5), 'D DD DDD DDDD, M MM MMM MMMM, YY YYYY, h hh H HH, m mm, s ss, a A')</code></p>

<p>=><code>2 02 Wed Wednesday, 2 02 Feb February, 05 2005, 3 03 3 03, 4 04, 5 05, am AM</code></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var DateFormatter = {
  monthNames: [
    ""January"", ""February"", ""March"", ""April"", ""May"", ""June"",
    ""July"", ""August"", ""September"", ""October"", ""November"", ""December""
  ],
  dayNames: [""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""],
  formatDate: function (date, format) {
    var self = this;
    format = self.getProperDigits(format, /d+/gi, date.getDate());
    format = self.getProperDigits(format, /M+/g, date.getMonth() + 1);
    format = format.replace(/y+/gi, function (y) {
      var len = y.length;
      var year = date.getFullYear();
      if (len == 2)
        return (year + """").slice(-2);
      else if (len == 4)
        return year;
      return y;
    })
    format = self.getProperDigits(format, /H+/g, date.getHours());
    format = self.getProperDigits(format, /h+/g, self.getHours12(date.getHours()));
    format = self.getProperDigits(format, /m+/g, date.getMinutes());
    format = self.getProperDigits(format, /s+/gi, date.getSeconds());
    format = format.replace(/a/ig, function (a) {
      var amPm = self.getAmPm(date.getHours())
      if (a === 'A')
        return amPm.toUpperCase();
      return amPm;
    })
    format = self.getFullOr3Letters(format, /d+/gi, self.dayNames, date.getDay())
    format = self.getFullOr3Letters(format, /M+/g, self.monthNames, date.getMonth())
    return format;
  },
  getProperDigits: function (format, regex, value) {
    return format.replace(regex, function (m) {
      var length = m.length;
      if (length == 1)
        return value;
      else if (length == 2)
        return ('0' + value).slice(-2);
      return m;
    })
  },
  getHours12: function (hours) {
    // https://stackoverflow.com/questions/10556879/changing-the-1-24-hour-to-1-12-hour-for-the-gethours-method
    return (hours + 24) % 12 || 12;
  },
  getAmPm: function (hours) {
    // https://stackoverflow.com/questions/8888491/how-do-you-display-javascript-datetime-in-12-hour-am-pm-format
    return hours &gt;= 12 ? 'pm' : 'am';
  },
  getFullOr3Letters: function (format, regex, nameArray, value) {
    return format.replace(regex, function (s) {
      var len = s.length;
      if (len == 3)
        return nameArray[value].substr(0, 3);
      else if (len == 4)
        return nameArray[value];
      return s;
    })
  }
}

console.log(DateFormatter.formatDate(new Date(), 'YYYY-MM-DD HH:mm:ss'));
console.log(DateFormatter.formatDate(new Date(), 'D DD DDD DDDD, M MM MMM MMMM, YY YYYY, h hh H HH, m mm, s ss, a A'));
console.log(DateFormatter.formatDate(new Date(2005, 1, 2, 3, 4, 5), 'D DD DDD DDDD, M MM MMM MMMM, YY YYYY, h hh H HH, m mm, s ss, a A'));</code></pre>
</div>
</div>
</p>

<p>The format description was taken from <a href=""https://ionicframework.com/docs/api/components/datetime/DateTime/"" rel=""nofollow noreferrer"">Ionic Framework</a> (it does not support <code>Z</code>, UTC Timezone Offset)</p>

<blockquote>
  <p>Not thoroughly tested</p>
</blockquote>
"
"48309213","2","<p>This is the main answer modified to have 3-char months, and 2-digit year:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function formatDate(date) {
    var monthNames = [""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"", ""Oct"", ""Nov"", ""Dec""];
    var day = date.getDate(), monthIndex = date.getMonth(), year = date.getFullYear().toString().substr(-2);
    return day + ' ' + monthNames[monthIndex] + ' ' + year;
}

document.write(formatDate(new Date()));</code></pre>
</div>
</div>
</p>
"
"49005817","1","<pre><code> &lt;input type=""email"" class=""form-control"" required=""required"" placeholder=""Email Address"" name=""Email"" id=""Email"" autocomplete=""Email""&gt;
 &lt;button class=""btn-1 shadow-0 full-width"" type=""button"" id=""register""&gt;Register account&lt;/button&gt;
</code></pre>

<p>   </p>

<pre><code> $(""#register"").click(function(){       
    var rea = /^[a-zA-Z0-9.!#$%&amp;'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
    var Email = $(""#Email"").val();
    var x = rea.test(Email);
    if (!x) {
        alert('Type Your valid Email');
        return false;
    }           
 &lt;/script&gt;
</code></pre>
"
"49526664","2","<pre><code>function getTimeStamp() {
    var now = new Date();
    return ((now.getMonth() + 1) + '/' +
            (now.getDate()) + '/' +
             now.getFullYear() + "" "" +
             now.getHours() + ':' +
             ((now.getMinutes() &lt; 10)
                 ? (""0"" + now.getMinutes())
                 : (now.getMinutes())) + ':' +
             ((now.getSeconds() &lt; 10)
                 ? (""0"" + now.getSeconds())
                 : (now.getSeconds())));
}
</code></pre>
"
"50349607","1","<p>If you find there are two or more scripts occupying the same function when they are called, and we cannot be include them at the same time, we need to do it <strong>dynamically</strong> by user selection.</p>
<p>Including another file in jQuery using <code>$.getScript</code> works since the script <em><a href=""https://api.jquery.com/jquery.getscript/#caching-requests"" rel=""nofollow noreferrer"">will not be cached by default</a></em>. So we are safe to call other scripts. The calls can be arranged like this:</p>
<p><em><strong>HTML</strong></em></p>
<pre><code>&lt;select class=&quot;choice&quot;&gt;
  &lt;option value=&quot;script1&quot; selected&gt;Script-1&lt;/option&gt;
  &lt;option value=&quot;script2&quot;&gt;Script-2&lt;/option&gt;
&lt;/select&gt;
</code></pre>
<p><em><strong>JavaScript</strong></em></p>
<pre><code>  $(&quot;.choice&quot;).change(on_change);

    var url = &quot;https://example.com&quot;;
    $.url1 = url + &quot;/script1.js&quot;;
    $.url2 = url + &quot;/script2.js&quot;;

  function on_change() {
    if ($(&quot;.choice&quot;).val()==&quot;script1&quot;) {
        script1();
    } else {
         script2();
    }

    // script1
    function script1() {
      $.getScript($.url1, function( data, textStatus, jqxhr ) {
          // Execute here
      });
    }

    // script2
    function script2() {
       $.getScript($.url2, function( data, textStatus, jqxhr ) {
          // Execute here
      });
    }
</code></pre>
"
"50468005","8","<p><strong>Yes,</strong> there is...</p>
<p>Keep reading. In <strong>ES6</strong>, we can <code>export</code> and <code>import</code> part or whole JavaScript file into another one...</p>
<p>But wait, <strong>ES6</strong> is not supported in all the browsers, so you need to transpile it using <code>babel.js</code> for example...</p>
<p>So you create a class like below:</p>
<pre><code>class Person {
  constructor(name) {
    this.name = name;
  }

  build() {
    return new Person(this);
  }
}

module.exports = Person;
</code></pre>
<p>In <em>another</em> JavaScript file, do the import like:</p>
<pre><code>import { Person } from 'Person';
</code></pre>
<p>You also can require the file like:</p>
<pre><code>const Person = require('./Person');
</code></pre>
<p>If you are using an older JavaScript version you can use <strong>requirejs</strong>:</p>
<pre><code>requirejs([&quot;helper/util&quot;], function(util) {
    // This function is called when scripts/helper/util.js is loaded.
    // If util.js calls define(), then this function is not fired until
    // util's dependencies have loaded, and the util argument will hold
    // the module value for &quot;helper/util&quot;.
});
</code></pre>
<p>If you want to stick to older version of stuff, like <strong>jQuery</strong>, you can also use something like <strong>getScript</strong>:</p>
<pre><code>jQuery.getScript('./another-script.js', function() {
    // Call back after another-script loaded
});
</code></pre>
<p>Last, but not the least, don't forget you can do the traditional way of putting a script together using the <code>&lt;script&gt;</code> tag...</p>
<pre><code>&lt;script src=&quot;./first-script.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;./second-script.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;./third-script.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>There are also the <strong>async</strong> and <strong>defer</strong> attributes which I should mention here...</p>
<blockquote>
<p><strong>Note:</strong> There are several ways an external script can be executed:</p>
<ul> <li>If async is present: The script is executed asynchronously
with the rest of the page (the script will be executed while the page
continues the parsing)</li>   <li>If async is not present and defer is
present: The script is executed when the page has finished
parsing</li>   <li>If neither async or defer is present: The script is
fetched and executed immediately, before the browser  continues
parsing the page</li> </ul>
</blockquote>
"
"51067600","38","<h1>Performance</h1>
<p>Today - 2020.04.23 I perform tests for chosen solutions. I tested on MacOs High Sierra 10.13.6 on Chrome 81.0, Safari 13.1, Firefox 75.0</p>
<h3>Conclusions</h3>
<ul>
<li>Solution <code>Date.now()</code> (E) is fastest on Chrome and Safari and second fast on Firefox and this is probably best choice for fast cross-browser solution</li>
<li>Solution <code>performance.now()</code> (G), what is surprising, is more than 100x faster than other solutions on Firefox but slowest on Chrome</li>
<li>Solutions C,D,F are quite slow on all browsers</li>
</ul>
<p><a href=""https://i.stack.imgur.com/lCTrK.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/lCTrK.png"" alt=""enter image description here"" /></a></p>
<h3>Details</h3>
<p>Results for chrome</p>
<p><a href=""https://i.stack.imgur.com/Eaco2.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/Eaco2.png"" alt=""enter image description here"" /></a></p>
<p>You can perform test on your machine <a href=""https://jsbench.me/f5k9ckm6lh/1"" rel=""noreferrer"">HERE</a></p>
<p>Code used in tests is presented in below snippet</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function A() {
  return new Date().getTime();
}

function B() {
  return new Date().valueOf();
}

function C() {
  return +new Date();
}

function D() {
  return new Date()*1;
}

function E() {
  return Date.now();
}

function F() {
  return Number(new Date());
}

function G() {
  // this solution returns time counted from loading the page.
  // (and on Chrome it gives better precission)
  return performance.now(); 
}



// TEST

log = (n,f) =&gt; console.log(`${n} : ${f()}`);

log('A',A);
log('B',B);
log('C',C);
log('D',D);
log('E',E);
log('F',F);
log('G',G);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>This snippet only presents code used in external benchmark</code></pre>
</div>
</div>
</p>
"
"51399417","1","<p>Here is a solution that works and includes validation/notification fuctionality in a form:</p>

<p>You can run it <a href=""https://codepen.io/aabiro/pen/eyGJMV"" rel=""nofollow noreferrer"">at this link</a></p>

<p><strong><em>JAVASCRIPT</em></strong></p>

<pre><code>(function() {
  'use strict';

  window.addEventListener('load', function() {
    var form = document.getElementById('needs-validation');
    form.addEventListener('submit', function(event) {
      if (form.checkValidity() === false) {
        event.preventDefault();
      }
      form.classList.add('was-validated');
      event.preventDefault();              
    }, false);
  }, false);
})();
</code></pre>

<p><strong><em>HTML</em></strong></p>

<pre><code>&lt;p class='title'&gt;
    &lt;b&gt;Email validation&lt;/b&gt;
  &lt;hr size=""30px;""&gt;
&lt;/p&gt;
&lt;br&gt;

&lt;form id=""needs-validation"" novalidate&gt;
  &lt;p class='form_text'&gt;Try it out!&lt;/p&gt;
  &lt;div class=""form-row""&gt;
    &lt;div class=""col-12""&gt;
      &lt;input type=""email"" class=""form-control"" placeholder=""Email Address"" required&gt;
        &lt;div class=""invalid-feedback""&gt;
          Please enter a valid email address.
        &lt;/div&gt;
    &lt;/div&gt;
  &lt;div class=""row""&gt;
    &lt;div class=""col-12""&gt;
      &lt;button type=""submit"" 
          class=""btn btn-default btn-block""&gt;Sign up now
      &lt;/button&gt;
    &lt;/div&gt;
   &lt;/div&gt;
&lt;/form&gt;
</code></pre>


"
"51791186","11","<p>There are several ways to implement modules in JavaScript. Here are the two most popular ones:</p>
<h2><strong>ES6 Modules</strong></h2>
<p>Browsers do not support this moduling system yet, so in order for you to use this syntax you must use a bundler like <a href=""https://en.wikipedia.org/wiki/Webpack"" rel=""nofollow noreferrer"">Webpack</a>. Using a bundler is better anyway because this can combine all of your different files into a single (or a couple of related) files. This will serve the files from the server to the client faster because each HTTP request has some associated overhead accompanied with it. Thus by reducing the overall HTTP request we improve the performance. Here is an example of ES6 modules:</p>
<pre><code>// main.js file

export function add (a, b) {
  return a + b;
}

export default function multiply (a, b) {
  return a * b;
}


// test.js file

import {add}, multiply from './main';   // For named exports between curly braces {export1, export2}
                                        // For default exports without {}

console.log(multiply(2, 2));  // logs 4

console.log(add(1, 2));  // logs 3
</code></pre>
<h2><strong>CommonJS</strong> (used in Node.js)</h2>
<p>This moduling system is used in Node.js. You basically add your exports to an object which is called <code>module.exports</code>. You then can access this object via a <code>require('modulePath')</code>. Important here is to realize that these modules are being cached, so if you <code>require()</code> a certain module twice it will return the already created module.</p>
<pre><code>// main.js file

function add (a, b) {
  return a + b;
}

module.exports = add;  // Here we add our 'add' function to the exports object


// test.js file

const add = require('./main');

console.log(add(1,2));  // logs 3
</code></pre>
"
"51950261","-1","<pre><code>function ValidateEmail(mail) 
{
  if (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(myForm.emailAddr.value))
  {
    return (true)
  }
  alert(""You have entered an invalid email address!"")
  return (false)
}
</code></pre>

<p>Ref URL: <a href=""https://www.w3resource.com/javascript/form/email-validation.php"" rel=""nofollow noreferrer"">https://www.w3resource.com/javascript/form/email-validation.php</a></p>
"
"52104588","2","<p>Other way that you can format the date:</p>

<pre><code>function formatDate(dDate,sMode){
    var today = dDate;
    var dd = today.getDate();
    var mm = today.getMonth()+1; //January is 0!
    var yyyy = today.getFullYear();
    if(dd&lt;10) {
        dd = '0'+dd
    }
    if(mm&lt;10) {
        mm = '0'+mm
    }
    if (sMode+""""==""""){
        sMode = ""dd/mm/yyyy"";
    }
    if (sMode == ""yyyy-mm-dd""){
        return  yyyy + ""-"" + mm + ""-"" + dd + """";
    }
    if (sMode == ""dd/mm/yyyy""){
        return  dd + ""/"" + mm + ""/"" + yyyy;
    }
}
</code></pre>
"
"52234958","-1","<p>This works for me:</p>

<pre><code>function Email(mail)
{
 if (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(myForm.emailAddr.value))
  {
    return (true)
  }
    alert(""Invalid email address!"")
    return (false)
}
</code></pre>
"
"52789394","2","<p><code>yy</code> = 2-digit year;
<code>yyyy</code> = full year</p>

<p><code>M</code> = digit month;
<code>MM</code> = 2-digit month;
<code>MMM</code> = short month name;
<code>MMMM</code> = full month name</p>

<p><code>EEEE</code> = full weekday name;
<code>EEE</code> = short weekday name</p>

<p><code>d</code> = digit day;
<code>dd</code> = 2-digit day</p>

<p><code>h</code> = hours;
<code>hh</code> = 2-digit hours</p>

<p><code>m</code> = minutes;
<code>mm</code> = 2-digit minutes</p>

<p><code>s</code> = seconds;
<code>ss</code> = 2-digit seconds</p>

<p><code>S</code> = miliseconds</p>

<p>Used similar formating as <a href=""https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html"" rel=""nofollow noreferrer"">Class SimpleDateFormat (Java)</a></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var monthNames = [
  ""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July"",
  ""August"", ""September"", ""October"", ""November"", ""December""
];
var dayOfWeekNames = [
  ""Sunday"", ""Monday"", ""Tuesday"",
  ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""
];
function formatDate(date, formatStr){
    if (!formatStr) {
      formatStr = 'dd/mm/yyyy';
    }
    var day = date.getDate(),
        month = date.getMonth(),
        year = date.getFullYear(),
        hour = date.getHours(),
        minute = date.getMinutes(),
        second = date.getSeconds(),
        miliseconds = date.getMilliseconds(),
        hh = twoDigitPad(hour),
        mm = twoDigitPad(minute),
        ss = twoDigitPad(second),
        EEEE = dayOfWeekNames[date.getDay()],
        EEE = EEEE.substr(0, 3),
        dd = twoDigitPad(day),
        M = month + 1,
        MM = twoDigitPad(M),
        MMMM = monthNames[month],
        MMM = MMMM.substr(0, 3),
        yyyy = year + """",
        yy = yyyy.substr(2, 2)
    ;
    return formatStr
      .replace('hh', hh).replace('h', hour)
      .replace('mm', mm).replace('m', minute)
      .replace('ss', ss).replace('s', second)
      .replace('S', miliseconds)
      .replace('dd', dd).replace('d', day)
      .replace('MMMM', MMMM).replace('MMM', MMM).replace('MM', MM).replace('M', M)
      .replace('EEEE', EEEE).replace('EEE', EEE)
      .replace('yyyy', yyyy)
      .replace('yy', yy)
    ;
}
function twoDigitPad(num) {
    return num &lt; 10 ? ""0"" + num : num;
}
console.log(formatDate(new Date()));
console.log(formatDate(new Date(), 'EEEE, MMMM d, yyyy hh:mm:ss:S'));
console.log(formatDate(new Date(), 'EEE, MMM d, yyyy hh:mm'));
console.log(formatDate(new Date(), 'yyyy-MM-dd hh:mm:ss:S'));
console.log(formatDate(new Date(), 'yy-MM-dd hh:mm'));</code></pre>
</div>
</div>
</p>
"
"52789490","38","<p><strong>Packaged Solution:</strong> <a href=""https://moment.github.io/luxon/"" rel=""noreferrer"">Luxon</a></p>

<p>If you want to use a one solution to fit all, I highly recommend using Luxon (a modernized version of <a href=""https://momentjs.com/"" rel=""noreferrer"">Moment.js</a>) which also does formatting in many locales/languages and tons of other features.</p>

<p>Luxon is hosted on the Moment.js website and developed by a Moment.js developer because Moment.js has limitations that the developer wanted to address but couldn't.</p>

<p>To install:</p>

<p><code>npm install luxon</code> or <code>yarn add luxon</code> (visit link for other installation methods)</p>

<p>Example:</p>

<p><code>luxon.DateTime.fromISO('2010-08-10').toFormat('yyyy-LLL-dd');</code></p>

<p>Yields:</p>

<blockquote>
  <p>10-Aug-2010</p>
</blockquote>

<p><strong>Manual Solution</strong></p>

<p>Using similar formatting as Moment.js, <a href=""https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html"" rel=""noreferrer"">Class DateTimeFormatter (Java)</a>, and <a href=""https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html"" rel=""noreferrer"">Class SimpleDateFormat (Java)</a>, I implemented a comprehensive solution <code>formatDate(date, patternStr)</code> where the code is easy to read and modify. You can display date, time, AM/PM, etc. See code for more examples.</p>

<p>Example:</p>

<p><code>formatDate(new Date(), 'EEEE, MMMM d, yyyy HH:mm:ss:S')</code></p>

<p>(<code>formatDate</code> is implemented in the code snippet below)</p>

<p>Yields:</p>

<blockquote>
  <p>Friday, October 12, 2018 18:11:23:445</p>
</blockquote>

<p>Try the code out by clicking ""Run code snippet.""</p>

<p><strong>Date and Time Patterns</strong></p>

<p><code>yy</code> = 2-digit year; <code>yyyy</code> = full year</p>

<p><code>M</code> = digit month; <code>MM</code> = 2-digit month; <code>MMM</code> = short month name; <code>MMMM</code> = full month name</p>

<p><code>EEEE</code> = full weekday name; <code>EEE</code> = short weekday name</p>

<p><code>d</code> = digit day; <code>dd</code> = 2-digit day</p>

<p><code>h</code> = hours am/pm; <code>hh</code> = 2-digit hours am/pm; <code>H</code> = hours; <code>HH</code> = 2-digit hours</p>

<p><code>m</code> = minutes; <code>mm</code> = 2-digit minutes; <code>aaa</code> = AM/PM</p>

<p><code>s</code> = seconds; <code>ss</code> = 2-digit seconds</p>

<p><code>S</code> = miliseconds</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var monthNames = [
  ""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July"",
  ""August"", ""September"", ""October"", ""November"", ""December""
];
var dayOfWeekNames = [
  ""Sunday"", ""Monday"", ""Tuesday"",
  ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""
];
function formatDate(date, patternStr){
    if (!patternStr) {
        patternStr = 'M/d/yyyy';
    }
    var day = date.getDate(),
        month = date.getMonth(),
        year = date.getFullYear(),
        hour = date.getHours(),
        minute = date.getMinutes(),
        second = date.getSeconds(),
        miliseconds = date.getMilliseconds(),
        h = hour % 12,
        hh = twoDigitPad(h),
        HH = twoDigitPad(hour),
        mm = twoDigitPad(minute),
        ss = twoDigitPad(second),
        aaa = hour &lt; 12 ? 'AM' : 'PM',
        EEEE = dayOfWeekNames[date.getDay()],
        EEE = EEEE.substr(0, 3),
        dd = twoDigitPad(day),
        M = month + 1,
        MM = twoDigitPad(M),
        MMMM = monthNames[month],
        MMM = MMMM.substr(0, 3),
        yyyy = year + """",
        yy = yyyy.substr(2, 2)
    ;
    // checks to see if month name will be used
    patternStr = patternStr
      .replace('hh', hh).replace('h', h)
      .replace('HH', HH).replace('H', hour)
      .replace('mm', mm).replace('m', minute)
      .replace('ss', ss).replace('s', second)
      .replace('S', miliseconds)
      .replace('dd', dd).replace('d', day)
      
      .replace('EEEE', EEEE).replace('EEE', EEE)
      .replace('yyyy', yyyy)
      .replace('yy', yy)
      .replace('aaa', aaa);
    if (patternStr.indexOf('MMM') &gt; -1) {
        patternStr = patternStr
          .replace('MMMM', MMMM)
          .replace('MMM', MMM);
    }
    else {
        patternStr = patternStr
          .replace('MM', MM)
          .replace('M', M);
    }
    return patternStr;
}
function twoDigitPad(num) {
    return num &lt; 10 ? ""0"" + num : num;
}
console.log(formatDate(new Date()));
console.log(formatDate(new Date(), 'dd-MMM-yyyy')); //OP's request
console.log(formatDate(new Date(), 'EEEE, MMMM d, yyyy HH:mm:ss.S aaa'));
console.log(formatDate(new Date(), 'EEE, MMM d, yyyy HH:mm'));
console.log(formatDate(new Date(), 'yyyy-MM-dd HH:mm:ss.S'));
console.log(formatDate(new Date(), 'M/dd/yyyy h:mmaaa'));</code></pre>
</div>
</div>
</p>

<p>Thank you @Gerry for bringing up Luxon.</p>
"
"53377935","-2","<p>The personal_info part contains the following ASCII characters. </p>

<ol>
<li>Uppercase (A-Z) and lowercase (a-z) English letters. Digits (0-9).</li>
<li>Characters ! # $ % &amp; ' * + - / = ? ^ _ ` { | } ~ </li>
<li>Character . ( period, dot or fullstop) provided that it is not the
first or last character and it will not come one after the other.</li>
</ol>

<p>The domain name [for example com, org, net, in, us, info] part contains letters, digits, hyphens, and dots. </p>

<pre><code> function ValidateEmail(mail) 
{
 if (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(myForm.emailAddr.value))
  {
    return (true)
  }
    alert(""You have entered an invalid email address!"")
    return (false)
}
</code></pre>
"
"53748892","-1","<p>You could also use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"" rel=""nofollow noreferrer""><code>RegExp</code></a>:</p>
<pre><code>function validateEmail(str) {
    return new RegExp(/([\w\.\-_]+)?\w+@[\w-_]+(\.\w+){1,}/, 'igm').test(str);
}
</code></pre>
<p>See the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"" rel=""nofollow noreferrer"">Regular Expressions guide on MDN</a> for more info.</p>
"
"54234199","5","<p>I tried this problem with another approach,</p>

<p>Ordering of script importing, has no effect in here.</p>

<p><strong>index.html</strong></p>

<pre><code>&lt;!doctype html&gt;
&lt;html lang=""en""&gt;
&lt;head&gt;
    &lt;meta charset=""utf-8""&gt;
    &lt;title&gt;Trials&lt;/title&gt;
    &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1""&gt;
    &lt;script src=""main.js""&gt;&lt;/script&gt;
    &lt;script src=""scriptA.js""&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;h3&gt;testing js in js (check console logs)&lt;/h3&gt;
&lt;button onclick=""fnClick()""&gt;TEST&lt;/button&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>

<p><strong>main.js</strong></p>

<pre><code>function fnClick() {
  console.log('From\tAAAAA');
  var pro = myExpo.hello();
  console.log(pro);
}
</code></pre>

<p><strong>scriptA.js</strong></p>

<pre><code>myExpo = {
    hello: function () {
        console.log('From\tBBBBB');
        return ""Hello"";
    }
}
</code></pre>

<p>and the <strong>result</strong> is</p>

<pre><code>From    AAAAA
From    BBBBB
Hello
</code></pre>
"
"54350400","1","<p>A simple function that can return the date, the date + time, or just the time:</p>

<pre><code>var myDate = dateFormatter(""2019-01-24 11:33:24"", ""date-time"");
// &gt;&gt; RETURNS ""January 24, 2019 11:33:24""

var myDate2 = dateFormatter(""2019-01-24 11:33:24"", ""date"");
// &gt;&gt; RETURNS ""January 24, 2019""

var myDate3 = dateFormatter(""2019-01-24 11:33:24"", ""time"");
// &gt;&gt; RETURNS ""11:33:24""


function dateFormatter(strDate, format){
    var theDate = new Date(strDate);
    if (format==""time"")
       return getTimeFromDate(theDate);
    else{
       var dateOptions = {year:'numeric', month:'long', day:'numeric'};
       var formattedDate = theDate.toLocaleDateString(""en-US"", + dateOptions);
       if (format==""date"")
           return formattedDate;
       return formattedDate + "" "" + getTimeFromDate(theDate);
    }
}

function getTimeFromDate(theDate){
    var sec = theDate.getSeconds();
    if (sec&lt;10)
        sec = ""0"" + sec;
    var min = theDate.getMinutes();
    if (min&lt;10)
        min = ""0"" + min;
    return theDate.getHours() + ':'+ min + ':' + sec;
}

</code></pre>
"
"54845819","1","<p>Here's how I do it. I'm using match() to check for the standard email pattern and I'm adding a class to the input text to notify the user accordingly. Hope that helps!</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(document).ready(function(){
  $('#submit').on('click', function(){
      var email = $('#email').val();
      var pat = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
      if (email.match(pat)){
        $('#email')
          .addClass('input-valid');
        return false;
      } else {
        $('#email')
        	.addClass('input-error')
          .val('');
        return false;
      }
  });
});</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.input-error {
  border: 1px solid red;
  color: red;
}

.input-valid {
  border: 1px solid green;
  color: green;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;form&gt;
    &lt;input type=""text"" id=""email"" placeholder=""name@service.xx"" class=""""&gt;
    &lt;input type=""submit"" id=""submit"" value=""Send""/&gt;
&lt;/form&gt;</code></pre>
</div>
</div>
</p>
"
"54986702","3","<h1>Dynamically Loading Multiple Scripts In Order</h1>

<p>The above function works fine if you are loading only one script or you don't care about the loading order of multiple scripts. If you have some scripts that depends on others, you need to use <a href=""https://javascript.info/promise-basics"" rel=""nofollow noreferrer"">Promise</a> to specify the order of loading. The reason behind this is Javascript loads resources like scripts and images asynchronously. The loading sequence does not depends on the sequence of asynchronous calls, meaning script1 will not be guaranteed to load before script2 even if you call <code>dynamicallyLoadScript(""scrip1"")</code> before calling <code>dynamicallyLoadScript(""scrip2"")</code></p>

<p>So here's another version of dynamicallyLoadScript that guarantees loading order:</p>

<pre class=""lang-javascript prettyprint-override""><code>// Based on: https://javascript.info/promise-basics#example-loadscript
function dynamicallyLoadScript(url) {
        return new Promise(function(resolve, reject) {
        var script = document.createElement(""script"");
        script.src = url;
        script.onload = resolve;
        script.onerror = () =&gt; reject(new Error(`Error when loading ${url}!`));
        document.body.appendChild(script);
    });
</code></pre>

<p>For more on Promises, see <a href=""https://javascript.info/promise-basics"" rel=""nofollow noreferrer"">this excellent page</a>.</p>

<p>The usage of this new dynamicallyLoadScript is very simple:</p>



<pre><code>dynamicallyLoadScript(""script1.js"")
.then(() =&gt; dynamicallyLoadScript(""script2.js""))
.then(() =&gt; dynamicallyLoadScript(""script3.js""))
.then(() =&gt; dynamicallyLoadScript(""script4.js""))
.then(() =&gt; dynamicallyLoadScript(""script5.js""))
//...
</code></pre>

<p>Now the scripts are loaded in the order of script1.js, script2.js, script3.js, etc. </p>

<h3>Run dependent code after script loads</h3>

<p>In addition, you can immediately run code that uses the scripts after they are loaded. Just add another <code>.then</code> after the loading the script:</p>



<pre><code>dynamicallyLoadScript(""script1.js"")
.then(() =&gt; dynamicallyLoadScript(""script2.js""))
.then(() =&gt; foo()) // foo can be a function defined in either script1, script2
.then(() =&gt; dynamicallyLoadScript(""script3.js""))
.then(() =&gt; {
     if (var1){ // var1 can be a global variable defined in either script1, script2, or script3
          bar(var1); // bar can be a function defined in either script1, script2, or script3
     } else {
          foo(var1);
     }
})
//more .then chains...
</code></pre>

<hr>

<h3>Handle loading errors</h3>

<p>To display unhandled promise rejections (errors loading scripts, etc), put this <code>unhandledrejection</code> event listener at the top of your code:</p>



<pre><code>// Based on: https://javascript.info/promise-error-handling#unhandled-rejections
window.addEventListener('unhandledrejection', function(event) {
     // the event object has two special properties:
     console.error(event.promise);// the promise that generated the error
     console.error(event.reason); // the unhandled error object
});
</code></pre>

<p>Now you will be notified of any script loading errors.</p>

<hr>

<h3>Shortcut Function</h3>

<p>If you are loading a lot of scripts without executing code immediately after loading, this shorthand function may come in handy:</p>



<pre><code>function dynamicallyLoadScripts(urls){
        if (urls.length === 0){
            return;
        }
        let promise = dynamicallyLoadScript(urls[0]);
        urls.slice(1).forEach(url =&gt; {
            promise = promise.then(() =&gt; dynamicallyLoadScript(url));
        });
    }
</code></pre>

<p>To use it, just pass in an array of script urls like this:</p>



<pre><code>const scriptURLs = [""dist/script1.js"", ""dist/script2.js"", ""dist/script3.js""];
dynamicallyLoadScripts(scriptURLs);
</code></pre>

<p>The scripts will be loaded in the order they appear in the array.</p>
"
"55770919","1","<p>This <a href=""http://locutus.io/php/datetime/date/"" rel=""nofollow noreferrer"">Module</a> can easily handle mostly every case there is. 
It is part of a bigger npm package, by Locutus, which includes a variety of functions, but can be used totally independent of the package it self, just copy paste/ adapt a little if not working with npm (change from module to just a function)</p>

<p>As a second parameter it accepts a timestamp, which can come from anywhere, such as Date.getTime()</p>

<p>Also, Locutus maintains a bigger datetime module, also inside the locutus package which will give a more object oriented way to use it</p>

<p><a href=""http://locutus.io/php/datetime/"" rel=""nofollow noreferrer"">Here</a> you can see other datetime functions, as modules, that proved to be very usefull too.</p>

<p>You can find documentation on parameters and format strings <a href=""https://www.php.net/manual/en/function.date.php"" rel=""nofollow noreferrer"">here</a> (note that the doc site is a php site, but the locutus implementation follows exactly the same specs)</p>

<p>Examples of <strong>date</strong> Module</p>

<pre><code>date('H:m:s \\m \\i\\s \\m\\o\\n\\t\\h', 1062402400)//'07:09:40 m is month'

date('F j, Y, g:i a', 1062462400)//'September 2, 2003, 12:26 am'

date('Y W o', 1062462400)//'2003 36 2003'

var $x = date('Y m d', (new Date()).getTime() / 1000) $x = $x + '' var $result = $x.length // 2009 01 09    10

date('W', 1104534000)   //'52'

date('B t', 1104534000) //'999 31'

date('W U', 1293750000.82); // 2010-12-31   '52 1293750000'

date('W', 1293836400); // 2011-01-01    '52'

date('W Y-m-d', 1293974054); // 2011-01-02  '52 2011-01-02'
</code></pre>
"
"55807372","0","<p>I am using this function </p>

<pre><code>/**
 * @param {*} email
 */
export const validateEmail = email =&gt; {
    return new RegExp(/[\w-]+@([\w-]+\.)+[\w-]+/gm).test(email);
};
</code></pre>
"
"56403620","1","<p>You can use my <a href=""https://github.com/anhr/loadScriptNodeJS"" rel=""nofollow noreferrer"">loadScript ES module</a> for loading of the JavaScript files.</p>
<h2>Usage:</h2>
<p>In your head tag, include the following code:</p>
<pre><code>&lt;script src=&quot;https://raw.githack.com/anhr/loadScriptNodeJS/master/build/loadScript.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>or</p>
<pre><code>&lt;script src=&quot;https://raw.githack.com/anhr/loadScriptNodeJS/master/build/loadScript.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>Now you can use window.loadScript for loading of your JavaScript files.</p>
<h3>loadScript.async( src, [options] )</h3>
<p>Asynchronous load JavaScript file.</p>
<p><code>src</code>: URL of an external script file or array of the script file names.</p>
<p><code>options</code>: the following options are available</p>
<pre><code>onload: function () The onload event occurs when a script has been loaded. Default is undefined.

onerror: function ( str, e ) The onerror event occurs when an error has been occurred. The default is undefined.

    str: error details

    e: event

appendTo: The node to which the new script will be append. The default is the head node.
</code></pre>
<p>For example</p>
<pre><code>loadScript.async( &quot;JavaScript.js&quot;,
        {
            onload: function () {

                var str = 'file has been loaded successfully';
                console.log( str );
            },
            onerror: function ( str, e ) {

                console.error( str );
            },
        } );
</code></pre>
<p><a href=""https://raw.githack.com/anhr/loadScriptNodeJS/master/index.html"" rel=""nofollow noreferrer"">Example of usage</a></p>
"
"56458505","1","<p>If you want something a human can read and <strong>maintain</strong>, I would recommend <a href=""https://github.com/masala-oss/masala-parser"" rel=""nofollow noreferrer"">Masala Parser</a> (I'm one of the creators of it).</p>

<pre class=""lang-js prettyprint-override""><code>import {C,Streams} from '@masala/parser'

const illegalCharset = ' @\u00A0\n\t';
const extendedIllegalCharset = illegalCharset + '.';


// Assume 'nicolas@internal.masala.co.uk'
export function simpleEmail() {

    return C.charNotIn(illegalCharset).rep() // 'nicolas'
        .then(C.char('@'))
        .then(subDns())  //'internal.masala.co.'
        .then(C.charNotIn(extendedIllegalCharset).rep()) //'uk'
        .eos(); // Must be end of the char stream
}

// x@internal.masala.co.uk =&gt; extract 'internal.masala.co.'
function  subDns() {
    return C.charNotIn(extendedIllegalCharset).rep().then(C.char('.')).rep()
}

function validateEmail(email:string) {
    console.log(email + ': ' + (simpleEmail().parse(Streams.ofString(email)).isAccepted()));
}


validateEmail('nicolas@internal.masala.co.uk'); // True
validateEmail('nz@co.'); // False, trailing "".""
</code></pre>

<p>If you want to accept the ultimate ugly email version, you can add in quotes in the first part:</p>

<pre class=""lang-js prettyprint-override""><code>
function inQuote() {
    return C.char('""')
        .then(C.notChar('""').rep())
        .then(C.char('""'))
}

function allEmail() {

    return inQuote().or(C.charNotIn(illegalCharset))
        .rep() // repeat (inQuote or anyCharacter)
        .then(C.char('@'))
        .then(subDns())
        .then(C.charNotIn(extendedIllegalCharset).rep())
        .eos() // Must be end of the character stream
        // Create a structure
        .map(function (characters) { return ({ email: characters.join('') }); });
}
</code></pre>

<p><code>'""nicolas""""love-quotes""@masala.co.uk'</code> is officially valid, but should it be in your system?</p>

<p>At least with Masala, you give yourself a chance to understand it. And so for the next year, colleague.</p>
"
"56873772","2","<p>A little extension to the library from <a href=""https://stackoverflow.com/questions/950087/how-do-i-include-a-javascript-file-in-another-javascript-file/31282622#31282622"">Dan Dascalescu's answer </a> taken from the Facebook idea.</p>
<pre><code>(function() {
var __ = {};
this._ = function(name, callback) {
    if(__[name]==undefined) {
        __[name] = true;
        var firstScript = document.getElementsByTagName('script')[0],
          js = document.createElement('script');
          js.src =  name;
          js.onload = callback;
          firstScript.parentNode.insertBefore(js, firstScript);
    }
}
})();

(new _('https://cdnjs.cloudflare.com/ajax/libs/Snowstorm/20131208/snowstorm-min.js', function() {
 snowStorm.snowColor = '#99ccff';
}));
</code></pre>
"
"56974750","13","<h1>ES6 Modules</h1>
<p><em>Yes</em>, use type=&quot;module&quot; in a script tag (<a href=""https://caniuse.com/#search=type%3D%22module%22"" rel=""nofollow noreferrer"">support</a>):</p>
<pre><code>&lt;script type=&quot;module&quot; src=&quot;script.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>And in a <code>script.js</code> file include another file like this:</p>
<pre><code>import { hello } from './module.js';
...
// alert(hello());
</code></pre>
<p>In 'module.js' you must <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"" rel=""nofollow noreferrer"">export the function/class</a> that you will import:</p>
<pre><code>export function hello() {
    return &quot;Hello World&quot;;
}
</code></pre>
<p>A working <a href=""http://plnkr.co/edit/ln6J7wfdsJPUNzaEi3u6"" rel=""nofollow noreferrer"">example is here</a>.</p>
"
"57364612","0","<p>Here is some ready-to-paste time/date formatting code that does NOT rely on any external modules/libraries or use jQuery or ES7 or anything.  Unlike the code in some other answers, this code offers this combo of features:</p>

<ul>
<li>it takes a JavaScript Date object as input</li>
<li>it can display date as local time zone or UTC</li>
<li>it uses a simple formatting system ""{year4} {month02} {second}"" that is easy to read and understand even after you write the code, unlike the typical ""%D %m %-"" which always forces you back to the documentation</li>
<li>the formatting system does not have any weird self-collisions like some ad-hoc ""DD MM YYYY"" systems</li>
<li>you can run the test right here and try it</li>
</ul>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// format_date(date, pattern, utc)
// - date 
//   - a JavaScript Date object
//   - use ""new Date()"" for current time
// - pattern
//   - a string with embedded {codes} like
//     ""{year4}-{month02}-{day02}: {dayname3}""
//     see format_date_funcs below for complete list
//   - any other letters go through unchanged
// - utc
//   - if true, shows date in UTC time ""zone""
//   - if false/omitted, shows date in local time zone
//
var month_names = 
[
  ""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July"",
  ""August"", ""September"", ""October"", ""November"", ""December""
];
var day_of_week_names = 
[
  ""Sunday"", ""Monday"", ""Tuesday"",
  ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""
];
function space_pad2(num)
{
    return num &lt; 10 ? "" "" + num : num;
}
function zero_pad2(num)
{
    return num &lt; 10 ? ""0"" + num : num;
}
function space_pad3(num)
{
    if (num &lt; 10) 
        return ""  "" + num;
    else if (num &lt; 100)
        return "" "" + num;
    else
        return num;
}
function zero_pad3(num)
{
    if (num &lt; 10) 
        return ""00"" + num;
    else if (num &lt; 100)
        return ""0"" + num;
    else
        return num;
}
var format_date_funcs =
{
    // {year4}  = '1902'
    // {year02} =   '02'
    // 
    'year4': function(date, utc)
    {
        var year = utc ? date.getUTCFullYear() : date.getFullYear();
        return year;
    },
    'year02': function(date, utc)
    {
        var year = utc ? date.getUTCFullYear() : date.getFullYear();
        return year.toString().substr(2,2);
    },
    // {month}   =  '1' - '12'
    // {month2}  = ' 1' - '12' (space padded)
    // {month02} = '01' - '12'
    //
    'month': function(date, utc)
    {
        var month = utc ? date.getUTCMonth() : date.getMonth(); // [0,11]
        return            month + 1;
    },
    'month2': function(date, utc)
    {
        var month = utc ? date.getUTCMonth() : date.getMonth(); // [0,11]
        return space_pad2(month + 1);
    },
    'month02': function(date, utc)
    {
        var month = utc ? date.getUTCMonth() : date.getMonth(); // [0,11]
        return zero_pad2(month + 1);
    },
    // {monthname}  = 'January'
    // {monthname3} = 'Jan'
    // 
    'monthname': function(date, utc)
    {
        var month = utc ? date.getUTCMonth() : date.getMonth(); // [0,11]
        return month_names[month];
    },
    'monthname3': function(date, utc)
    {
        var month = utc ? date.getUTCMonth() : date.getMonth(); // [0,11]
        return month_names[month].substr(0, 3);
    },
    // {day}   =  '1' - '31'
    // {day2}  = ' 1' - '31' (space padded)
    // {day02} = '01' - '31'
    // 
    'day': function(date, utc)
    {
        var date = utc ? date.getUTCDate() : date.getDate(); // [1,31]
        return date;
    },
    'day2': function(date, utc)
    {
        var date = utc ? date.getUTCDate() : date.getDate(); // [1,31]
        return space_pad2(date);
    },
    'day02': function(date, utc)
    {
        var date = utc ? date.getUTCDate() : date.getDate(); // [1,31]
        return zero_pad2(date);
    },
    // {dayname}  = 'Tuesday'
    // {dayname3} = 'Tue'
    // 
    'dayname': function(date, utc)
    {
        var day = utc ? date.getUTCDay() : date.getDay(); // [0,6]
        return day_of_week_names[day];
    },
    'dayname3': function(date, utc)
    {
        var day = utc ? date.getUTCDay() : date.getDay(); // [0,6]
        return day_of_week_names[day].substr(0,3);
    },
    // {24hour}   =  '0' - '23'
    // {24hour2}  = ' 0' - '23' (space padded)
    // {24hour02} = '00' - '23'
    //
    '24hour': function(date, utc)
    {
        var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]
        return hour;
    },
    '24hour2': function(date, utc)
    {
        var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]
        return space_pad2(hour);
    },
    '24hour02': function(date, utc)
    {
        var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]
        return zero_pad2(hour);
    },
    // {12hour}   =  '1' - '12'
    // {12hour2}  = ' 1' - '12' (space padded)
    // {12hour02} = '01' - '12'
    // {ampm}     = 'am' or 'pm'
    // {AMPM}     = 'AM' or 'PM'
    //
    '12hour': function(date, utc)
    {
        var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]
        hour = hour % 12; // [0,11]
        if (0 === hour) hour = 12;
        return hour;
    },
    '12hour2': function(date, utc)
    {
        var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]
        hour = hour % 12; // [0,11]
        if (0 === hour) hour = 12;
        return space_pad2(hour);
    },
    '12hour02': function(date, utc)
    {
        var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]
        hour = hour % 12; // [0,11]
        if (0 === hour) hour = 12;
        return zero_pad2(hour);
    },
    'ampm': function(date, utc)
    {
        var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]
        return (hour &lt; 12 ? 'am' : 'pm');
    },
    'AMPM': function(date, utc)
    {
        var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]
        return (hour &lt; 12 ? 'AM' : 'PM');
    },
    // {minute}   =  '0' - '59'
    // {minute2}  = ' 0' - '59' (space padded)
    // {minute02} = '00' - '59'
    // 
    'minute': function(date, utc)
    {
        var minute = utc ? date.getUTCMinutes() : date.getMinutes(); // [0,59]
        return minute;
    },
    'minute2': function(date, utc)
    {
        var minute = utc ? date.getUTCMinutes() : date.getMinutes(); // [0,59]
        return space_pad2(minute);
    },
    'minute02': function(date, utc)
    {
        var minute = utc ? date.getUTCMinutes() : date.getMinutes(); // [0,59]
        return zero_pad2(minute);
    },
    // {second}   =  '0' - '59'
    // {second2}  = ' 0' - '59' (space padded)
    // {second02} = '00' - '59'
    // 
    'second': function(date, utc)
    {
        var second = utc ? date.getUTCSeconds() : date.getSeconds(); // [0,59]
        return second;
    },
    'second2': function(date, utc)
    {
        var second = utc ? date.getUTCSeconds() : date.getSeconds(); // [0,59]
        return space_pad2(second);
    },
    'second02': function(date, utc)
    {
        var second = utc ? date.getUTCSeconds() : date.getSeconds(); // [0,59]
        return zero_pad2(second);
    },
    // {msec}   =   '0' - '999'
    // {msec3}  = '  0' - '999' (space padded)
    // {msec03} = '000' - '999'
    // 
    'msec': function(date, utc)
    {
        var msec = 
            utc ? date.getUTCMilliseconds() : date.getMilliseconds(); // [0,999]
        return msec;
    },
    'msec3': function(date, utc)
    {
        var msec = 
            utc ? date.getUTCMilliseconds() : date.getMilliseconds(); // [0,999]
        return space_pad3(msec);
    },
    'msec03': function(date, utc)
    {
        var msec = 
            utc ? date.getUTCMilliseconds() : date.getMilliseconds(); // [0,999]
        return zero_pad3(msec);
    },
    // {open} = '{' (in case you actually want '{' in the output)
    //
    'open': function(date, utc)
    {
        return '{';
    }, 
    // {close} = '}' (in case you actually want '}' in the output)
    //
    'close': function(date, utc)
    {
        return '}';
    }, 
};
function format_date(date, pattern, utc)
{
    if (!pattern) 
    {
        pattern = '{month}/{day}/{year4}';
    }

    var ret = '';

    while (pattern.length &gt; 0)
    {
        var s = pattern.indexOf('{');
        var e = pattern.indexOf('}');
        //console.log('s ' + s + ' e ' + e);
        if (-1 !== s &amp;&amp; -1 !== e &amp;&amp; s &lt; e)
        {
            // - there is a well-formed {foo} in range [s,e]
            // - first we emit range [0,s) as literal
        }
        else
        {
            // - rest of string has no {} or has malformed }{ or { or }
            // - just emit the rest of the string as literal and be done
            s = pattern.length; 
        }
        // emit range [0,s) as literal
        if (s &gt; 0)
        {
            ret += pattern.substr(0, s);
            pattern = pattern.substr(s);
            e -= s;
            s = 0;
        }

        if (0 === pattern.length) break;

        // emit range [s=0,e] by evaluating code
        console.assert(0 === s); // position of {
        console.assert(e &gt; 0);  // position of }
        console.assert('{' === pattern.substr(s, 1));
        console.assert('}' === pattern.substr(e, 1));
        var code = pattern.substr(1,e-1);
        var func = format_date_funcs[code];
        console.assert(func);
        ret += func(date, utc);

        pattern = pattern.substr(e+1);
    }

    return ret;
}

if (1) // test format_date
{
    var fmt = '[';
    for (var func in format_date_funcs) 
    {
        if (!format_date_funcs.hasOwnProperty(func)) continue;
        fmt += '{' + func + '}/';
    }
    fmt += ']';
    var now = new Date();
    console.log(fmt);
    console.log(format_date(now, fmt, false /*utc*/));
    console.log(format_date(now, fmt, true /*utc*/));
}</code></pre>
</div>
</div>
</p>
"
"57966778","2","<p>Use the browser/runtime to handle parsing the input by prepending a protocol and pass it to the <code>URL</code> API, trapping any errors and check the resulting <code>username</code> and <code>hostname</code> properties of the result. It will handle basically all transformations and possibilities (<a href=""https://en.wikipedia.org/wiki/Punycode"" rel=""nofollow noreferrer"">punycode</a> of character sets, etc). This only establishes that the input is parsable, not that is valid--that is only possible through checking if the destination machine receives messages for that alias. This provides a close (imo reasonable) guess though, and can be expanded to be more specific and realistic if you're comfortable both maintaining it and also risking invalid rejections. (Note it doesn't attempt to address IPv4 or IPv6 addresses, simply the broad range of customer-facing scenarios using a domain.)</p>

<pre><code>function validEmail(email=''){
    var $0, url, isValid = false, emailPatternInput = /^[^@]{1,64}@[^@]{4,253}$/, emailPatternUrl = /^[^@]{1,64}@[a-z][a-z0-9\.-]{3,252}$/i;
    email = email.trim();
    try{
        url = new URL('http://'+email);
        $0 = `${url.username}@${url.hostname}`;
        isValid = emailPatternInput.test( email );
        if(!isValid) throw 'invalid email pattern on input:' + email;
        isValid = emailPatternUrl.test( $0 );
        if(!isValid) throw 'invalid email pattern on url:' + $0;
        console.log(`email looks legit ""${email}"" checking url-parts: ""${$0 === email ? '-SAME-':$0}""`);
    }catch(err){
        console.error(`probably not an email address: ""${email}""`, err);
    };
    return isValid;
}

['user+this@はじめよう.みんな', 'stuff@things', 'user+that@host.com', 'Jean+François@anydomain.museum','هيا@יאללה', '试@例子.测试.مثال.آزمایشی', 'not@@really', 'no'].forEach(email=&gt;console.log(validEmail(email), email));
</code></pre>

<p>This is the both the simplest and most generally permissive example I can come up with. Please edit it in cases where it can be made to be more accurate while maintain its simplicity and reasonable generally permissive validity.</p>

<p>Also see MDN URL docs <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URL/URL"" rel=""nofollow noreferrer"">URL</a>, <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URL"" rel=""nofollow noreferrer"">window.URL</a> and Nodejs for <a href=""https://nodejs.org/api/url.html"" rel=""nofollow noreferrer"">URL</a> APIs.</p>
"
"58311037","1","<p>So this is a edge case. But if you need to load the JavaScript from a remote source, most modern browsers might block your cross-site requests due to CORS or something similar. So normal</p>

<pre><code>&lt;script src=""https://another-domain.com/example.js""&gt;&lt;/script&gt;
</code></pre>

<p>Won't work. And doing the <code>document.createElement('script').src = '...'</code> won't cut it either. Instead, what you could do is load the java-script as a resource via standard <code>GET</code> request, and do this:</p>

<pre><code>&lt;script type=""text/javascript""&gt;
    var script = document.createElement('script');
    script.type = 'text/javascript';

    let xhr = new XMLHttpRequest();
    xhr.open(""GET"", 'https://raw.githubusercontent.com/Torxed/slimWebSocket/master/slimWebSocket.js', true);
    xhr.onreadystatechange = function() {
        if (this.readyState === XMLHttpRequest.DONE &amp;&amp; this.status === 200) {
            script.innerHTML = this.responseText; // &lt;-- This one
            document.head.appendChild(script);
        }
    }
    xhr.send();
&lt;/script&gt;
</code></pre>

<p>By grabbing the content yourself, the browser won't notice malicious intents and allow you go do the request. Then you add it in <code>&lt;script&gt;</code>'s <code>innerHTML</code> instead. This still causes the browser <em>(at least tested in Chrome)</em> to parse/execute the script.</p>

<p>Again, this is a edge case use case. And you'll have no backwards compatibility or browser compliance probably. But fun/useful thing to know about.</p>
"
"58687286","0","<p>for email validation you can create your custom function and use regex syntax for validate email:</p>

<pre><code>function validateEmail(email){
        var reg = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;

       //your custom code here to check your email address 

}
</code></pre>
"
"59048417","2","<p>You may try <code>RegExp</code></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function isValidEmail( value ) {
	return /^[\w\-\.\+]+\@[a-zA-Z0-9\.\-]+\.[a-zA-z0-9]{2,5}$/.test( value );
}

console.log( isValidEmail(""mymail@mydomain.com"") )</code></pre>
</div>
</div>
</p>
"
"59498223","2","<p>In my case, I wanted to avoid <code>~</code> and <code>#</code> that's why I have used <a href=""https://regex101.com/r/SOgUIV/1"" rel=""nofollow noreferrer"">another solution</a>:</p>
<pre><code>function validEmail(email){
  const regex = /^((?!\.)[\w-_.]*[^.])(@\w+)(\.\w+(\.\w+)?[^.\W])$/;
  return regex.test(email);
}
</code></pre>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function validEmail(email){
  const regex = /^((?!\.)[\w-_.]*[^.])(@\w+)(\.\w+(\.\w+)?[^.\W])$/;
  return regex.test(email);
}

const emails = [
'pio_pio@factory.com',
'~pio_pio@factory.com',
'pio_~pio@factory.com',
'pio_#pio@factory.com',
'pio_pio@#factory.com',
'pio_pio@factory.c#om',
'pio_pio@factory.c*om',
'pio^_pio@factory.com'
]

for(const email of emails){
  document.write(email+' : '+validEmail(email)+'&lt;/br&gt;');
}</code></pre>
</div>
</div>
</p>
"
"60042450","6","<p>I prefer to keep it simple and keep my users happy.  I also prefer code which is easy to understand. RegEx is not.</p>

<pre><code>function isValidEmail(value) {
    const atLocation = value.lastIndexOf(""@"");
    const dotLocation = value.lastIndexOf("".""); 
    return (
        atLocation &gt; 0 &amp;&amp;
        dotLocation &gt; atLocation + 1 &amp;&amp;
        dotLocation &lt; value.length - 1
    );
};
</code></pre>

<ul>
<li>Get the location of the last ""@"" and the last "".""</li>
<li>Make sure the ""@"" is not the first char (there is something before it) </li>
<li>Make sure the ""."" is after the ""@"" and that there is at least one char between them</li>
<li>Make sure there is at least a single char after the "".""</li>
</ul>

<p>Will this allow invalid email addresses to pass?  Sure, but I don't think you need much more for a good user experience that allows you to enable/disable a button, display an error message, etc.  You only know for sure that an email address is valid when you attempt to send an email to that address.</p>
"
"60265548","2","<p>This function I inspired by java's SimpleDateFormat provides various formats such as:</p>

<pre><code>dd-MMM-yyyy → 17-Jul-2018
yyyyMMdd'T'HHmmssXX → 20180717T120856+0900
yyyy-MM-dd'T'HH:mm:ssXXX → 2018-07-17T12:08:56+09:00
E, dd MMM yyyy HH:mm:ss Z → Tue, 17 Jul 2018 12:08:56 +0900
yyyy.MM.dd 'at' hh:mm:ss Z → 2018.07.17 at 12:08:56 +0900
EEE, MMM d, ''yy → Tue, Jul 17, '18
h:mm a → 12:08 PM
hh 'o''''clock' a, X → 12 o'clock PM, +09
</code></pre>

<p><strong>Code example:</strong></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function formatWith(formatStr, date, opts) {
    
        if (!date) {
            date = new Date();
        }
    
        opts = opts || {};
    
        let _days = opts.days;
    
        if (!_days) {
            _days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        }
    
        let _months = opts.months;
    
        if (!_months) {
            _months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        }
    
        const pad = (number, strDigits, isUnpad) =&gt; {
            const strNum = number.toString();
            if (!isUnpad &amp;&amp; strNum.length &gt; strDigits.length) {
                return strNum;
            } else {
                return ('0000' + strNum).slice(-strDigits.length);
            }
        };
    
        const timezone = (date, letter) =&gt; {
            const chunk = [];
            const offset = -date.getTimezoneOffset();
            chunk.push(offset === 0 ? 'Z' : offset &gt; 0 ? '+' : '-');//add Z or +,-
            if (offset === 0) return chunk;
            chunk.push(pad(Math.floor(offset / 60), '00'));//hour
            if (letter === 'X') return chunk.join('');
            if (letter === 'XXX') chunk.push(':');
            chunk.push(pad((offset % 60), '00'));//min
            return chunk.join('');
        };
    
        const ESCAPE_DELIM = '\0';
        const escapeStack = [];
    
        const escapedFmtStr = formatStr.replace(/'.*?'/g, m =&gt; {
            escapeStack.push(m.replace(/'/g, ''));
            return ESCAPE_DELIM + (escapeStack.length - 1) + ESCAPE_DELIM;
        });
    
        const formattedStr = escapedFmtStr
            .replace(/y{4}|y{2}/g, m =&gt; pad(date.getFullYear(), m, true))
            .replace(/M{3}/g, m =&gt; _months[date.getMonth()])
            .replace(/M{1,2}/g, m =&gt; pad(date.getMonth() + 1, m))
            .replace(/M{1,2}/g, m =&gt; pad(date.getMonth() + 1, m))
            .replace(/d{1,2}/g, m =&gt; pad(date.getDate(), m))
            .replace(/H{1,2}/g, m =&gt; pad(date.getHours(), m))
            .replace(/h{1,2}/g, m =&gt; {
                const hours = date.getHours();
                return pad(hours === 0 ? 12 : hours &gt; 12 ? hours - 12 : hours, m);
            })
            .replace(/a{1,2}/g, m =&gt; date.getHours() &gt;= 12 ? 'PM' : 'AM')
            .replace(/m{1,2}/g, m =&gt; pad(date.getMinutes(), m))
            .replace(/s{1,2}/g, m =&gt; pad(date.getSeconds(), m))
            .replace(/S{3}/g, m =&gt; pad(date.getMilliseconds(), m))
            .replace(/[E]+/g, m =&gt; _days[date.getDay()])
            .replace(/[Z]+/g, m =&gt; timezone(date, m))
            .replace(/X{1,3}/g, m =&gt; timezone(date, m))
        ;
    
        const unescapedStr = formattedStr.replace(/\0\d+\0/g, m =&gt; {
            const unescaped = escapeStack.shift();
            return unescaped.length &gt; 0 ? unescaped : '\'';
        });
    
        return unescapedStr;
    }

    //Let's format with above function
    const dateStr = '2018/07/17 12:08:56';
    const date = new Date(dateStr);
    const patterns = [
        ""dd-MMM-yyyy"",
        ""yyyyMMdd'T'HHmmssXX"",//ISO8601
        ""yyyy-MM-dd'T'HH:mm:ssXXX"",//ISO8601EX
        ""E, dd MMM yyyy HH:mm:ss Z"",//RFC1123(RFC822) like email
        ""yyyy.MM.dd 'at' hh:mm:ss Z"",//hh shows 1-12
        ""EEE, MMM d, ''yy"",
        ""h:mm a"",
        ""hh 'o''''clock' a, X"",
    ];
    
    
    for (let pattern of patterns) {
        console.log(`${pattern} → ${formatWith(pattern, date)}`);
    }</code></pre>
</div>
</div>
</p>

<p><strong>And you can use this as a library</strong></p>

<p>Also released as a NPM module.You can use this on node.js or use this from CDN for browser.</p>

<p><strong>nodejs</strong></p>

<pre><code>const {SimpleDateFormat} = require('@riversun/simple-date-format');
</code></pre>

<p><strong>on browser</strong></p>

<pre><code>&lt;script src=""https://cdn.jsdelivr.net/npm/@riversun/simple-date-format@1.0.2/dist/simple-date-format.js""&gt;&lt;/script&gt;
</code></pre>

<p>Write code as follows.</p>

<pre><code>const date = new Date('2018/07/17 12:08:56');
const sdf = new SimpleDateFormat();
console.log(sdf.formatWith(""yyyy-MM-dd'T'HH:mm:ssXXX"", date));//to be ""2018-07-17T12:08:56+09:00""
</code></pre>

<p><strong>Source code here on github</strong>:</p>

<p><a href=""https://github.com/riversun/simple-date-format"" rel=""nofollow noreferrer"">https://github.com/riversun/simple-date-format</a></p>
"
"60881661","5","<p>Works same in IE 11, FF &amp; Chrome (Chrome 80.x shows 12 hours format when en-UK selected).</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const d = new Date('2010/08/05 23:45') // 26.3.2020
const dtfUK = new Intl.DateTimeFormat('UK', { year: 'numeric', month: '2-digit', day: '2-digit',
        hour: '2-digit',minute: '2-digit', second: '2-digit' }); //
const dtfUS = new Intl.DateTimeFormat('en', { year: 'numeric', month: '2-digit', day: '2-digit',
        hour: '2-digit',minute: '2-digit', second: '2-digit' }); //
console.log(dtfUS.format(d)); // 08/05/2010 11:45:00 PM
console.log(dtfUK.format(d)); // 05.08.2010 23:45:00
/* node.js:
08/05/2010, 11:45:00 PM
2010-08-05 23:45:00
*/</code></pre>
</div>
</div>
</p>

<p>What about something more general ?</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var d = new Date('2010-08-10T10:34:56.789Z');
var str = d.toDateString() + // Tue Aug 10 2010
    ' ' + d.toTimeString().split(' ')[0] + // 12:34:56, GMT+0x00 (GMT+0x:00)
    ' ' + (d.getMonth() + 101) + // 108
    ' ' + d.getMilliseconds(); // 789
console.log(str); // Tue Aug 10 2010 12:34:56 108 789
console.log(//   $1 Tue  $2 Aug  $3 11     $4 2020 $5 12   $6 34   $7 56    $8 108  $9 789
    str.replace(/(\S{3}) (\S{3}) (\d{1,2}) (\d{4}) (\d{2}):(\d{2}):(\d{2}) 1(\d{2}) (\d{1,3})/, '$3-$2-$4 $5:$6.$9 ($1)')
); // 10-Aug-2010 12:34.789 (Tue)
/*
$1: Tue  Week Day string
$2: Aug  Month short text
$3: 11   Day
$4: 2010 Year
$5: 12   Hour
$6: 34   Minute
$7: 56   Seconds
$8: 08   Month
$9: 789  Milliseconds
*/</code></pre>
</div>
</div>
</p>

<p>Or for example 1-line IIFE <em>""library""</em> ;-)</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>console.log(
    (function (frm, d) { return [d.toDateString(), d.toTimeString().split(' ')[0], (d.getMonth() + 101), d.getMilliseconds()].join(' ').replace(/(\S{3}) (\S{3}) (\d{1,2}) (\d{4}) (\d{2}):(\d{2}):(\d{2}) 1(\d{2}) (\d{1,3})/, frm); })
    ('$4/$8/$3 $5:$6 ($1)', new Date())
);</code></pre>
</div>
</div>
</p>

<p><em>You can remove useless parts and / or change indexes if you do not need them.</em></p>
"
"61278138","0","<p>I did not see an answer whereby you create an object of all functions and variables in a file and then make that object an argument to refer to it in another file.</p>
<p>E.g., you have files called 'jsMod.js', 'jsView' and 'jsContr.js':</p>
<pre class=""lang-js prettyprint-override""><code>
    //jsMod.js file
    JSMODOBJ = {};
    JSMODOBJ.valueAddition = function(/* element value 1 */ val1,
                                          /* element value 2 */ val2) {
        return val1 + val2;
    }

</code></pre>
<pre class=""lang-js prettyprint-override""><code>
    //jsView.js file
    JSVIEWOBJ = {};
    JSVIEWOBJ.elementColour = function(/* element id to change colour */ id,
                                          /* css colour classname */ col) {
        document.getElementById(id).className = col;
    }

</code></pre>
<pre class=""lang-js prettyprint-override""><code>
    //jsContr.js file
    JSCONTROBJ = {};
    var jsMod = JSMODOBJ;
    var jsView = JSVIEWOBJ;

    JSCONTROBJ.changeColourByValue = function (val1, val2, id, clss) {
        if (jsMod.valueAddition(val1,val2) !== 0) {
            jsView.elementColour(id, clss);
        }
    }

</code></pre>
<p>Then you can set the .js files dynamically by echoeing the <code>scripts</code> into your .html or .php file:</p>
<pre class=""lang-php prettyprint-override""><code>&lt;?php
    echo &quot;&lt;script src = './js/dleafView.js'&gt;&lt;/script&gt;
        &lt;script src = './js/dleafModule.js'&gt;&lt;/script&gt;
        &lt;script src = './js/dleafContr.js'&gt;&lt;/script&gt;&quot;;
?&gt;
</code></pre>
<p>Then just call the control function within a <code>&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code> tag.  Of course this will take a lot of time in the beginning to set up, but it saves you time in the long run.</p>
<p>I use this in a slightly different way, but this way also work.</p>
"
"61330269","0","<p>You can also use <code>gulp</code>, <code>gulp-concat</code>, <code>gulp-typescript</code> with <code>/// &lt;reference path=</code> includes:</p>

<p><strong>packages.json</strong></p>

<pre class=""lang-js prettyprint-override""><code>{
  ""scripts"": {
    ""gulp"": ""gulp main""
  },
  ""dependencies"": {
    ""@types/gulp"": ""^4.0.6"",
    ""@types/gulp-concat"",
    ""@types/gulp-typescript"",
    ""gulp"": ""^4.0.2"",
    ""gulp-concat"": ""^2.6.1"",
    ""gulp-resolve-dependencies"": ""^3.0.1"",
    ""gulp-typescript"": ""^6.0.0-alpha.1"",
    ""typescript"": ""^3.7.3""
  }
}
</code></pre>

<p><strong>src/someimport.ts</strong></p>

<pre class=""lang-js prettyprint-override""><code>class SomeClass {
    delay: number;
}
</code></pre>

<p><strong>src/main.ts</strong></p>

<pre class=""lang-js prettyprint-override""><code>/// &lt;reference path=""./someimport.ts"" /&gt;

someclass = new SomeClass();
someclass.delay = 1;
</code></pre>

<p>This <code>main</code> gulp task (on <code>gulpfile.js</code>) targets only the <code>src/main.js</code> file, resolving all its <code>/// &lt;reference path=...</code> include references. These includes are know as <code>Triple-Slash Directives</code> and they are used only for transpilers tools to combine files. In our case, they are used explicitly by <code>.pipe(resolveDependencies({</code> and by typescript itself when checking the file for missing types, variables, etc.</p>

<ol>
<li><a href=""https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html"" rel=""nofollow noreferrer"">https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html</a></li>
<li><a href=""https://stackoverflow.com/questions/22684802/when-do-i-need-a-triple-slash-reference"">When do I need a triple slash reference?</a></li>
</ol>

<p>Refer to <a href=""https://github.com/ivogabe/gulp-typescript#api-overview"" rel=""nofollow noreferrer"">https://github.com/ivogabe/gulp-typescript#api-overview</a> if you would like to customize the <code>var tsProject = ts.createProject</code> call and not use a <code>tsconfig.json</code> file or override its parameters.</p>

<p><strong>gulpfile.js</strong></p>

<pre class=""lang-js prettyprint-override""><code>var gulp = require(""gulp"");
var concat = require('gulp-concat');
var resolveDependencies = require('gulp-resolve-dependencies');

var ts = require(""gulp-typescript"");
var tsProject = ts.createProject(""tsconfig.json"");

gulp.task(""main"", function() {
  return gulp
    .src([""src/main.ts""])
    .pipe(resolveDependencies({
      pattern: /^\s*\/\/\/\s*&lt;\s*reference\s*path\s*=\s*(?:""|')([^'""\n]+)/gm
    }))
    .on('error', function(err) {
        console.log(err.message);
    })
    .pipe(tsProject())
    .pipe(concat('main.js'))
    .pipe(gulp.dest(""build/""));
});
</code></pre>

<p>If you wold like to target all your type script project files instead of only <code>src/main.ts</code>, you can replace this:</p>

<pre class=""lang-js prettyprint-override""><code>  return gulp
    .src([""src/main.ts""])
    .pipe(resolveDependencies({
    ...
// --&gt;
  return tsProject
    .src()
    .pipe(resolveDependencies({
    ...
</code></pre>

<p>If you do not want to use <code>typescript</code>, you can use this simplified <code>gulpfile.js</code> and remove all <code>typescript</code> includes from <code>package.json</code>:</p>

<p><strong>gulpfile.js</strong></p>

<pre class=""lang-js prettyprint-override""><code>var gulp = require(""gulp"");
var concat = require('gulp-concat');
var resolveDependencies = require('gulp-resolve-dependencies');

gulp.task(""main"", function() {
  return gulp
    .src([""src/main.js""])
    .pipe(resolveDependencies({
      pattern: /^\s*\/\/\/\s*&lt;\s*reference\s*path\s*=\s*(?:""|')([^'""\n]+)/gm
    }))
    .on('error', function(err) {
        console.log(err.message);
    })
    .pipe(concat('main.js'))
    .pipe(gulp.dest(""build/""));
});
</code></pre>

<p><strong>packages.json</strong></p>

<pre class=""lang-js prettyprint-override""><code>{
  ""scripts"": {
    ""gulp"": ""gulp main""
  },
  ""dependencies"": {
    ""gulp"": ""^4.0.2"",
    ""gulp-concat"": ""^2.6.1"",
    ""gulp-resolve-dependencies"": ""^3.0.1""
  }
}
</code></pre>

<p>Then, after running the command <code>npm run gulp</code>, the file <code>build/main.js</code> is created with the following as its contents:</p>

<p><strong>build/main.js</strong></p>

<pre class=""lang-js prettyprint-override""><code>class SomeClass {
}
/// &lt;reference path=""./someimport.ts"" /&gt;
someclass = new SomeClass();
someclass.delay = 1;
</code></pre>

<p>Which allows me to include it in the browser with the <code>script</code> tag, after serving the <code>build</code> directory files:</p>

<pre class=""lang-html prettyprint-override""><code>&lt;html&gt;
    &lt;head&gt;
        &lt;script src=""main.js""&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;script type=""text/javascript""&gt;
            console.log(someclass.delay);
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Related questions:</p>

<ol>
<li><a href=""https://www.typescriptlang.org/docs/handbook/gulp.html"" rel=""nofollow noreferrer"">https://www.typescriptlang.org/docs/handbook/gulp.html</a></li>
<li><a href=""https://stackoverflow.com/questions/36710768/can-i-use-the-typescript-without-requirejs"">Can I use the typescript without requireJS?</a></li>
<li><a href=""https://stackoverflow.com/questions/52338233/gulp-simple-concatenation-of-main-file-that-requires-another-js-file"">Gulp simple concatenation of main file that requires another JS file</a></li>
<li><a href=""https://stackoverflow.com/questions/19059580/client-on-node-uncaught-referenceerror-require-is-not-defined"">Client on node: Uncaught ReferenceError: require is not defined</a></li>
<li><a href=""https://stackoverflow.com/questions/47318837/how-can-typescript-browser-node-modules-be-compiled-with-gulp"">How can typescript browser node modules be compiled with gulp?</a></li>
<li><a href=""https://stackoverflow.com/questions/38381621/concatenate-files-using-babel"">Concatenate files using babel</a></li>
<li><a href=""https://stackoverflow.com/questions/7576001/how-to-require-commonjs-modules-in-the-browser"">How to require CommonJS modules in the browser?</a></li>
<li><a href=""https://stackoverflow.com/questions/34438378/is-there-an-alternative-to-browserify"">Is there an alternative to Browserify?</a></li>
</ol>
"
"62626896","1","<p>May be this helps some one who are looking for multiple date formats one after the other by willingly or unexpectedly. Please find the code: I am using moment.js format function on a current date as (today is 29-06-2020) var startDate = moment(new Date()).format('MM/DD/YY'); Result: 06/28/20</p>
<p>what happening is it retains only the year part :20 as &quot;06/28/20&quot;, after If I run the statement : new Date(startDate) The result is &quot;Mon Jun 28 1920 00:00:00 GMT+0530 (India Standard Time)&quot;,</p>
<p>Then, when I use another format on &quot;06/28/20&quot;: startDate = moment(startDate ).format('MM-DD-YYYY'); Result: 06-28-1920, in google chrome and firefox browsers it gives correct date on second attempt as: 06-28-2020. But in IE it is having issues, from this I understood we can apply one dateformat on the given date, If we want second date format, it should be apply on the fresh date not on the first date format result. And also observe that for first time applying 'MM-DD-YYYY' and next 'MM-DD-YY' is working in IE. For clear understanding please find my question in the link: Date went wrong when using Momentjs date format in IE 11</p>
"
"64274450","2","<pre><code>Step 1: Declare the function in another class.

    export const myreport = (value) =&gt; {
    color = value.color;
    name = value.name;
    
    var mytext = name + &quot; | &quot; + color;
    return mytext;
    }

Step 2:- Import that function which is needed to be used.

    import {myreport} from '../../Test'

Step 3:- Use that function.

let val = { color: &quot;red&quot;, name: &quot;error&quot; }
var resultText = myreport(val)
console.log(&quot;resultText :- &quot;, resultText)
</code></pre>
"
"64336876","1","<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function convert_month(i = 0, option = ""num"") { // i = index

  var object_months = [
    { num: 01, short: ""Jan"", long: ""January"" },
    { num: 02, short: ""Feb"", long: ""Februari"" }, 
    { num: 03, short: ""Mar"", long: ""March"" },          
    { num: 04, short: ""Apr"", long: ""April"" },
    { num: 05, short: ""May"", long: ""May"" },
    { num: 06, short: ""Jun"", long: ""Juni"" },
    { num: 07, short: ""Jul"", long: ""July"" },
    { num: 08, short: ""Aug"", long: ""August"" },
    { num: 09, short: ""Sep"", long: ""September"" },
    { num: 10, short: ""Oct"", long: ""October"" },
    { num: 11, short: ""Nov"", long: ""November"" },
    { num: 12, short: ""Dec"", long: ""December"" }
  ];
        
  return object_months[i][option];

}
      
var d = new Date();
      
// https://stackoverflow.com/questions/1408289/how-can-i-do-string-interpolation-in-javascript
var num   = `${d.getDate()}-${convert_month(d.getMonth())}-${d.getFullYear()}`;
var short = `${d.getDate()}-${convert_month(d.getMonth(), ""short"")}-${d.getFullYear()}`;
var long  = `${d.getDate()}-${convert_month(d.getMonth(), ""long"")}-${d.getFullYear()}`;

document.querySelector(""#num"").innerHTML = num;
document.querySelector(""#short"").innerHTML = short;
document.querySelector(""#long"").innerHTML = long;</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;p&gt;Numeric  : &lt;span id=""num""&gt;&lt;/span&gt; (default)&lt;/p&gt;
&lt;p&gt;Short    : &lt;span id=""short""&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Long     : &lt;span id=""long""&gt;&lt;/span&gt;&lt;/p&gt;</code></pre>
</div>
</div>
</p>
"
"64735657","1","<pre><code>     // Html form call function name at submit button

    &lt;form name=&quot;form1&quot; action=&quot;#&quot;&gt; 
    &lt;input type='text' name='text1'/&gt;
    &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; 
    onclick=&quot;ValidateEmail(document.form1.text1)&quot;/&gt;
   &lt;/from&gt;

    // Write the function name ValidateEmail below

    &lt;script&gt;
     function ValidateEmail(inputText)
    {
  var mailformat = /^[a-zA-Z0-9.!#$%&amp;'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
    if(inputText.value.match(mailformat))
    {
    alert(&quot;Valid email address!&quot;);
    document.form1.text1.focus();
    return true;
    }
    else
   {
    alert(&quot;You have entered an invalid email address!&quot;);
    document.form1.text1.focus();
    return false;
    }
    }
   &lt;/script&gt;
</code></pre>
"
"67295040","0","<pre><code>// Try this regular Expression by ES6 function

const emailValidate = (email) =&gt; {
  const regexp= /^[\w.%+-]+@[\w.-]+\.[\w]{2,6}$/;
  return regexp.test(email);
}
</code></pre>
"
"67622485","-1","<p>Simple suggestion, since i've seen confusion through the answers.</p>
<pre><code>function validaEmail(email){

  if(email.includes(&quot;@&quot;)){

    if(email.split(&quot;@&quot;)[1].includes(&quot;.&quot;)){
      return true;
    }

  }

  return false;
  
}
</code></pre>
"